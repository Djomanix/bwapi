; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Fili\Development\GP\RtsAiResearch\bwapi\bwapi\libReplayTool\Replay.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?replayHeader@@3Ureplay_resource@ReplayTool@@A	; replayHeader
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Value@?$_Size@U?$_Cons_node@U_Nil@tr1@std@@U123@@tr1@std@@@tr1@std@@2IB ; std::tr1::_Size<std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> >::_Value
_BSS	SEGMENT
?replayHeader@@3Ureplay_resource@ReplayTool@@A DB 0279H DUP (?) ; replayHeader
_BSS	ENDS
;	COMDAT ?_Value@?$_Size@U?$_Cons_node@U_Nil@tr1@std@@U123@@tr1@std@@@tr1@std@@2IB
CONST	SEGMENT
?_Value@?$_Size@U?$_Cons_node@U_Nil@tr1@std@@U123@@tr1@std@@@tr1@std@@2IB DD 00H ; std::tr1::_Size<std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> >::_Value
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?writeBuffer@@YAXPBD0PAXK@Z			; writeBuffer
EXTRN	??1FileWriter@ReplayTool@@QAE@XZ:PROC		; ReplayTool::FileWriter::~FileWriter
EXTRN	?WriteRaw@FileWriter@ReplayTool@@QAEXPAXI@Z:PROC ; ReplayTool::FileWriter::WriteRaw
EXTRN	?Open@FileWriter@ReplayTool@@QAE_NPBD@Z:PROC	; ReplayTool::FileWriter::Open
EXTRN	__imp__sprintf:PROC
EXTRN	??0FileWriter@ReplayTool@@QAE@XZ:PROC		; ReplayTool::FileWriter::FileWriter
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT xdata$x
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\replay.cpp
xdata$x	SEGMENT
__unwindtable$?writeBuffer@@YAXPBD0PAXK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeBuffer@@YAXPBD0PAXK@Z$0
__ehfuncinfo$?writeBuffer@@YAXPBD0PAXK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?writeBuffer@@YAXPBD0PAXK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?writeBuffer@@YAXPBD0PAXK@Z
_TEXT	SEGMENT
_szTmp$ = -292						; size = 260
_fw$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFormat$ = 8						; size = 4
_pszFilename$ = 12					; size = 4
_pBuffer$ = 16						; size = 4
_dwBufferSize$ = 20					; size = 4
?writeBuffer@@YAXPBD0PAXK@Z PROC			; writeBuffer, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?writeBuffer@@YAXPBD0PAXK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 18 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-488]
  00020	b9 77 00 00 00	 mov	 ecx, 119		; 00000077H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 20   :   FileWriter fw;

  00040	8d 4d e8	 lea	 ecx, DWORD PTR _fw$[ebp]
  00043	e8 00 00 00 00	 call	 ??0FileWriter@ReplayTool@@QAE@XZ ; ReplayTool::FileWriter::FileWriter
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 21   :   char szTmp[MAX_PATH];
; 22   :   sprintf(szTmp, pszFormat, pszFilename);

  0004f	8b f4		 mov	 esi, esp
  00051	8b 45 0c	 mov	 eax, DWORD PTR _pszFilename$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _pszFormat$[ebp]
  00058	51		 push	 ecx
  00059	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _szTmp$[ebp]
  0005f	52		 push	 edx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 23   :   if ( fw.Open( szTmp ) )

  00070	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00076	50		 push	 eax
  00077	8d 4d e8	 lea	 ecx, DWORD PTR _fw$[ebp]
  0007a	e8 00 00 00 00	 call	 ?Open@FileWriter@ReplayTool@@QAE_NPBD@Z ; ReplayTool::FileWriter::Open
  0007f	0f b6 c8	 movzx	 ecx, al
  00082	85 c9		 test	 ecx, ecx
  00084	74 10		 je	 SHORT $LN1@writeBuffe

; 24   :     fw.WriteRaw(pBuffer, dwBufferSize);

  00086	8b 45 14	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 10	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  0008d	51		 push	 ecx
  0008e	8d 4d e8	 lea	 ecx, DWORD PTR _fw$[ebp]
  00091	e8 00 00 00 00	 call	 ?WriteRaw@FileWriter@ReplayTool@@QAEXPAXI@Z ; ReplayTool::FileWriter::WriteRaw
$LN1@writeBuffe:

; 25   : }

  00096	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009d	8d 4d e8	 lea	 ecx, DWORD PTR _fw$[ebp]
  000a0	e8 00 00 00 00	 call	 ??1FileWriter@ReplayTool@@QAE@XZ ; ReplayTool::FileWriter::~FileWriter
  000a5	52		 push	 edx
  000a6	8b cd		 mov	 ecx, ebp
  000a8	50		 push	 eax
  000a9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@writeBuffe
  000af	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b4	58		 pop	 eax
  000b5	5a		 pop	 edx
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c0	59		 pop	 ecx
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	81 c4 e8 01 00
	00		 add	 esp, 488		; 000001e8H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN9@writeBuffe:
  000e0	02 00 00 00	 DD	 2
  000e4	00 00 00 00	 DD	 $LN8@writeBuffe
$LN8@writeBuffe:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN5@writeBuffe
  000f4	dc fe ff ff	 DD	 -292			; fffffedcH
  000f8	04 01 00 00	 DD	 260			; 00000104H
  000fc	00 00 00 00	 DD	 $LN6@writeBuffe
$LN6@writeBuffe:
  00100	73		 DB	 115			; 00000073H
  00101	7a		 DB	 122			; 0000007aH
  00102	54		 DB	 84			; 00000054H
  00103	6d		 DB	 109			; 0000006dH
  00104	70		 DB	 112			; 00000070H
  00105	00		 DB	 0
$LN5@writeBuffe:
  00106	66		 DB	 102			; 00000066H
  00107	77		 DB	 119			; 00000077H
  00108	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?writeBuffer@@YAXPBD0PAXK@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _fw$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FileWriter@ReplayTool@@QAE@XZ ; ReplayTool::FileWriter::~FileWriter
__ehhandler$?writeBuffer@@YAXPBD0PAXK@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 14 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-492]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeBuffer@@YAXPBD0PAXK@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeBuffer@@YAXPBD0PAXK@Z ENDP			; writeBuffer
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??_C@_0BC@EJMFLGPI@Replay_errLog?4log?$AA@	; `string'
PUBLIC	?errSimple@@YA_NPBD@Z				; errSimple
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJMFLGPI@Replay_errLog?4log?$AA@
CONST	SEGMENT
??_C@_0BC@EJMFLGPI@Replay_errLog?4log?$AA@ DB 'Replay_errLog.log', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?errSimple@@YA_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?errSimple@@YA_NPBD@Z$0
__ehfuncinfo$?errSimple@@YA_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?errSimple@@YA_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?errSimple@@YA_NPBD@Z
_TEXT	SEGMENT
$T173716 = -385						; size = 1
_log$ = -184						; size = 168
__$EHRec$ = -12						; size = 12
_pszText$ = 8						; size = 4
?errSimple@@YA_NPBD@Z PROC				; errSimple, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?errSimple@@YA_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 78 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-392]
  00020	b9 5f 00 00 00	 mov	 ecx, 95			; 0000005fH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 29   :   std::ofstream log("Replay_errLog.log", std::ios_base::app);

  0003d	6a 01		 push	 1
  0003f	6a 40		 push	 64			; 00000040H
  00041	6a 08		 push	 8
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EJMFLGPI@Replay_errLog?4log?$AA@
  00048	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 30   :   log << pszText << "\n";

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0005f	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  00062	50		 push	 eax
  00063	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006f	83 c4 08	 add	 esp, 8
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00078	83 c4 08	 add	 esp, 8

; 31   :   log.close();

  0007b	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  00081	e8 00 00 00 00	 call	 ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close

; 32   :   return false;

  00086	c6 85 7f fe ff
	ff 00		 mov	 BYTE PTR $T173716[ebp], 0
  0008d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00094	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  0009a	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0009f	8a 85 7f fe ff
	ff		 mov	 al, BYTE PTR $T173716[ebp]

; 33   : }

  000a5	52		 push	 edx
  000a6	8b cd		 mov	 ecx, ebp
  000a8	50		 push	 eax
  000a9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@errSimple
  000af	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b4	58		 pop	 eax
  000b5	5a		 pop	 edx
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c0	59		 pop	 ecx
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	81 c4 88 01 00
	00		 add	 esp, 392		; 00000188H
  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
  000d5	8d 49 00	 npad	 3
$LN7@errSimple:
  000d8	01 00 00 00	 DD	 1
  000dc	00 00 00 00	 DD	 $LN6@errSimple
$LN6@errSimple:
  000e0	48 ff ff ff	 DD	 -184			; ffffff48H
  000e4	a8 00 00 00	 DD	 168			; 000000a8H
  000e8	00 00 00 00	 DD	 $LN4@errSimple
$LN4@errSimple:
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6f		 DB	 111			; 0000006fH
  000ee	67		 DB	 103			; 00000067H
  000ef	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?errSimple@@YA_NPBD@Z$0:
  00000	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?errSimple@@YA_NPBD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 74 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-396]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?errSimple@@YA_NPBD@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?errSimple@@YA_NPBD@Z ENDP				; errSimple
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 60	 add	 ecx, 96			; 00000060H
  00029	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 60	 add	 ecx, 96			; 00000060H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_C@_0BD@LIIDKFNL@?$CFs?2?$CFs?4?$CFd?4trace?4txt?$AA@ ; `string'
PUBLIC	?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::close
PUBLIC	?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open
PUBLIC	??_C@_0BA@BJFOHCCG@?$CFs?2?$CFs?4trace?4txt?$AA@ ; `string'
PUBLIC	?getOutRepoPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getOutRepoPath
PUBLIC	?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
PUBLIC	??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
PUBLIC	?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z ; getActionsTraceFilepath
EXTRN	__imp_??Bios_base@std@@QBEPAXXZ:PROC
EXTRN	__imp__sprintf_s:PROC
EXTRN	__imp__strrchr:PROC
;	COMDAT ??_C@_0BD@LIIDKFNL@?$CFs?2?$CFs?4?$CFd?4trace?4txt?$AA@
CONST	SEGMENT
??_C@_0BD@LIIDKFNL@?$CFs?2?$CFs?4?$CFd?4trace?4txt?$AA@ DB '%s\%s.%d.trac'
	DB	'e.txt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJFOHCCG@?$CFs?2?$CFs?4trace?4txt?$AA@
CONST	SEGMENT
??_C@_0BA@BJFOHCCG@?$CFs?2?$CFs?4trace?4txt?$AA@ DB '%s\%s.trace.txt', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z$0
__ehfuncinfo$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z
_TEXT	SEGMENT
_nameCollisionID$158500 = -224				; size = 4
_replayFilename$ = -212					; size = 4
_actionsDbgFile$ = -200					; size = 184
__$EHRec$ = -12						; size = 12
_params$ = 8						; size = 4
_actionsDbgFilepath$ = 12				; size = 4
?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z PROC ; getActionsTraceFilepath, COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 98 01 00
	00		 sub	 esp, 408		; 00000198H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 5c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-420]
  00020	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 46   :   fstream actionsDbgFile;

  0003d	6a 01		 push	 1
  0003f	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 47   :   const char* replayFilename = strrchr(params.getReplayPath(), '\\');

  00051	8b f4		 mov	 esi, esp
  00053	6a 5c		 push	 92			; 0000005cH
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00058	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  0005d	50		 push	 eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strrchr
  00064	83 c4 08	 add	 esp, 8
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	89 85 2c ff ff
	ff		 mov	 DWORD PTR _replayFilename$[ebp], eax

; 48   : 
; 49   :   // In case the path has no slashes i.e the replay file name only
; 50   :   if (NULL == replayFilename)

  00074	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _replayFilename$[ebp], 0
  0007b	75 10		 jne	 SHORT $LN6@getActions

; 51   :   {
; 52   :     replayFilename = params.getReplayPath();

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00080	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR _replayFilename$[ebp], eax

; 53   :   }
; 54   :   else

  0008b	eb 0f		 jmp	 SHORT $LN5@getActions
$LN6@getActions:

; 55   :   {
; 56   :     // stand directly after the slash
; 57   :     ++replayFilename;

  0008d	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _replayFilename$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	89 85 2c ff ff
	ff		 mov	 DWORD PTR _replayFilename$[ebp], eax
$LN5@getActions:

; 58   :   }
; 59   : 
; 60   :   actionsDbgFilepath[0] = '\0';

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _actionsDbgFilepath$[ebp]
  0009f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 61   : 
; 62   :   sprintf_s(actionsDbgFilepath, MAX_PATH, "%s\\%s.trace.txt", params.getOutRepoPath(), replayFilename);

  000a2	8b f4		 mov	 esi, esp
  000a4	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _replayFilename$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  000ae	e8 00 00 00 00	 call	 ?getOutRepoPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getOutRepoPath
  000b3	50		 push	 eax
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BJFOHCCG@?$CFs?2?$CFs?4trace?4txt?$AA@
  000b9	68 04 01 00 00	 push	 260			; 00000104H
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _actionsDbgFilepath$[ebp]
  000c1	51		 push	 ecx
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf_s
  000c8	83 c4 14	 add	 esp, 20			; 00000014H
  000cb	3b f4		 cmp	 esi, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 63   :   actionsDbgFile.open(actionsDbgFilepath, ios::in | ios::out | ios::_Nocreate);

  000d2	6a 40		 push	 64			; 00000040H
  000d4	6a 43		 push	 67			; 00000043H
  000d6	8b 45 0c	 mov	 eax, DWORD PTR _actionsDbgFilepath$[ebp]
  000d9	50		 push	 eax
  000da	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  000e0	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 64   : 
; 65   :   // File could be opened successfully which means that a filename collision happened
; 66   :   // a file with the same name already exists, need to generate a unique filename
; 67   :   if (actionsDbgFile)

  000e5	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _actionsDbgFile$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	8d 8c 0d 38 ff
	ff ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp+ecx]
  000f5	8b f4		 mov	 esi, esp
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
  000fd	3b f4		 cmp	 esi, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	85 c0		 test	 eax, eax
  00106	0f 84 9b 00 00
	00		 je	 $LN4@getActions

; 68   :   {
; 69   :     unsigned nameCollisionID = 0;

  0010c	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nameCollisionID$158500[ebp], 0
$LN3@getActions:

; 70   : 
; 71   :     do
; 72   :     {
; 73   :       actionsDbgFile.close();

  00116	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  0011c	e8 00 00 00 00	 call	 ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::close

; 74   : 
; 75   :       actionsDbgFilepath[0] = '\0';

  00121	8b 45 0c	 mov	 eax, DWORD PTR _actionsDbgFilepath$[ebp]
  00124	c6 00 00	 mov	 BYTE PTR [eax], 0

; 76   :       ++nameCollisionID;

  00127	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _nameCollisionID$158500[ebp]
  0012d	83 c0 01	 add	 eax, 1
  00130	89 85 20 ff ff
	ff		 mov	 DWORD PTR _nameCollisionID$158500[ebp], eax

; 77   :       sprintf_s(actionsDbgFilepath, MAX_PATH, "%s\\%s.%d.trace.txt", params.getOutRepoPath(), replayFilename, nameCollisionID);

  00136	8b f4		 mov	 esi, esp
  00138	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _nameCollisionID$158500[ebp]
  0013e	50		 push	 eax
  0013f	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _replayFilename$[ebp]
  00145	51		 push	 ecx
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00149	e8 00 00 00 00	 call	 ?getOutRepoPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getOutRepoPath
  0014e	50		 push	 eax
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LIIDKFNL@?$CFs?2?$CFs?4?$CFd?4trace?4txt?$AA@
  00154	68 04 01 00 00	 push	 260			; 00000104H
  00159	8b 55 0c	 mov	 edx, DWORD PTR _actionsDbgFilepath$[ebp]
  0015c	52		 push	 edx
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf_s
  00163	83 c4 18	 add	 esp, 24			; 00000018H
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 78   : 
; 79   :       actionsDbgFile.open(actionsDbgFilepath, ios::in | ios::out | ios::_Nocreate);

  0016d	6a 40		 push	 64			; 00000040H
  0016f	6a 43		 push	 67			; 00000043H
  00171	8b 45 0c	 mov	 eax, DWORD PTR _actionsDbgFilepath$[ebp]
  00174	50		 push	 eax
  00175	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  0017b	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 80   :     }
; 81   :     while (actionsDbgFile);

  00180	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _actionsDbgFile$[ebp]
  00186	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00189	8d 8c 0d 38 ff
	ff ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp+ecx]
  00190	8b f4		 mov	 esi, esp
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
  00198	3b f4		 cmp	 esi, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	85 c0		 test	 eax, eax
  001a1	0f 85 6f ff ff
	ff		 jne	 $LN3@getActions
$LN4@getActions:

; 82   :   }
; 83   : 
; 84   :   actionsDbgFile.close();

  001a7	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  001ad	e8 00 00 00 00	 call	 ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::close

; 85   : }

  001b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b9	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  001bf	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  001c4	52		 push	 edx
  001c5	8b cd		 mov	 ecx, ebp
  001c7	50		 push	 eax
  001c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@getActions
  001ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d3	58		 pop	 eax
  001d4	5a		 pop	 edx
  001d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001df	59		 pop	 ecx
  001e0	5f		 pop	 edi
  001e1	5e		 pop	 esi
  001e2	5b		 pop	 ebx
  001e3	81 c4 a4 01 00
	00		 add	 esp, 420		; 000001a4H
  001e9	3b ec		 cmp	 ebp, esp
  001eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c3		 ret	 0
$LN13@getActions:
  001f4	01 00 00 00	 DD	 1
  001f8	00 00 00 00	 DD	 $LN12@getActions
$LN12@getActions:
  001fc	38 ff ff ff	 DD	 -200			; ffffff38H
  00200	b8 00 00 00	 DD	 184			; 000000b8H
  00204	00 00 00 00	 DD	 $LN10@getActions
$LN10@getActions:
  00208	61		 DB	 97			; 00000061H
  00209	63		 DB	 99			; 00000063H
  0020a	74		 DB	 116			; 00000074H
  0020b	69		 DB	 105			; 00000069H
  0020c	6f		 DB	 111			; 0000006fH
  0020d	6e		 DB	 110			; 0000006eH
  0020e	73		 DB	 115			; 00000073H
  0020f	44		 DB	 68			; 00000044H
  00210	62		 DB	 98			; 00000062H
  00211	67		 DB	 103			; 00000067H
  00212	46		 DB	 70			; 00000046H
  00213	69		 DB	 105			; 00000069H
  00214	6c		 DB	 108			; 0000006cH
  00215	65		 DB	 101			; 00000065H
  00216	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z$0:
  00000	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _actionsDbgFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 58 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-424]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z ENDP ; getActionsTraceFilepath
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\parsereplayparams.h
;	COMDAT ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ PROC ; ReplayTool::ParseReplayParams::getReplayPath, COMDAT
; _this$ = ecx

; 16   :   const char* getReplayPath() const { return replayPath; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ENDP ; ReplayTool::ParseReplayParams::getReplayPath
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?getOutRepoPath@ParseReplayParams@ReplayTool@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getOutRepoPath@ParseReplayParams@ReplayTool@@QBEPBDXZ PROC ; ReplayTool::ParseReplayParams::getOutRepoPath, COMDAT
; _this$ = ecx

; 19   :   const char* getOutRepoPath() const { return outRepoPath; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	05 04 01 00 00	 add	 eax, 260		; 00000104H
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?getOutRepoPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ENDP ; ReplayTool::ParseReplayParams::getOutRepoPath
_TEXT	ENDS
PUBLIC	??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 70	 add	 ecx, 112		; 00000070H
  00029	e8 00 00 00 00	 call	 ??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 70	 add	 ecx, 112		; 00000070H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
PUBLIC	??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	??_C@_0BH@GIODCKM@?5?9?9?5Fixed?5replay?5with?5?$AA@ ; `string'
PUBLIC	??_C@_0BD@KJNJLLBA@?5frames?4?5Desired?3?5?$AA@	; `string'
PUBLIC	??_C@_09OLOLNFGA@?5frames?4?6?$AA@		; `string'
PUBLIC	??_C@_0M@ELGLGCGP@Results?4txt?$AA@		; `string'
PUBLIC	??0?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	??_C@_06OFAPKIKJ@?$CFs?4chk?$AA@		; `string'
PUBLIC	??_C@_06IOAJIBFN@?$CFs?4act?$AA@		; `string'
PUBLIC	??_C@_06KABEHPNE@?$CFs?4hdr?$AA@		; `string'
PUBLIC	??_C@_0BK@IEBEPEGN@Decompressing?5map?5failed?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OIDIHHCB@Unable?5to?5read?5chk?5size?4?$AA@ ; `string'
PUBLIC	??_C@_0BO@EPJINIOH@Decompressing?5actions?5failed?4?$AA@ ; `string'
PUBLIC	??_C@_0BN@BAHEENIG@Unable?5to?5read?5actions?5size?4?$AA@ ; `string'
PUBLIC	??_C@_0BO@IOIDDIKA@Unable?5to?5read?5replay?5header?4?$AA@ ; `string'
PUBLIC	??_C@_0BN@JDKFCELP@No?5Replay?5resource?5ID?5found?4?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_parseReplay
EXTRN	?size@ReplayReader@ReplayTool@@QBEIXZ:PROC	; ReplayTool::ReplayReader::size
EXTRN	?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z:PROC ; CompressWrite
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:PROC
EXTRN	?highestFrameTick@ReplayReader@ReplayTool@@UBEKXZ:PROC ; ReplayTool::ReplayReader::highestFrameTick
EXTRN	_logActions:PROC
EXTRN	_parseActions:PROC
EXTRN	__imp__malloc:PROC
EXTRN	??1ReplayReader@ReplayTool@@UAE@XZ:PROC		; ReplayTool::ReplayReader::~ReplayReader
EXTRN	??BReplayReader@ReplayTool@@QBEPAXXZ:PROC	; ReplayTool::ReplayReader::operator void *
EXTRN	??0ReplayReader@ReplayTool@@QAE@K@Z:PROC	; ReplayTool::ReplayReader::ReplayReader
EXTRN	?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z:PROC ; DecompressRead
EXTRN	??1FileReader@ReplayTool@@QAE@XZ:PROC		; ReplayTool::FileReader::~FileReader
EXTRN	?Open@FileReader@ReplayTool@@QAE_NPBD@Z:PROC	; ReplayTool::FileReader::Open
EXTRN	??0FileReader@ReplayTool@@QAE@XZ:PROC		; ReplayTool::FileReader::FileReader
;	COMDAT ??_C@_0BH@GIODCKM@?5?9?9?5Fixed?5replay?5with?5?$AA@
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\replay.cpp
CONST	SEGMENT
??_C@_0BH@GIODCKM@?5?9?9?5Fixed?5replay?5with?5?$AA@ DB ' -- Fixed replay'
	DB	' with ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJNJLLBA@?5frames?4?5Desired?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@KJNJLLBA@?5frames?4?5Desired?3?5?$AA@ DB ' frames. Desired: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OLOLNFGA@?5frames?4?6?$AA@
CONST	SEGMENT
??_C@_09OLOLNFGA@?5frames?4?6?$AA@ DB ' frames.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ELGLGCGP@Results?4txt?$AA@
CONST	SEGMENT
??_C@_0M@ELGLGCGP@Results?4txt?$AA@ DB 'Results.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFAPKIKJ@?$CFs?4chk?$AA@
CONST	SEGMENT
??_C@_06OFAPKIKJ@?$CFs?4chk?$AA@ DB '%s.chk', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOAJIBFN@?$CFs?4act?$AA@
CONST	SEGMENT
??_C@_06IOAJIBFN@?$CFs?4act?$AA@ DB '%s.act', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KABEHPNE@?$CFs?4hdr?$AA@
CONST	SEGMENT
??_C@_06KABEHPNE@?$CFs?4hdr?$AA@ DB '%s.hdr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IEBEPEGN@Decompressing?5map?5failed?4?$AA@
CONST	SEGMENT
??_C@_0BK@IEBEPEGN@Decompressing?5map?5failed?4?$AA@ DB 'Decompressing ma'
	DB	'p failed.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OIDIHHCB@Unable?5to?5read?5chk?5size?4?$AA@
CONST	SEGMENT
??_C@_0BJ@OIDIHHCB@Unable?5to?5read?5chk?5size?4?$AA@ DB 'Unable to read '
	DB	'chk size.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EPJINIOH@Decompressing?5actions?5failed?4?$AA@
CONST	SEGMENT
??_C@_0BO@EPJINIOH@Decompressing?5actions?5failed?4?$AA@ DB 'Decompressin'
	DB	'g actions failed.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BAHEENIG@Unable?5to?5read?5actions?5size?4?$AA@
CONST	SEGMENT
??_C@_0BN@BAHEENIG@Unable?5to?5read?5actions?5size?4?$AA@ DB 'Unable to r'
	DB	'ead actions size.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IOIDDIKA@Unable?5to?5read?5replay?5header?4?$AA@
CONST	SEGMENT
??_C@_0BO@IOIDDIKA@Unable?5to?5read?5replay?5header?4?$AA@ DB 'Unable to '
	DB	'read replay header.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JDKFCELP@No?5Replay?5resource?5ID?5found?4?$AA@
CONST	SEGMENT
??_C@_0BN@JDKFCELP@No?5Replay?5resource?5ID?5found?4?$AA@ DB 'No Replay r'
	DB	'esource ID found.', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _parseReplay
_TEXT	SEGMENT
$T173750 = -881						; size = 1
$T173751 = -869						; size = 1
$T173752 = -857						; size = 1
$T173753 = -845						; size = 1
$T173754 = -833						; size = 1
$T173755 = -821						; size = 1
$T173756 = -809						; size = 1
$T173757 = -797						; size = 1
_fw$159037 = -596					; size = 4
_log$159013 = -584					; size = 168
_actionsDbgFilepath$159011 = -408			; size = 260
_actions$159010 = -140					; size = 16
_pChkBuffer$ = -116					; size = 4
_dwChkBufferSize$ = -104				; size = 4
_repActions$ = -92					; size = 32
_dwActionBufferSize$ = -52				; size = 4
_dwRepResourceID$ = -40					; size = 4
_fr$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_params$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_parseReplay PROC					; COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 03 00
	00		 sub	 esp, 888		; 00000378H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 88 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-888]
  00012	b9 de 00 00 00	 mov	 ecx, 222		; 000000deH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 89   :   // Open replay file
; 90   :   FileReader fr;

  00028	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::FileReader

; 91   :   if ( !fr.Open(params.getReplayPath()) )

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00033	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  00038	50		 push	 eax
  00039	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  0003c	e8 00 00 00 00	 call	 ?Open@FileReader@ReplayTool@@QAE_NPBD@Z ; ReplayTool::FileReader::Open
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	75 1a		 jne	 SHORT $LN14@parseRepla

; 92   :     return false;

  00048	c6 85 8f fc ff
	ff 00		 mov	 BYTE PTR $T173750[ebp], 0
  0004f	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  00052	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  00057	8a 85 8f fc ff
	ff		 mov	 al, BYTE PTR $T173750[ebp]
  0005d	e9 6e 04 00 00	 jmp	 $LN15@parseRepla
$LN14@parseRepla:

; 93   : 
; 94   : ///////////////////// Header
; 95   :   // Read replay resource identifier
; 96   :   DWORD dwRepResourceID = 0;

  00062	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dwRepResourceID$[ebp], 0

; 97   :   // Best guess: "reRS" is "replay RESOURCE"
; 98   :   if ( !DecompressRead(&dwRepResourceID, sizeof(dwRepResourceID), fr) || dwRepResourceID != mmioFOURCC('r','e','R','S') )

  00069	8d 45 e4	 lea	 eax, DWORD PTR _fr$[ebp]
  0006c	50		 push	 eax
  0006d	6a 04		 push	 4
  0006f	8d 4d d8	 lea	 ecx, DWORD PTR _dwRepResourceID$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	0f b6 d0	 movzx	 edx, al
  0007e	85 d2		 test	 edx, edx
  00080	74 09		 je	 SHORT $LN12@parseRepla
  00082	81 7d d8 72 65
	52 53		 cmp	 DWORD PTR _dwRepResourceID$[ebp], 1397908850 ; 53526572H
  00089	74 26		 je	 SHORT $LN13@parseRepla
$LN12@parseRepla:

; 99   :     return errSimple("No Replay resource ID found.");

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JDKFCELP@No?5Replay?5resource?5ID?5found?4?$AA@
  00090	e8 00 00 00 00	 call	 ?errSimple@@YA_NPBD@Z	; errSimple
  00095	83 c4 04	 add	 esp, 4
  00098	88 85 9b fc ff
	ff		 mov	 BYTE PTR $T173751[ebp], al
  0009e	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  000a1	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  000a6	8a 85 9b fc ff
	ff		 mov	 al, BYTE PTR $T173751[ebp]
  000ac	e9 1f 04 00 00	 jmp	 $LN15@parseRepla
$LN13@parseRepla:

; 100  : 
; 101  :   // Read replay resource header
; 102  :   if ( !DecompressRead(&replayHeader, sizeof(replayHeader), fr) )

  000b1	8d 45 e4	 lea	 eax, DWORD PTR _fr$[ebp]
  000b4	50		 push	 eax
  000b5	68 79 02 00 00	 push	 633			; 00000279H
  000ba	68 00 00 00 00	 push	 OFFSET ?replayHeader@@3Ureplay_resource@ReplayTool@@A ; replayHeader
  000bf	e8 00 00 00 00	 call	 ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	0f b6 c8	 movzx	 ecx, al
  000ca	85 c9		 test	 ecx, ecx
  000cc	75 26		 jne	 SHORT $LN11@parseRepla

; 103  :     return errSimple("Unable to read replay header.");

  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IOIDDIKA@Unable?5to?5read?5replay?5header?4?$AA@
  000d3	e8 00 00 00 00	 call	 ?errSimple@@YA_NPBD@Z	; errSimple
  000d8	83 c4 04	 add	 esp, 4
  000db	88 85 a7 fc ff
	ff		 mov	 BYTE PTR $T173752[ebp], al
  000e1	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  000e4	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  000e9	8a 85 a7 fc ff
	ff		 mov	 al, BYTE PTR $T173752[ebp]
  000ef	e9 dc 03 00 00	 jmp	 $LN15@parseRepla
$LN11@parseRepla:

; 104  : 
; 105  : ////////////////// Actions
; 106  :   // Read replay actions section size
; 107  :   DWORD dwActionBufferSize = 0;

  000f4	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _dwActionBufferSize$[ebp], 0

; 108  :   if ( !DecompressRead(&dwActionBufferSize, 4, fr) )

  000fb	8d 45 e4	 lea	 eax, DWORD PTR _fr$[ebp]
  000fe	50		 push	 eax
  000ff	6a 04		 push	 4
  00101	8d 4d cc	 lea	 ecx, DWORD PTR _dwActionBufferSize$[ebp]
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	0f b6 d0	 movzx	 edx, al
  00110	85 d2		 test	 edx, edx
  00112	75 26		 jne	 SHORT $LN10@parseRepla

; 109  :     return errSimple("Unable to read actions size.");

  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BAHEENIG@Unable?5to?5read?5actions?5size?4?$AA@
  00119	e8 00 00 00 00	 call	 ?errSimple@@YA_NPBD@Z	; errSimple
  0011e	83 c4 04	 add	 esp, 4
  00121	88 85 b3 fc ff
	ff		 mov	 BYTE PTR $T173753[ebp], al
  00127	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  0012a	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  0012f	8a 85 b3 fc ff
	ff		 mov	 al, BYTE PTR $T173753[ebp]
  00135	e9 96 03 00 00	 jmp	 $LN15@parseRepla
$LN10@parseRepla:

; 110  : 
; 111  :   // Allocate and Read replay actions
; 112  :   ReplayReader repActions(dwActionBufferSize);

  0013a	8b 45 cc	 mov	 eax, DWORD PTR _dwActionBufferSize$[ebp]
  0013d	50		 push	 eax
  0013e	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  00141	e8 00 00 00 00	 call	 ??0ReplayReader@ReplayTool@@QAE@K@Z ; ReplayTool::ReplayReader::ReplayReader

; 113  :   if ( dwActionBufferSize && (!repActions || !DecompressRead(repActions, dwActionBufferSize, fr)) )

  00146	83 7d cc 00	 cmp	 DWORD PTR _dwActionBufferSize$[ebp], 0
  0014a	74 5a		 je	 SHORT $LN9@parseRepla
  0014c	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  0014f	e8 00 00 00 00	 call	 ??BReplayReader@ReplayTool@@QBEPAXXZ ; ReplayTool::ReplayReader::operator void *
  00154	85 c0		 test	 eax, eax
  00156	74 20		 je	 SHORT $LN8@parseRepla
  00158	8d 45 e4	 lea	 eax, DWORD PTR _fr$[ebp]
  0015b	50		 push	 eax
  0015c	8b 4d cc	 mov	 ecx, DWORD PTR _dwActionBufferSize$[ebp]
  0015f	51		 push	 ecx
  00160	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  00163	e8 00 00 00 00	 call	 ??BReplayReader@ReplayTool@@QBEPAXXZ ; ReplayTool::ReplayReader::operator void *
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00171	0f b6 d0	 movzx	 edx, al
  00174	85 d2		 test	 edx, edx
  00176	75 2e		 jne	 SHORT $LN9@parseRepla
$LN8@parseRepla:

; 114  :     return errSimple("Decompressing actions failed.");

  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EPJINIOH@Decompressing?5actions?5failed?4?$AA@
  0017d	e8 00 00 00 00	 call	 ?errSimple@@YA_NPBD@Z	; errSimple
  00182	83 c4 04	 add	 esp, 4
  00185	88 85 bf fc ff
	ff		 mov	 BYTE PTR $T173754[ebp], al
  0018b	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  0018e	e8 00 00 00 00	 call	 ??1ReplayReader@ReplayTool@@UAE@XZ ; ReplayTool::ReplayReader::~ReplayReader
  00193	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  00196	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  0019b	8a 85 bf fc ff
	ff		 mov	 al, BYTE PTR $T173754[ebp]
  001a1	e9 2a 03 00 00	 jmp	 $LN15@parseRepla
$LN9@parseRepla:

; 115  : 
; 116  : /////////////////// Map Chk
; 117  :   // get map chunk data size
; 118  :   DWORD dwChkBufferSize = 0;

  001a6	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwChkBufferSize$[ebp], 0

; 119  :   if ( !DecompressRead(&dwChkBufferSize, 4, fr) )

  001ad	8d 45 e4	 lea	 eax, DWORD PTR _fr$[ebp]
  001b0	50		 push	 eax
  001b1	6a 04		 push	 4
  001b3	8d 4d 98	 lea	 ecx, DWORD PTR _dwChkBufferSize$[ebp]
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bf	0f b6 d0	 movzx	 edx, al
  001c2	85 d2		 test	 edx, edx
  001c4	75 2e		 jne	 SHORT $LN7@parseRepla

; 120  :     return errSimple("Unable to read chk size.");

  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OIDIHHCB@Unable?5to?5read?5chk?5size?4?$AA@
  001cb	e8 00 00 00 00	 call	 ?errSimple@@YA_NPBD@Z	; errSimple
  001d0	83 c4 04	 add	 esp, 4
  001d3	88 85 cb fc ff
	ff		 mov	 BYTE PTR $T173755[ebp], al
  001d9	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  001dc	e8 00 00 00 00	 call	 ??1ReplayReader@ReplayTool@@UAE@XZ ; ReplayTool::ReplayReader::~ReplayReader
  001e1	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  001e4	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  001e9	8a 85 cb fc ff
	ff		 mov	 al, BYTE PTR $T173755[ebp]
  001ef	e9 dc 02 00 00	 jmp	 $LN15@parseRepla
$LN7@parseRepla:

; 121  : 
; 122  :   // Allocate and Read chk data
; 123  :   void *pChkBuffer = malloc(dwChkBufferSize);

  001f4	8b f4		 mov	 esi, esp
  001f6	8b 45 98	 mov	 eax, DWORD PTR _dwChkBufferSize$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00200	83 c4 04	 add	 esp, 4
  00203	3b f4		 cmp	 esi, esp
  00205	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020a	89 45 8c	 mov	 DWORD PTR _pChkBuffer$[ebp], eax

; 124  :   //FileReader frChk(pChkBuffer, dwChkBufferSize);
; 125  :   if ( dwChkBufferSize && !DecompressRead(pChkBuffer, dwChkBufferSize, fr) )

  0020d	83 7d 98 00	 cmp	 DWORD PTR _dwChkBufferSize$[ebp], 0
  00211	74 49		 je	 SHORT $LN6@parseRepla
  00213	8d 45 e4	 lea	 eax, DWORD PTR _fr$[ebp]
  00216	50		 push	 eax
  00217	8b 4d 98	 mov	 ecx, DWORD PTR _dwChkBufferSize$[ebp]
  0021a	51		 push	 ecx
  0021b	8b 55 8c	 mov	 edx, DWORD PTR _pChkBuffer$[ebp]
  0021e	52		 push	 edx
  0021f	e8 00 00 00 00	 call	 ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
  00224	83 c4 0c	 add	 esp, 12			; 0000000cH
  00227	0f b6 c0	 movzx	 eax, al
  0022a	85 c0		 test	 eax, eax
  0022c	75 2e		 jne	 SHORT $LN6@parseRepla

; 126  :     return errSimple("Decompressing map failed.");

  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@IEBEPEGN@Decompressing?5map?5failed?4?$AA@
  00233	e8 00 00 00 00	 call	 ?errSimple@@YA_NPBD@Z	; errSimple
  00238	83 c4 04	 add	 esp, 4
  0023b	88 85 d7 fc ff
	ff		 mov	 BYTE PTR $T173756[ebp], al
  00241	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  00244	e8 00 00 00 00	 call	 ??1ReplayReader@ReplayTool@@UAE@XZ ; ReplayTool::ReplayReader::~ReplayReader
  00249	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  0024c	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  00251	8a 85 d7 fc ff
	ff		 mov	 al, BYTE PTR $T173756[ebp]
  00257	e9 74 02 00 00	 jmp	 $LN15@parseRepla
$LN6@parseRepla:

; 127  : 
; 128  :   // Write extracted replay data
; 129  :   if ( dwFlags & RFLAG_EXTRACT )

  0025c	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0025f	83 e0 01	 and	 eax, 1
  00262	74 61		 je	 SHORT $LN5@parseRepla

; 130  :   {
; 131  :     writeBuffer("%s.hdr", params.getReplayPath(), &replayHeader, sizeof(replayHeader));

  00264	68 79 02 00 00	 push	 633			; 00000279H
  00269	68 00 00 00 00	 push	 OFFSET ?replayHeader@@3Ureplay_resource@ReplayTool@@A ; replayHeader
  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00271	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  00276	50		 push	 eax
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_06KABEHPNE@?$CFs?4hdr?$AA@
  0027c	e8 00 00 00 00	 call	 ?writeBuffer@@YAXPBD0PAXK@Z ; writeBuffer
  00281	83 c4 10	 add	 esp, 16			; 00000010H

; 132  :     writeBuffer("%s.act", params.getReplayPath(), repActions, dwActionBufferSize);

  00284	8b 45 cc	 mov	 eax, DWORD PTR _dwActionBufferSize$[ebp]
  00287	50		 push	 eax
  00288	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  0028b	e8 00 00 00 00	 call	 ??BReplayReader@ReplayTool@@QBEPAXXZ ; ReplayTool::ReplayReader::operator void *
  00290	50		 push	 eax
  00291	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00294	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  00299	50		 push	 eax
  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_06IOAJIBFN@?$CFs?4act?$AA@
  0029f	e8 00 00 00 00	 call	 ?writeBuffer@@YAXPBD0PAXK@Z ; writeBuffer
  002a4	83 c4 10	 add	 esp, 16			; 00000010H

; 133  :     writeBuffer("%s.chk", params.getReplayPath(), pChkBuffer, dwChkBufferSize);

  002a7	8b 45 98	 mov	 eax, DWORD PTR _dwChkBufferSize$[ebp]
  002aa	50		 push	 eax
  002ab	8b 4d 8c	 mov	 ecx, DWORD PTR _pChkBuffer$[ebp]
  002ae	51		 push	 ecx
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  002b2	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  002b7	50		 push	 eax
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_06OFAPKIKJ@?$CFs?4chk?$AA@
  002bd	e8 00 00 00 00	 call	 ?writeBuffer@@YAXPBD0PAXK@Z ; writeBuffer
  002c2	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@parseRepla:

; 134  :   }
; 135  : 
; 136  :   // parse data for repair
; 137  :   if ( dwFlags & RFLAG_REPAIR )

  002c5	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  002c8	83 e0 02	 and	 eax, 2
  002cb	0f 84 e2 01 00
	00		 je	 $LN4@parseRepla

; 138  :   {
; 139  :     list<ReplayTool::GameAction*> actions;

  002d1	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _actions$159010[ebp]
  002d7	e8 00 00 00 00	 call	 ??0?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >

; 140  :     char actionsDbgFilepath[MAX_PATH];
; 141  : 
; 142  :     getActionsTraceFilepath(params, actionsDbgFilepath);

  002dc	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _actionsDbgFilepath$159011[ebp]
  002e2	50		 push	 eax
  002e3	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  002e6	51		 push	 ecx
  002e7	e8 00 00 00 00	 call	 ?getActionsTraceFilepath@@YAXABVParseReplayParams@ReplayTool@@QAD@Z ; getActionsTraceFilepath
  002ec	83 c4 08	 add	 esp, 8

; 143  : 
; 144  :     // Parse replay actions
; 145  :     parseActions(repActions, actions);

  002ef	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _actions$159010[ebp]
  002f5	50		 push	 eax
  002f6	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  002f9	51		 push	 ecx
  002fa	e8 00 00 00 00	 call	 _parseActions
  002ff	83 c4 08	 add	 esp, 8

; 146  :     logActions(actions, actionsDbgFilepath);

  00302	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _actionsDbgFilepath$159011[ebp]
  00308	50		 push	 eax
  00309	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _actions$159010[ebp]
  0030f	51		 push	 ecx
  00310	e8 00 00 00 00	 call	 _logActions
  00315	83 c4 08	 add	 esp, 8

; 147  : 
; 148  :     if ( replayHeader.dwFrameCount < repActions.highestFrameTick() )

  00318	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  0031b	e8 00 00 00 00	 call	 ?highestFrameTick@ReplayReader@ReplayTool@@UBEKXZ ; ReplayTool::ReplayReader::highestFrameTick
  00320	39 05 01 00 00
	00		 cmp	 DWORD PTR ?replayHeader@@3Ureplay_resource@ReplayTool@@A+1, eax
  00326	0f 83 7c 01 00
	00		 jae	 $LN3@parseRepla

; 149  :     {
; 150  :       std::ofstream log("Results.txt", std::ios_base::app);

  0032c	6a 01		 push	 1
  0032e	6a 40		 push	 64			; 00000040H
  00330	6a 08		 push	 8
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0M@ELGLGCGP@Results?4txt?$AA@
  00337	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _log$159013[ebp]
  0033d	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >

; 151  :       log << params.getReplayPath() << " -- Fixed replay with " << replayHeader.dwFrameCount << " frames. Desired: " << repActions.highestFrameTick() << " frames.\n";

  00342	68 00 00 00 00	 push	 OFFSET ??_C@_09OLOLNFGA@?5frames?4?6?$AA@
  00347	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  0034a	e8 00 00 00 00	 call	 ?highestFrameTick@ReplayReader@ReplayTool@@UBEKXZ ; ReplayTool::ReplayReader::highestFrameTick
  0034f	8b f4		 mov	 esi, esp
  00351	50		 push	 eax
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KJNJLLBA@?5frames?4?5Desired?3?5?$AA@
  00357	8b fc		 mov	 edi, esp
  00359	a1 01 00 00 00	 mov	 eax, DWORD PTR ?replayHeader@@3Ureplay_resource@ReplayTool@@A+1
  0035e	50		 push	 eax
  0035f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GIODCKM@?5?9?9?5Fixed?5replay?5with?5?$AA@
  00364	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  00367	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  0036c	50		 push	 eax
  0036d	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _log$159013[ebp]
  00373	51		 push	 ecx
  00374	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00379	83 c4 08	 add	 esp, 8
  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00382	83 c4 08	 add	 esp, 8
  00385	8b c8		 mov	 ecx, eax
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0038d	3b fc		 cmp	 edi, esp
  0038f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00394	50		 push	 eax
  00395	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0039a	83 c4 08	 add	 esp, 8
  0039d	8b c8		 mov	 ecx, eax
  0039f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  003a5	3b f4		 cmp	 esi, esp
  003a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003b2	83 c4 08	 add	 esp, 8

; 152  : 
; 153  :       replayHeader.dwFrameCount = repActions.highestFrameTick() + 100;

  003b5	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  003b8	e8 00 00 00 00	 call	 ?highestFrameTick@ReplayReader@ReplayTool@@UBEKXZ ; ReplayTool::ReplayReader::highestFrameTick
  003bd	83 c0 64	 add	 eax, 100		; 00000064H
  003c0	a3 01 00 00 00	 mov	 DWORD PTR ?replayHeader@@3Ureplay_resource@ReplayTool@@A+1, eax

; 154  : 
; 155  :       // Repair/reconstruct the replay
; 156  :       FileWriter fw;

  003c5	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR _fw$159037[ebp]
  003cb	e8 00 00 00 00	 call	 ??0FileWriter@ReplayTool@@QAE@XZ ; ReplayTool::FileWriter::FileWriter

; 157  :       fw.Open(params.getReplayPath());

  003d0	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  003d3	e8 00 00 00 00	 call	 ?getReplayPath@ParseReplayParams@ReplayTool@@QBEPBDXZ ; ReplayTool::ParseReplayParams::getReplayPath
  003d8	50		 push	 eax
  003d9	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR _fw$159037[ebp]
  003df	e8 00 00 00 00	 call	 ?Open@FileWriter@ReplayTool@@QAE_NPBD@Z ; ReplayTool::FileWriter::Open

; 158  : 
; 159  :       // write rep resource id
; 160  :       dwRepResourceID = mmioFOURCC('r','e','R','S');

  003e4	c7 45 d8 72 65
	52 53		 mov	 DWORD PTR _dwRepResourceID$[ebp], 1397908850 ; 53526572H

; 161  :       CompressWrite(&dwRepResourceID, sizeof(dwRepResourceID), fw);

  003eb	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _fw$159037[ebp]
  003f1	50		 push	 eax
  003f2	6a 04		 push	 4
  003f4	8d 4d d8	 lea	 ecx, DWORD PTR _dwRepResourceID$[ebp]
  003f7	51		 push	 ecx
  003f8	e8 00 00 00 00	 call	 ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
  003fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 162  : 
; 163  :       // write header
; 164  :       CompressWrite(&replayHeader, sizeof(replayHeader), fw);

  00400	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _fw$159037[ebp]
  00406	50		 push	 eax
  00407	68 79 02 00 00	 push	 633			; 00000279H
  0040c	68 00 00 00 00	 push	 OFFSET ?replayHeader@@3Ureplay_resource@ReplayTool@@A ; replayHeader
  00411	e8 00 00 00 00	 call	 ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
  00416	83 c4 0c	 add	 esp, 12			; 0000000cH

; 165  : 
; 166  :       // write actions
; 167  :       CompressWrite(&dwActionBufferSize, sizeof(dwActionBufferSize), fw);

  00419	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _fw$159037[ebp]
  0041f	50		 push	 eax
  00420	6a 04		 push	 4
  00422	8d 4d cc	 lea	 ecx, DWORD PTR _dwActionBufferSize$[ebp]
  00425	51		 push	 ecx
  00426	e8 00 00 00 00	 call	 ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
  0042b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 168  :       if ( dwActionBufferSize )

  0042e	83 7d cc 00	 cmp	 DWORD PTR _dwActionBufferSize$[ebp], 0
  00432	74 21		 je	 SHORT $LN2@parseRepla

; 169  :         CompressWrite(repActions, repActions.size(), fw);

  00434	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _fw$159037[ebp]
  0043a	50		 push	 eax
  0043b	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  0043e	e8 00 00 00 00	 call	 ?size@ReplayReader@ReplayTool@@QBEIXZ ; ReplayTool::ReplayReader::size
  00443	50		 push	 eax
  00444	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  00447	e8 00 00 00 00	 call	 ??BReplayReader@ReplayTool@@QBEPAXXZ ; ReplayTool::ReplayReader::operator void *
  0044c	50		 push	 eax
  0044d	e8 00 00 00 00	 call	 ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
  00452	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@parseRepla:

; 170  :     
; 171  :       // write chk
; 172  :       CompressWrite(&dwChkBufferSize, sizeof(dwChkBufferSize), fw);

  00455	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _fw$159037[ebp]
  0045b	50		 push	 eax
  0045c	6a 04		 push	 4
  0045e	8d 4d 98	 lea	 ecx, DWORD PTR _dwChkBufferSize$[ebp]
  00461	51		 push	 ecx
  00462	e8 00 00 00 00	 call	 ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
  00467	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  :       if ( dwChkBufferSize )

  0046a	83 7d 98 00	 cmp	 DWORD PTR _dwChkBufferSize$[ebp], 0
  0046e	74 17		 je	 SHORT $LN1@parseRepla

; 174  :         CompressWrite(pChkBuffer, dwChkBufferSize, fw);

  00470	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _fw$159037[ebp]
  00476	50		 push	 eax
  00477	8b 4d 98	 mov	 ecx, DWORD PTR _dwChkBufferSize$[ebp]
  0047a	51		 push	 ecx
  0047b	8b 55 8c	 mov	 edx, DWORD PTR _pChkBuffer$[ebp]
  0047e	52		 push	 edx
  0047f	e8 00 00 00 00	 call	 ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
  00484	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@parseRepla:

; 175  : 
; 176  :       log.close();

  00487	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _log$159013[ebp]
  0048d	e8 00 00 00 00	 call	 ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close

; 177  :     } // if replay is damaged

  00492	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR _fw$159037[ebp]
  00498	e8 00 00 00 00	 call	 ??1FileWriter@ReplayTool@@QAE@XZ ; ReplayTool::FileWriter::~FileWriter
  0049d	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _log$159013[ebp]
  004a3	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN3@parseRepla:

; 178  :   }

  004a8	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _actions$159010[ebp]
  004ae	e8 00 00 00 00	 call	 ??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
$LN4@parseRepla:

; 179  : 
; 180  :   return true;

  004b3	c6 85 e3 fc ff
	ff 01		 mov	 BYTE PTR $T173757[ebp], 1
  004ba	8d 4d a4	 lea	 ecx, DWORD PTR _repActions$[ebp]
  004bd	e8 00 00 00 00	 call	 ??1ReplayReader@ReplayTool@@UAE@XZ ; ReplayTool::ReplayReader::~ReplayReader
  004c2	8d 4d e4	 lea	 ecx, DWORD PTR _fr$[ebp]
  004c5	e8 00 00 00 00	 call	 ??1FileReader@ReplayTool@@QAE@XZ ; ReplayTool::FileReader::~FileReader
  004ca	8a 85 e3 fc ff
	ff		 mov	 al, BYTE PTR $T173757[ebp]
$LN15@parseRepla:

; 181  : }

  004d0	52		 push	 edx
  004d1	8b cd		 mov	 ecx, ebp
  004d3	50		 push	 eax
  004d4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN27@parseRepla
  004da	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004df	58		 pop	 eax
  004e0	5a		 pop	 edx
  004e1	5f		 pop	 edi
  004e2	5e		 pop	 esi
  004e3	5b		 pop	 ebx
  004e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e7	33 cd		 xor	 ecx, ebp
  004e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ee	81 c4 78 03 00
	00		 add	 esp, 888		; 00000378H
  004f4	3b ec		 cmp	 ebp, esp
  004f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004fb	8b e5		 mov	 esp, ebp
  004fd	5d		 pop	 ebp
  004fe	c3		 ret	 0
  004ff	90		 npad	 1
$LN27@parseRepla:
  00500	09 00 00 00	 DD	 9
  00504	00 00 00 00	 DD	 $LN26@parseRepla
$LN26@parseRepla:
  00508	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0050c	14 00 00 00	 DD	 20			; 00000014H
  00510	00 00 00 00	 DD	 $LN17@parseRepla
  00514	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00518	04 00 00 00	 DD	 4
  0051c	00 00 00 00	 DD	 $LN18@parseRepla
  00520	cc ff ff ff	 DD	 -52			; ffffffccH
  00524	04 00 00 00	 DD	 4
  00528	00 00 00 00	 DD	 $LN19@parseRepla
  0052c	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00530	20 00 00 00	 DD	 32			; 00000020H
  00534	00 00 00 00	 DD	 $LN20@parseRepla
  00538	98 ff ff ff	 DD	 -104			; ffffff98H
  0053c	04 00 00 00	 DD	 4
  00540	00 00 00 00	 DD	 $LN21@parseRepla
  00544	74 ff ff ff	 DD	 -140			; ffffff74H
  00548	10 00 00 00	 DD	 16			; 00000010H
  0054c	00 00 00 00	 DD	 $LN22@parseRepla
  00550	68 fe ff ff	 DD	 -408			; fffffe68H
  00554	04 01 00 00	 DD	 260			; 00000104H
  00558	00 00 00 00	 DD	 $LN23@parseRepla
  0055c	b8 fd ff ff	 DD	 -584			; fffffdb8H
  00560	a8 00 00 00	 DD	 168			; 000000a8H
  00564	00 00 00 00	 DD	 $LN24@parseRepla
  00568	ac fd ff ff	 DD	 -596			; fffffdacH
  0056c	04 00 00 00	 DD	 4
  00570	00 00 00 00	 DD	 $LN25@parseRepla
$LN25@parseRepla:
  00574	66		 DB	 102			; 00000066H
  00575	77		 DB	 119			; 00000077H
  00576	00		 DB	 0
$LN24@parseRepla:
  00577	6c		 DB	 108			; 0000006cH
  00578	6f		 DB	 111			; 0000006fH
  00579	67		 DB	 103			; 00000067H
  0057a	00		 DB	 0
$LN23@parseRepla:
  0057b	61		 DB	 97			; 00000061H
  0057c	63		 DB	 99			; 00000063H
  0057d	74		 DB	 116			; 00000074H
  0057e	69		 DB	 105			; 00000069H
  0057f	6f		 DB	 111			; 0000006fH
  00580	6e		 DB	 110			; 0000006eH
  00581	73		 DB	 115			; 00000073H
  00582	44		 DB	 68			; 00000044H
  00583	62		 DB	 98			; 00000062H
  00584	67		 DB	 103			; 00000067H
  00585	46		 DB	 70			; 00000046H
  00586	69		 DB	 105			; 00000069H
  00587	6c		 DB	 108			; 0000006cH
  00588	65		 DB	 101			; 00000065H
  00589	70		 DB	 112			; 00000070H
  0058a	61		 DB	 97			; 00000061H
  0058b	74		 DB	 116			; 00000074H
  0058c	68		 DB	 104			; 00000068H
  0058d	00		 DB	 0
$LN22@parseRepla:
  0058e	61		 DB	 97			; 00000061H
  0058f	63		 DB	 99			; 00000063H
  00590	74		 DB	 116			; 00000074H
  00591	69		 DB	 105			; 00000069H
  00592	6f		 DB	 111			; 0000006fH
  00593	6e		 DB	 110			; 0000006eH
  00594	73		 DB	 115			; 00000073H
  00595	00		 DB	 0
$LN21@parseRepla:
  00596	64		 DB	 100			; 00000064H
  00597	77		 DB	 119			; 00000077H
  00598	43		 DB	 67			; 00000043H
  00599	68		 DB	 104			; 00000068H
  0059a	6b		 DB	 107			; 0000006bH
  0059b	42		 DB	 66			; 00000042H
  0059c	75		 DB	 117			; 00000075H
  0059d	66		 DB	 102			; 00000066H
  0059e	66		 DB	 102			; 00000066H
  0059f	65		 DB	 101			; 00000065H
  005a0	72		 DB	 114			; 00000072H
  005a1	53		 DB	 83			; 00000053H
  005a2	69		 DB	 105			; 00000069H
  005a3	7a		 DB	 122			; 0000007aH
  005a4	65		 DB	 101			; 00000065H
  005a5	00		 DB	 0
$LN20@parseRepla:
  005a6	72		 DB	 114			; 00000072H
  005a7	65		 DB	 101			; 00000065H
  005a8	70		 DB	 112			; 00000070H
  005a9	41		 DB	 65			; 00000041H
  005aa	63		 DB	 99			; 00000063H
  005ab	74		 DB	 116			; 00000074H
  005ac	69		 DB	 105			; 00000069H
  005ad	6f		 DB	 111			; 0000006fH
  005ae	6e		 DB	 110			; 0000006eH
  005af	73		 DB	 115			; 00000073H
  005b0	00		 DB	 0
$LN19@parseRepla:
  005b1	64		 DB	 100			; 00000064H
  005b2	77		 DB	 119			; 00000077H
  005b3	41		 DB	 65			; 00000041H
  005b4	63		 DB	 99			; 00000063H
  005b5	74		 DB	 116			; 00000074H
  005b6	69		 DB	 105			; 00000069H
  005b7	6f		 DB	 111			; 0000006fH
  005b8	6e		 DB	 110			; 0000006eH
  005b9	42		 DB	 66			; 00000042H
  005ba	75		 DB	 117			; 00000075H
  005bb	66		 DB	 102			; 00000066H
  005bc	66		 DB	 102			; 00000066H
  005bd	65		 DB	 101			; 00000065H
  005be	72		 DB	 114			; 00000072H
  005bf	53		 DB	 83			; 00000053H
  005c0	69		 DB	 105			; 00000069H
  005c1	7a		 DB	 122			; 0000007aH
  005c2	65		 DB	 101			; 00000065H
  005c3	00		 DB	 0
$LN18@parseRepla:
  005c4	64		 DB	 100			; 00000064H
  005c5	77		 DB	 119			; 00000077H
  005c6	52		 DB	 82			; 00000052H
  005c7	65		 DB	 101			; 00000065H
  005c8	70		 DB	 112			; 00000070H
  005c9	52		 DB	 82			; 00000052H
  005ca	65		 DB	 101			; 00000065H
  005cb	73		 DB	 115			; 00000073H
  005cc	6f		 DB	 111			; 0000006fH
  005cd	75		 DB	 117			; 00000075H
  005ce	72		 DB	 114			; 00000072H
  005cf	63		 DB	 99			; 00000063H
  005d0	65		 DB	 101			; 00000065H
  005d1	49		 DB	 73			; 00000049H
  005d2	44		 DB	 68			; 00000044H
  005d3	00		 DB	 0
$LN17@parseRepla:
  005d4	66		 DB	 102			; 00000066H
  005d5	72		 DB	 114			; 00000072H
  005d6	00		 DB	 0
_parseReplay ENDP
_TEXT	ENDS
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	060H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	060H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T173771 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 940  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T173771[ebp], 0
  0004c	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 34		 je	 SHORT $LN2@basic_ofst
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 60	 add	 ecx, 96			; 00000060H
  00061	8b f4		 mov	 esi, esp
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00077	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T173771[ebp]
  0007d	83 c8 01	 or	 eax, 1
  00080	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T173771[ebp], eax
$LN2@basic_ofst:
  00086	8b f4		 mov	 esi, esp
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 c0 04	 add	 eax, 4
  00092	50		 push	 eax
  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000aa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  000bc	6a 00		 push	 0
  000be	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	83 c1 04	 add	 ecx, 4
  000c4	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000c9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 941  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)

  000cd	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000d4	83 c9 02	 or	 ecx, 2
  000d7	51		 push	 ecx
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000db	52		 push	 edx
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	83 c1 04	 add	 ecx, 4
  000e2	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000e7	85 c0		 test	 eax, eax
  000e9	75 20		 jne	 SHORT $LN3@basic_ofst

; 942  : 			_Myios::setstate(ios_base::failbit);

  000eb	8b f4		 mov	 esi, esp
  000ed	6a 00		 push	 0
  000ef	6a 02		 push	 2
  000f1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000fc	8b ca		 mov	 ecx, edx
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00104	3b f4		 cmp	 esi, esp
  00106	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@basic_ofst:

; 943  : 		}

  0010b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00112	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00129	3b ec		 cmp	 ebp, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T173771[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN6@basic_ofst
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T173771[ebp], -2 ; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 60	 add	 ecx, 96			; 00000060H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN6@basic_ofst:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 08	 add	 ecx, 8
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 04	 add	 ecx, 4
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  0004c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00050	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00053	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1071 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 a0	 mov	 ecx, DWORD PTR [eax-96]
  00048	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 44 10 a0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-96], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1072 : 		}

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 e9 5c	 sub	 ecx, 92			; 0000005cH
  00063	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00068	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 e9 58	 sub	 ecx, 88			; 00000058H
  00075	8b f4		 mov	 esi, esp
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	8b f4		 mov	 esi, esp
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000e	3b f4		 cmp	 esi, esp
  00010	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001c	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 1109 : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1110 : 		if (_Filebuffer.close() == 0)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0002e	85 c0		 test	 eax, eax
  00030	75 20		 jne	 SHORT $LN2@close

; 1111 : 			_Myios::setstate(ios_base::failbit);

  00032	8b f4		 mov	 esi, esp
  00034	6a 00		 push	 0
  00036	6a 02		 push	 2
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00040	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00043	8b ca		 mov	 ecx, edx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@close:

; 1112 : 		}

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::close
_TEXT	ENDS
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 143  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 144  : 		if (_Myfile != 0)

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00059	74 08		 je	 SHORT $LN2@basic_file

; 145  : 			_Reset_back();	// revert from _Mychar buffer

  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 146  : 		if (_Closef)

  00063	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00066	0f b6 48 50	 movzx	 ecx, BYTE PTR [eax+80]
  0006a	85 c9		 test	 ecx, ecx
  0006c	74 08		 je	 SHORT $LN3@basic_file

; 147  : 			close();

  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN3@basic_file:

; 148  : 		}

  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	8b f4		 mov	 esi, esp
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
EXTRN	__imp___lock_file:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 308  : 		{	// lock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 309  : 		if (_Myfile)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  0002a	74 19		 je	 SHORT $LN2@Lock

; 310  : 			_CSTD _lock_file(_Myfile);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lock_file
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Lock:

; 311  : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
EXTRN	__imp___unlock_file:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 314  : 		{	// unlock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 315  : 		if (_Myfile)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  0002a	74 19		 je	 SHORT $LN2@Unlock

; 316  : 			_CSTD _unlock_file(_Myfile);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlock_file
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Unlock:

; 317  : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::~_String_iterator<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	__$ArrayPad$
EXTRN	__imp__fwrite:PROC
EXTRN	__imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
tv184 = -528						; size = 4
tv239 = -524						; size = 4
tv254 = -520						; size = 4
tv208 = -520						; size = 4
tv246 = -516						; size = 4
tv241 = -516						; size = 4
tv237 = -516						; size = 4
tv256 = -512						; size = 4
tv255 = -512						; size = 4
tv230 = -512						; size = 4
tv151 = -512						; size = 4
tv147 = -512						; size = 4
$T173810 = -504						; size = 4
$T173813 = -492						; size = 4
$T173814 = -480						; size = 12
$T173815 = -460						; size = 12
$T173816 = -440						; size = 12
$T173817 = -417						; size = 1
$T173818 = -408						; size = 12
$T173821 = -388						; size = 4
$T173822 = -376						; size = 4
$T173823 = -364						; size = 4
$T173824 = -352						; size = 4
$T173827 = -340						; size = 4
$T173832 = -328						; size = 4
__Count$160926 = -124					; size = 4
__Str$160914 = -112					; size = 32
__Dest$160913 = -72					; size = 4
__Src$160912 = -60					; size = 4
__Ch$160911 = -45					; size = 1
__STRING_INC$160910 = -36				; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 322  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd f0 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-528]
  00021	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T173832[ebp], 0

; 323  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0004f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00054	89 85 08 fe ff
	ff		 mov	 DWORD PTR $T173810[ebp], eax
  0005a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0005d	50		 push	 eax
  0005e	8d 8d 08 fe ff
	ff		 lea	 ecx, DWORD PTR $T173810[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0006a	83 c4 08	 add	 esp, 8
  0006d	0f b6 d0	 movzx	 edx, al
  00070	85 d2		 test	 edx, edx
  00072	74 13		 je	 SHORT $LN20@overflow

; 324  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00074	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  0007d	83 c4 04	 add	 esp, 4
  00080	e9 28 04 00 00	 jmp	 $LN21@overflow

; 325  : 		else if (_Mysb::pptr() != 0

  00085	eb 7f		 jmp	 SHORT $LN19@overflow
$LN20@overflow:

; 326  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00087	8b f4		 mov	 esi, esp
  00089	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	85 c0		 test	 eax, eax
  0009b	74 56		 je	 SHORT $LN18@overflow
  0009d	8b f4		 mov	 esi, esp
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b f0		 mov	 esi, eax
  000b1	8b fc		 mov	 edi, esp
  000b3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000bc	3b fc		 cmp	 edi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	3b f0		 cmp	 esi, eax
  000c5	73 2c		 jae	 SHORT $LN18@overflow

; 327  : 			{	// room in buffer, store it
; 328  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  000c7	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000d0	83 c4 04	 add	 esp, 4
  000d3	8a d8		 mov	 bl, al
  000d5	8b f4		 mov	 esi, esp
  000d7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	88 18		 mov	 BYTE PTR [eax], bl

; 329  : 			return (_Meta);

  000e9	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  000ec	e9 bc 03 00 00	 jmp	 $LN21@overflow
  000f1	eb 13		 jmp	 SHORT $LN19@overflow
$LN18@overflow:

; 330  : 			}
; 331  : 		else if (_Myfile == 0)

  000f3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  000fa	75 0a		 jne	 SHORT $LN19@overflow

; 332  : 			return (_Traits::eof());	// no open C stream, fail

  000fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00101	e9 a7 03 00 00	 jmp	 $LN21@overflow
$LN19@overflow:

; 333  : 		_Reset_back();	// revert from _Mychar buffer

  00106	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 334  : 		if (_Pcvt == 0)

  0010e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00115	75 4c		 jne	 SHORT $LN15@overflow

; 335  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 336  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

  00117	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0011d	51		 push	 ecx
  0011e	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00127	83 c4 04	 add	 esp, 4
  0012a	0f b6 c0	 movzx	 eax, al
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00133	83 c4 08	 add	 esp, 8
  00136	0f b6 c8	 movzx	 ecx, al
  00139	85 c9		 test	 ecx, ecx
  0013b	74 0b		 je	 SHORT $LN23@overflow
  0013d	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00140	89 95 00 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  00146	eb 0b		 jmp	 SHORT $LN24@overflow
$LN23@overflow:
  00148	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0014d	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
$LN24@overflow:
  00153	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR tv147[ebp]
  00159	e9 4f 03 00 00	 jmp	 $LN21@overflow

; 337  : 		else

  0015e	e9 4a 03 00 00	 jmp	 $LN21@overflow
$LN15@overflow:

; 338  : 			{	// put using codecvt facet
; 339  : 			const int _STRING_INC = 8;

  00163	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$160910[ebp], 8

; 340  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);

  0016a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00173	83 c4 04	 add	 esp, 4
  00176	88 45 d3	 mov	 BYTE PTR __Ch$160911[ebp], al

; 341  : 			const _Elem *_Src;
; 342  : 			char *_Dest;
; 343  : 
; 344  : 			string _Str(_STRING_INC, '\0');

  00179	6a 00		 push	 0
  0017b	6a 08		 push	 8
  0017d	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  00180	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00185	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN13@overflow:

; 345  : 			for (; ; )
; 346  : 				switch (_Pcvt->out(_State,
; 347  : 					&_Ch, &_Ch + 1, _Src,
; 348  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  0018c	8b f4		 mov	 esi, esp
  0018e	8d 45 b8	 lea	 eax, DWORD PTR __Dest$160913[ebp]
  00191	50		 push	 eax
  00192	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T173814[ebp]
  00198	51		 push	 ecx
  00199	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  0019c	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a1	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
  001a7	8b 95 00 fe ff
	ff		 mov	 edx, DWORD PTR tv151[ebp]
  001ad	89 95 fc fd ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
  001b3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001b7	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  001bd	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  001c2	8b f8		 mov	 edi, eax
  001c4	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  001c7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001cc	03 f8		 add	 edi, eax
  001ce	57		 push	 edi
  001cf	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR $T173815[ebp]
  001d5	50		 push	 eax
  001d6	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  001d9	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001de	89 85 f8 fd ff
	ff		 mov	 DWORD PTR tv254[ebp], eax
  001e4	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR tv254[ebp]
  001ea	89 8d f4 fd ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  001f0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001f4	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  001fa	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  001ff	50		 push	 eax
  00200	8d 55 c4	 lea	 edx, DWORD PTR __Src$160912[ebp]
  00203	52		 push	 edx
  00204	8d 45 d4	 lea	 eax, DWORD PTR __Ch$160911[ebp+1]
  00207	50		 push	 eax
  00208	8d 4d d3	 lea	 ecx, DWORD PTR __Ch$160911[ebp]
  0020b	51		 push	 ecx
  0020c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0020f	83 c2 4c	 add	 edx, 76			; 0000004cH
  00212	52		 push	 edx
  00213	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00216	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00226	89 85 14 fe ff
	ff		 mov	 DWORD PTR $T173813[ebp], eax
  0022c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00230	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T173815[ebp]
  00236	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0023b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0023f	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T173814[ebp]
  00245	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0024a	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR $T173813[ebp]
  00250	89 8d f0 fd ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  00256	83 bd f0 fd ff
	ff 00		 cmp	 DWORD PTR tv184[ebp], 0
  0025d	0f 8c 14 02 00
	00		 jl	 $LN1@overflow
  00263	83 bd f0 fd ff
	ff 01		 cmp	 DWORD PTR tv184[ebp], 1
  0026a	7e 12		 jle	 SHORT $LN9@overflow
  0026c	83 bd f0 fd ff
	ff 03		 cmp	 DWORD PTR tv184[ebp], 3
  00273	0f 84 aa 01 00
	00		 je	 $LN2@overflow
  00279	e9 f9 01 00 00	 jmp	 $LN1@overflow
$LN9@overflow:

; 349  : 				{	// test result of converting one element
; 350  : 				case codecvt_base::partial:
; 351  : 				case codecvt_base::ok:
; 352  : 					{	// converted something, try to put it out
; 353  : 					size_t _Count = _Dest - &*_Str.begin();

  0027e	8d 85 48 fe ff
	ff		 lea	 eax, DWORD PTR $T173816[ebp]
  00284	50		 push	 eax
  00285	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  00288	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0028d	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  00293	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  00299	89 8d fc fd ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  0029f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a3	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  002a9	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  002ae	8b 55 b8	 mov	 edx, DWORD PTR __Dest$160913[ebp]
  002b1	2b d0		 sub	 edx, eax
  002b3	89 55 84	 mov	 DWORD PTR __Count$160926[ebp], edx
  002b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ba	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T173816[ebp]
  002c0	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 354  : 					if (0 < _Count && _Count !=
; 355  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  002c5	83 7d 84 00	 cmp	 DWORD PTR __Count$160926[ebp], 0
  002c9	76 70		 jbe	 SHORT $LN25@overflow
  002cb	8b f4		 mov	 esi, esp
  002cd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002d0	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  002d3	51		 push	 ecx
  002d4	8b 55 84	 mov	 edx, DWORD PTR __Count$160926[ebp]
  002d7	52		 push	 edx
  002d8	6a 01		 push	 1
  002da	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T173818[ebp]
  002e0	50		 push	 eax
  002e1	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  002e4	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  002e9	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  002ef	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv256[ebp]
  002f5	89 8d fc fd ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  002fb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002ff	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR $T173832[ebp]
  00305	83 ca 01	 or	 edx, 1
  00308	89 95 b8 fe ff
	ff		 mov	 DWORD PTR $T173832[ebp], edx
  0030e	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  00314	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  00319	50		 push	 eax
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00320	83 c4 10	 add	 esp, 16			; 00000010H
  00323	3b f4		 cmp	 esi, esp
  00325	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032a	39 45 84	 cmp	 DWORD PTR __Count$160926[ebp], eax
  0032d	74 0c		 je	 SHORT $LN25@overflow
  0032f	c7 85 f8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv208[ebp], 1
  00339	eb 0a		 jmp	 SHORT $LN26@overflow
$LN25@overflow:
  0033b	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN26@overflow:
  00345	8a 85 f8 fd ff
	ff		 mov	 al, BYTE PTR tv208[ebp]
  0034b	88 85 5f fe ff
	ff		 mov	 BYTE PTR $T173817[ebp], al
  00351	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00358	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR $T173832[ebp]
  0035e	83 e1 01	 and	 ecx, 1
  00361	74 12		 je	 SHORT $LN35@overflow
  00363	83 a5 b8 fe ff
	ff fe		 and	 DWORD PTR $T173832[ebp], -2 ; fffffffeH
  0036a	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T173818[ebp]
  00370	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN35@overflow:
  00375	0f b6 95 5f fe
	ff ff		 movzx	 edx, BYTE PTR $T173817[ebp]
  0037c	85 d2		 test	 edx, edx
  0037e	74 25		 je	 SHORT $LN8@overflow

; 356  : 						return (_Traits::eof());	// write failed

  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 7c fe ff
	ff		 mov	 DWORD PTR $T173821[ebp], eax
  0038b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00392	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  00395	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0039a	8b 85 7c fe ff
	ff		 mov	 eax, DWORD PTR $T173821[ebp]
  003a0	e9 08 01 00 00	 jmp	 $LN21@overflow
$LN8@overflow:

; 357  : 
; 358  : 					_Wrotesome = true;	// write succeeded

  003a5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003a8	c6 40 49 01	 mov	 BYTE PTR [eax+73], 1

; 359  : 					if (_Src != &_Ch)

  003ac	8b 45 c4	 mov	 eax, DWORD PTR __Src$160912[ebp]
  003af	8d 4d d3	 lea	 ecx, DWORD PTR __Ch$160911[ebp]
  003b2	3b c1		 cmp	 eax, ecx
  003b4	74 23		 je	 SHORT $LN7@overflow

; 360  : 						return (_Meta);	// converted whole element

  003b6	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  003b9	89 85 88 fe ff
	ff		 mov	 DWORD PTR $T173822[ebp], eax
  003bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c6	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  003c9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003ce	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR $T173822[ebp]
  003d4	e9 d4 00 00 00	 jmp	 $LN21@overflow
$LN7@overflow:

; 361  : 
; 362  : 					if (0 < _Count)

  003d9	83 7d 84 00	 cmp	 DWORD PTR __Count$160926[ebp], 0
  003dd	76 02		 jbe	 SHORT $LN6@overflow
  003df	eb 40		 jmp	 SHORT $LN5@overflow
$LN6@overflow:

; 363  : 						;
; 364  : 					else if (_Str.size() < 4 * _STRING_INC)

  003e1	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  003e4	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  003e9	83 f8 20	 cmp	 eax, 32			; 00000020H
  003ec	73 0e		 jae	 SHORT $LN4@overflow

; 365  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  003ee	6a 00		 push	 0
  003f0	6a 08		 push	 8
  003f2	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  003f5	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 366  : 					else

  003fa	eb 25		 jmp	 SHORT $LN5@overflow
$LN4@overflow:

; 367  : 						return (_Traits::eof());	// conversion failed

  003fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00401	89 85 94 fe ff
	ff		 mov	 DWORD PTR $T173823[ebp], eax
  00407	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0040e	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  00411	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00416	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR $T173823[ebp]
  0041c	e9 8c 00 00 00	 jmp	 $LN21@overflow
$LN5@overflow:

; 368  : 					break;

  00421	eb 76		 jmp	 SHORT $LN10@overflow
$LN2@overflow:

; 369  : 					}
; 370  : 
; 371  : 				case codecvt_base::noconv:
; 372  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 373  : 						: _Traits::eof());	// no conversion, put as is

  00423	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00426	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00429	51		 push	 ecx
  0042a	0f b6 55 d3	 movzx	 edx, BYTE PTR __Ch$160911[ebp]
  0042e	52		 push	 edx
  0042f	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00434	83 c4 08	 add	 esp, 8
  00437	0f b6 c0	 movzx	 eax, al
  0043a	85 c0		 test	 eax, eax
  0043c	74 0b		 je	 SHORT $LN27@overflow
  0043e	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00441	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  00447	eb 0b		 jmp	 SHORT $LN28@overflow
$LN27@overflow:
  00449	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0044e	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
$LN28@overflow:
  00454	8b 95 00 fe ff
	ff		 mov	 edx, DWORD PTR tv230[ebp]
  0045a	89 95 a0 fe ff
	ff		 mov	 DWORD PTR $T173824[ebp], edx
  00460	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00467	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  0046a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0046f	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR $T173824[ebp]
  00475	eb 36		 jmp	 SHORT $LN21@overflow
$LN1@overflow:

; 374  : 
; 375  : 				default:
; 376  : 					return (_Traits::eof());	// conversion failed

  00477	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0047c	89 85 ac fe ff
	ff		 mov	 DWORD PTR $T173827[ebp], eax
  00482	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00489	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  0048c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00491	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR $T173827[ebp]
  00497	eb 14		 jmp	 SHORT $LN21@overflow
$LN10@overflow:

; 377  : 				}

  00499	e9 ee fc ff ff	 jmp	 $LN13@overflow

; 378  : 			}

  0049e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004a5	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  004a8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN21@overflow:

; 379  : 		}

  004ad	52		 push	 edx
  004ae	8b cd		 mov	 ecx, ebp
  004b0	50		 push	 eax
  004b1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN42@overflow
  004b7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004bc	58		 pop	 eax
  004bd	5a		 pop	 edx
  004be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004c8	59		 pop	 ecx
  004c9	5f		 pop	 edi
  004ca	5e		 pop	 esi
  004cb	5b		 pop	 ebx
  004cc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004cf	33 cd		 xor	 ecx, ebp
  004d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d6	81 c4 10 02 00
	00		 add	 esp, 528		; 00000210H
  004dc	3b ec		 cmp	 ebp, esp
  004de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004e3	8b e5		 mov	 esp, ebp
  004e5	5d		 pop	 ebp
  004e6	c2 04 00	 ret	 4
  004e9	8d 49 00	 npad	 3
$LN42@overflow:
  004ec	04 00 00 00	 DD	 4
  004f0	00 00 00 00	 DD	 $LN41@overflow
$LN41@overflow:
  004f4	d3 ff ff ff	 DD	 -45			; ffffffd3H
  004f8	01 00 00 00	 DD	 1
  004fc	00 00 00 00	 DD	 $LN36@overflow
  00500	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00504	04 00 00 00	 DD	 4
  00508	00 00 00 00	 DD	 $LN37@overflow
  0050c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00510	04 00 00 00	 DD	 4
  00514	00 00 00 00	 DD	 $LN38@overflow
  00518	90 ff ff ff	 DD	 -112			; ffffff90H
  0051c	20 00 00 00	 DD	 32			; 00000020H
  00520	00 00 00 00	 DD	 $LN39@overflow
$LN39@overflow:
  00524	5f		 DB	 95			; 0000005fH
  00525	53		 DB	 83			; 00000053H
  00526	74		 DB	 116			; 00000074H
  00527	72		 DB	 114			; 00000072H
  00528	00		 DB	 0
$LN38@overflow:
  00529	5f		 DB	 95			; 0000005fH
  0052a	44		 DB	 68			; 00000044H
  0052b	65		 DB	 101			; 00000065H
  0052c	73		 DB	 115			; 00000073H
  0052d	74		 DB	 116			; 00000074H
  0052e	00		 DB	 0
$LN37@overflow:
  0052f	5f		 DB	 95			; 0000005fH
  00530	53		 DB	 83			; 00000053H
  00531	72		 DB	 114			; 00000072H
  00532	63		 DB	 99			; 00000063H
  00533	00		 DB	 0
$LN36@overflow:
  00534	5f		 DB	 95			; 0000005fH
  00535	43		 DB	 67			; 00000043H
  00536	68		 DB	 104			; 00000068H
  00537	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR __Str$160914[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1:
  00008	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T173814[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2:
  00013	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T173815[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3:
  0001e	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T173816[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4:
  00029	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T173832[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	0f 84 12 00 00
	00		 je	 $LN34@overflow
  00038	83 a5 b8 fe ff
	ff fe		 and	 DWORD PTR $T173832[ebp], -2 ; fffffffeH
  0003f	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T173818[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN34@overflow:
  0004a	c3		 ret	 0
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a ec fd ff
	ff		 mov	 ecx, DWORD PTR [edx-532]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 541  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 542  : 		return ((_Elem)_Meta);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00021	8a 00		 mov	 al, BYTE PTR [eax]

; 543  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 553  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	33 c0		 xor	 eax, eax
  00028	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002a	0f 94 c0	 sete	 al

; 554  : 		}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 557  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 558  : 		return (_Meta != eof() ? _Meta : !eof());

  0001e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00026	39 01		 cmp	 DWORD PTR [ecx], eax
  00028	74 0d		 je	 SHORT $LN3@not_eof
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00035	eb 12		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  00037	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003c	f7 d8		 neg	 eax
  0003e	1b c0		 sbb	 eax, eax
  00040	83 c0 01	 add	 eax, 1
  00043	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
$LN4@not_eof:
  00049	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 559  : 		}

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 562  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 563  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 564  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
EXTRN	__imp__fputc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 80   : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 81   : 	return (fputc(_Byte, _File) != EOF);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	0f be 4d 08	 movsx	 ecx, BYTE PTR __Byte$[ebp]
  00028	51		 push	 ecx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  0002f	83 c4 08	 add	 esp, 8
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	33 d2		 xor	 edx, edx
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	0f 95 c2	 setne	 dl
  00041	8a c2		 mov	 al, dl

; 82   : 	}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 752  : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 753  : 		_Tidy(true);

  00049	6a 00		 push	 0
  0004b	6a 01		 push	 1
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 754  : 		}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1510 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1511 : 		return (this->_Mysize);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 1512 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T173873 = -248						; size = 4
$T173874 = -236						; size = 4
$T173875 = -224						; size = 4
$T173876 = -209						; size = 1
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 383  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 384  : 		if (_Mysb::gptr() != 0
; 385  : 			&& _Mysb::eback() < _Mysb::gptr()
; 386  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 387  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 388  : 				_Meta)))

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	0f 84 b9 00 00
	00		 je	 $LN10@pbackfail
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f0		 mov	 esi, eax
  00051	8b fc		 mov	 edi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005c	3b fc		 cmp	 edi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	3b f0		 cmp	 esi, eax
  00065	0f 83 8b 00 00
	00		 jae	 $LN10@pbackfail
  0006b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00070	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T173873[ebp], eax
  00076	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00079	50		 push	 eax
  0007a	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T173873[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00086	83 c4 08	 add	 esp, 8
  00089	0f b6 d0	 movzx	 edx, al
  0008c	85 d2		 test	 edx, edx
  0008e	75 3e		 jne	 SHORT $LN9@pbackfail
  00090	8b f4		 mov	 esi, esp
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	83 e8 01	 sub	 eax, 1
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000ab	83 c4 04	 add	 esp, 4
  000ae	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T173874[ebp], eax
  000b4	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000b7	50		 push	 eax
  000b8	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T173874[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000c4	83 c4 08	 add	 esp, 8
  000c7	0f b6 d0	 movzx	 edx, al
  000ca	85 d2		 test	 edx, edx
  000cc	74 28		 je	 SHORT $LN10@pbackfail
$LN9@pbackfail:

; 389  : 			{	// just back up position
; 390  : 			_Mysb::_Gndec();

  000ce	8b f4		 mov	 esi, esp
  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 391  : 			return (_Traits::not_eof(_Meta));

  000e0	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  000e9	83 c4 04	 add	 esp, 4
  000ec	e9 c3 00 00 00	 jmp	 $LN11@pbackfail
  000f1	e9 be 00 00 00	 jmp	 $LN11@pbackfail
$LN10@pbackfail:

; 392  : 			}
; 393  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  000f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  000fd	74 25		 je	 SHORT $LN6@pbackfail
  000ff	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00104	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T173875[ebp], eax
  0010a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T173875[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0011a	83 c4 08	 add	 esp, 8
  0011d	0f b6 d0	 movzx	 edx, al
  00120	85 d2		 test	 edx, edx
  00122	74 0f		 je	 SHORT $LN7@pbackfail
$LN6@pbackfail:

; 394  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  00124	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00129	e9 86 00 00 00	 jmp	 $LN11@pbackfail
  0012e	e9 81 00 00 00	 jmp	 $LN11@pbackfail
$LN7@pbackfail:

; 395  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  00133	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00136	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0013a	75 36		 jne	 SHORT $LN4@pbackfail
  0013c	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00145	83 c4 04	 add	 esp, 4
  00148	88 85 2f ff ff
	ff		 mov	 BYTE PTR $T173876[ebp], al
  0014e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00154	52		 push	 edx
  00155	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T173876[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  00161	83 c4 08	 add	 esp, 8
  00164	0f b6 c8	 movzx	 ecx, al
  00167	85 c9		 test	 ecx, ecx
  00169	74 07		 je	 SHORT $LN4@pbackfail

; 396  : 			return (_Meta);	// no facet and unget succeeded, return

  0016b	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0016e	eb 44		 jmp	 SHORT $LN11@pbackfail
  00170	eb 42		 jmp	 SHORT $LN11@pbackfail
$LN4@pbackfail:

; 397  : 		else if (_Mysb::gptr() != &_Mychar)

  00172	8b f4		 mov	 esi, esp
  00174	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0017d	3b f4		 cmp	 esi, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	83 c1 48	 add	 ecx, 72			; 00000048H
  0018a	3b c1		 cmp	 eax, ecx
  0018c	74 21		 je	 SHORT $LN2@pbackfail

; 398  : 			{	// putback to _Mychar
; 399  : 			_Mychar = _Traits::to_char_type(_Meta);

  0018e	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00197	83 c4 04	 add	 esp, 4
  0019a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	88 41 48	 mov	 BYTE PTR [ecx+72], al

; 400  : 			_Set_back();	// switch to _Mychar buffer

  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 401  : 			return (_Meta);

  001a8	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  001ab	eb 07		 jmp	 SHORT $LN11@pbackfail

; 402  : 			}
; 403  : 		else

  001ad	eb 05		 jmp	 SHORT $LN11@pbackfail
$LN2@pbackfail:

; 404  : 			return (_Traits::eof());	// nowhere to put back

  001af	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN11@pbackfail:

; 405  : 		}

  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	5b		 pop	 ebx
  001b7	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001bd	3b ec		 cmp	 ebp, esp
  001bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 546  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 547  : 		return ((unsigned char)_Ch);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00021	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 548  : 		}

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
EXTRN	__imp__ungetc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 104  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 105  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00027	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0002a	52		 push	 edx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00031	83 c4 08	 add	 esp, 8
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	33 c9		 xor	 ecx, ecx
  0003d	83 f8 ff	 cmp	 eax, -1
  00040	0f 95 c1	 setne	 cl
  00043	8a c1		 mov	 al, cl

; 106  : 	}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T173883 = -224						; size = 4
__Meta$ = -20						; size = 4
_this$ = -8						; size = 4
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 408  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 409  : 		int_type _Meta;
; 410  : 		if (_Mysb::gptr() != 0
; 411  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	74 49		 je	 SHORT $LN4@underflow
  00039	8b f4		 mov	 esi, esp
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b f0		 mov	 esi, eax
  0004d	8b fc		 mov	 edi, esp
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00058	3b fc		 cmp	 edi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	3b f0		 cmp	 esi, eax
  00061	73 1f		 jae	 SHORT $LN4@underflow

; 412  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00063	8b f4		 mov	 esi, esp
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006e	3b f4		 cmp	 esi, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0007b	83 c4 04	 add	 esp, 4
  0007e	eb 64		 jmp	 SHORT $LN5@underflow
  00080	eb 62		 jmp	 SHORT $LN5@underflow
$LN4@underflow:

; 413  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00082	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 10		 mov	 edx, DWORD PTR [eax]
  00087	8b f4		 mov	 esi, esp
  00089	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0008f	ff d0		 call	 eax
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	89 45 ec	 mov	 DWORD PTR __Meta$[ebp], eax
  0009b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000a0	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T173883[ebp], eax
  000a6	8d 4d ec	 lea	 ecx, DWORD PTR __Meta$[ebp]
  000a9	51		 push	 ecx
  000aa	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T173883[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000b6	83 c4 08	 add	 esp, 8
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	74 07		 je	 SHORT $LN2@underflow

; 414  : 			return (_Meta);	// uflow failed, return EOF

  000c0	8b 45 ec	 mov	 eax, DWORD PTR __Meta$[ebp]
  000c3	eb 1f		 jmp	 SHORT $LN5@underflow

; 415  : 		else

  000c5	eb 1d		 jmp	 SHORT $LN5@underflow
$LN2@underflow:

; 416  : 			{	// get a char, don't point past it
; 417  : 			pbackfail(_Meta);

  000c7	8b f4		 mov	 esi, esp
  000c9	8b 45 ec	 mov	 eax, DWORD PTR __Meta$[ebp]
  000cc	50		 push	 eax
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d8	ff d0		 call	 eax
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 418  : 			return (_Meta);

  000e1	8b 45 ec	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN5@underflow:

; 419  : 			}
; 420  : 		}

  000e4	52		 push	 edx
  000e5	8b cd		 mov	 ecx, ebp
  000e7	50		 push	 eax
  000e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@underflow
  000ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f3	58		 pop	 eax
  000f4	5a		 pop	 edx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000fe	3b ec		 cmp	 ebp, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
  00109	8d 49 00	 npad	 3
$LN9@underflow:
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN8@underflow
$LN8@underflow:
  00114	ec ff ff ff	 DD	 -20			; ffffffecH
  00118	04 00 00 00	 DD	 4
  0011c	00 00 00 00	 DD	 $LN7@underflow
$LN7@underflow:
  00120	5f		 DB	 95			; 0000005fH
  00121	4d		 DB	 77			; 0000004dH
  00122	65		 DB	 101			; 00000065H
  00123	74		 DB	 116			; 00000074H
  00124	61		 DB	 97			; 00000061H
  00125	00		 DB	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	__$ArrayPad$
EXTRN	__imp__memcpy_s:PROC
EXTRN	__imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp__fgetc:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv180 = -512						; size = 4
tv238 = -508						; size = 4
tv248 = -504						; size = 4
tv245 = -500						; size = 4
tv243 = -500						; size = 4
tv240 = -500						; size = 4
tv236 = -500						; size = 4
tv251 = -496						; size = 4
tv250 = -496						; size = 4
tv249 = -496						; size = 4
tv141 = -496						; size = 4
tv139 = -496						; size = 4
$T173892 = -488						; size = 4
$T173893 = -476						; size = 4
$T173894 = -464						; size = 12
$T173895 = -444						; size = 12
$T173896 = -424						; size = 12
$T173897 = -404						; size = 4
$T173898 = -392						; size = 12
$T173899 = -372						; size = 12
$T173900 = -352						; size = 4
$T173901 = -340						; size = 4
__Meta$160983 = -136					; size = 4
__Nleft$160982 = -124					; size = 4
__Src$160981 = -112					; size = 4
__Dest$160980 = -100					; size = 4
__Ch$160979 = -85					; size = 1
__Str$160975 = -76					; size = 32
__Ch$160973 = -33					; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 423  : 		{	// get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 01 00
	00		 sub	 esp, 500		; 000001f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 00 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-512]
  00021	b9 7d 00 00 00	 mov	 ecx, 125		; 0000007dH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 424  : 		if (_Mysb::gptr() != 0
; 425  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00045	8b f4		 mov	 esi, esp
  00047	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	85 c0		 test	 eax, eax
  00059	74 4c		 je	 SHORT $LN18@uflow
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b f0		 mov	 esi, eax
  0006f	8b fc		 mov	 edi, esp
  00071	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0007a	3b fc		 cmp	 edi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	3b f0		 cmp	 esi, eax
  00083	73 22		 jae	 SHORT $LN18@uflow

; 426  : 			return (_Traits::to_int_type(
; 427  : 				*_Mysb::_Gninc()));	// return buffered

  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0009d	83 c4 04	 add	 esp, 4
  000a0	e9 b3 03 00 00	 jmp	 $LN19@uflow
  000a5	eb 13		 jmp	 SHORT $LN17@uflow
$LN18@uflow:

; 428  : 		else if (_Myfile == 0)

  000a7	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  000ae	75 0a		 jne	 SHORT $LN17@uflow

; 429  : 			return (_Traits::eof());	// no open C stream, fail

  000b0	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b5	e9 9e 03 00 00	 jmp	 $LN19@uflow
$LN17@uflow:

; 430  : 		_Reset_back();	// revert from _Mychar buffer

  000ba	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 431  : 		if (_Pcvt == 0)

  000c2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  000c9	75 4d		 jne	 SHORT $LN15@uflow

; 432  : 			{	// no codecvt facet, just get it
; 433  : 			_Elem _Ch = 0;

  000cb	c6 45 df 00	 mov	 BYTE PTR __Ch$160973[ebp], 0

; 434  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 435  : 				: _Traits::eof());

  000cf	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000d5	51		 push	 ecx
  000d6	8d 55 df	 lea	 edx, DWORD PTR __Ch$160973[ebp]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  000df	83 c4 08	 add	 esp, 8
  000e2	0f b6 c0	 movzx	 eax, al
  000e5	85 c0		 test	 eax, eax
  000e7	74 14		 je	 SHORT $LN21@uflow
  000e9	8d 4d df	 lea	 ecx, DWORD PTR __Ch$160973[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000f2	83 c4 04	 add	 esp, 4
  000f5	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
  000fb	eb 0b		 jmp	 SHORT $LN22@uflow
$LN21@uflow:
  000fd	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00102	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN22@uflow:
  00108	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR tv139[ebp]
  0010e	e9 45 03 00 00	 jmp	 $LN19@uflow

; 436  : 			}
; 437  : 		else

  00113	e9 40 03 00 00	 jmp	 $LN19@uflow
$LN15@uflow:

; 438  : 			{	// build string until codecvt succeeds
; 439  : 			string _Str;

  00118	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  0011b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN13@uflow:

; 440  : 
; 441  : 			for (; ; )
; 442  : 				{	// get using codecvt facet
; 443  : 				_Elem _Ch, *_Dest;
; 444  : 				const char *_Src;
; 445  : 				int _Nleft;
; 446  : 				int _Meta = fgetc(_Myfile);

  00127	8b f4		 mov	 esi, esp
  00129	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0012f	51		 push	 ecx
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00136	83 c4 04	 add	 esp, 4
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Meta$160983[ebp], eax

; 447  : 
; 448  : 				if (_Meta == EOF)

  00146	83 bd 78 ff ff
	ff ff		 cmp	 DWORD PTR __Meta$160983[ebp], -1
  0014d	75 25		 jne	 SHORT $LN11@uflow

; 449  : 					return (_Traits::eof());	// partial char?

  0014f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00154	89 85 18 fe ff
	ff		 mov	 DWORD PTR $T173892[ebp], eax
  0015a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00161	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00164	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00169	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR $T173892[ebp]
  0016f	e9 e4 02 00 00	 jmp	 $LN19@uflow
$LN11@uflow:

; 450  : 
; 451  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  00174	0f b6 85 78 ff
	ff ff		 movzx	 eax, BYTE PTR __Meta$160983[ebp]
  0017b	50		 push	 eax
  0017c	6a 01		 push	 1
  0017e	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00181	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 452  : 				switch (_Pcvt->in(_State,
; 453  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 454  : 					&_Ch, &_Ch + 1, _Dest))

  00186	8b f4		 mov	 esi, esp
  00188	8d 45 9c	 lea	 eax, DWORD PTR __Dest$160980[ebp]
  0018b	50		 push	 eax
  0018c	8d 4d ac	 lea	 ecx, DWORD PTR __Ch$160979[ebp+1]
  0018f	51		 push	 ecx
  00190	8d 55 ab	 lea	 edx, DWORD PTR __Ch$160979[ebp]
  00193	52		 push	 edx
  00194	8d 45 90	 lea	 eax, DWORD PTR __Src$160981[ebp]
  00197	50		 push	 eax
  00198	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T173894[ebp]
  0019e	51		 push	 ecx
  0019f	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  001a2	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a7	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  001ad	8b 95 10 fe ff
	ff		 mov	 edx, DWORD PTR tv141[ebp]
  001b3	89 95 0c fe ff
	ff		 mov	 DWORD PTR tv236[ebp], edx
  001b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001bd	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv236[ebp]
  001c3	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  001c8	8b f8		 mov	 edi, eax
  001ca	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  001cd	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001d2	03 f8		 add	 edi, eax
  001d4	57		 push	 edi
  001d5	8d 85 44 fe ff
	ff		 lea	 eax, DWORD PTR $T173895[ebp]
  001db	50		 push	 eax
  001dc	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  001df	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001e4	89 85 08 fe ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  001ea	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv248[ebp]
  001f0	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv238[ebp], ecx
  001f6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001fa	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv238[ebp]
  00200	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  00205	50		 push	 eax
  00206	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00209	83 c2 4c	 add	 edx, 76			; 0000004cH
  0020c	52		 push	 edx
  0020d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00210	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00220	89 85 24 fe ff
	ff		 mov	 DWORD PTR $T173893[ebp], eax
  00226	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0022a	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T173895[ebp]
  00230	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00235	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00239	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T173894[ebp]
  0023f	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00244	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR $T173893[ebp]
  0024a	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  00250	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR tv180[ebp], 0
  00257	0f 8c c5 01 00
	00		 jl	 $LN1@uflow
  0025d	83 bd 00 fe ff
	ff 01		 cmp	 DWORD PTR tv180[ebp], 1
  00264	7e 12		 jle	 SHORT $LN8@uflow
  00266	83 bd 00 fe ff
	ff 03		 cmp	 DWORD PTR tv180[ebp], 3
  0026d	0f 84 1a 01 00
	00		 je	 $LN3@uflow
  00273	e9 aa 01 00 00	 jmp	 $LN1@uflow
$LN8@uflow:

; 455  : 					{	// test result of converting one element
; 456  : 				case codecvt_base::partial:
; 457  : 				case codecvt_base::ok:
; 458  : 					if (_Dest != &_Ch)

  00278	8b 45 9c	 mov	 eax, DWORD PTR __Dest$160980[ebp]
  0027b	8d 4d ab	 lea	 ecx, DWORD PTR __Ch$160979[ebp]
  0027e	3b c1		 cmp	 eax, ecx
  00280	0f 84 b3 00 00
	00		 je	 $LN7@uflow

; 459  : 						{	// got an element, put back excess and deliver it
; 460  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  00286	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR $T173896[ebp]
  0028c	50		 push	 eax
  0028d	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00290	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00295	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  0029b	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv249[ebp]
  002a1	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv240[ebp], ecx
  002a7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002ab	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv240[ebp]
  002b1	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  002b6	8b f0		 mov	 esi, eax
  002b8	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  002bb	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  002c0	03 f0		 add	 esi, eax
  002c2	2b 75 90	 sub	 esi, DWORD PTR __Src$160981[ebp]
  002c5	89 75 84	 mov	 DWORD PTR __Nleft$160982[ebp], esi
  002c8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002cc	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T173896[ebp]
  002d2	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@uflow:

; 461  : 						for (; 0 < _Nleft; )

  002d7	83 7d 84 00	 cmp	 DWORD PTR __Nleft$160982[ebp], 0
  002db	7e 2e		 jle	 SHORT $LN5@uflow

; 462  : 							ungetc(_Src[--_Nleft], _Myfile);

  002dd	8b 45 84	 mov	 eax, DWORD PTR __Nleft$160982[ebp]
  002e0	83 e8 01	 sub	 eax, 1
  002e3	89 45 84	 mov	 DWORD PTR __Nleft$160982[ebp], eax
  002e6	8b f4		 mov	 esi, esp
  002e8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002eb	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  002ee	52		 push	 edx
  002ef	8b 45 90	 mov	 eax, DWORD PTR __Src$160981[ebp]
  002f2	03 45 84	 add	 eax, DWORD PTR __Nleft$160982[ebp]
  002f5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002f8	51		 push	 ecx
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  002ff	83 c4 08	 add	 esp, 8
  00302	3b f4		 cmp	 esi, esp
  00304	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00309	eb cc		 jmp	 SHORT $LN6@uflow
$LN5@uflow:

; 463  : 						return (_Traits::to_int_type(_Ch));

  0030b	8d 45 ab	 lea	 eax, DWORD PTR __Ch$160979[ebp]
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00314	83 c4 04	 add	 esp, 4
  00317	89 85 6c fe ff
	ff		 mov	 DWORD PTR $T173897[ebp], eax
  0031d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00324	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00327	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0032c	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR $T173897[ebp]
  00332	e9 21 01 00 00	 jmp	 $LN19@uflow

; 464  : 						}
; 465  : 					else

  00337	eb 4f		 jmp	 SHORT $LN4@uflow
$LN7@uflow:

; 466  : 						_Str.erase((size_t)0,	// partial, discard used input
; 467  : 							(size_t)(_Src - &*_Str.begin()));

  00339	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR $T173898[ebp]
  0033f	50		 push	 eax
  00340	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00343	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00348	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  0034e	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv250[ebp]
  00354	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv243[ebp], ecx
  0035a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0035e	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv243[ebp]
  00364	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  00369	8b 55 90	 mov	 edx, DWORD PTR __Src$160981[ebp]
  0036c	2b d0		 sub	 edx, eax
  0036e	52		 push	 edx
  0036f	6a 00		 push	 0
  00371	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00374	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00379	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0037d	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T173898[ebp]
  00383	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@uflow:

; 468  : 					break;

  00388	e9 b7 00 00 00	 jmp	 $LN9@uflow
$LN3@uflow:

; 469  : 
; 470  : 				case codecvt_base::noconv:
; 471  : 					if (_Str.size() < sizeof (_Elem))

  0038d	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00390	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00395	83 f8 01	 cmp	 eax, 1
  00398	73 05		 jae	 SHORT $LN2@uflow

; 472  : 						break;	// no conversion, but need more chars

  0039a	e9 a5 00 00 00	 jmp	 $LN9@uflow
$LN2@uflow:

; 473  : 
; 474  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  0039f	8b f4		 mov	 esi, esp
  003a1	6a 01		 push	 1
  003a3	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T173899[ebp]
  003a9	50		 push	 eax
  003aa	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  003ad	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  003b2	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv251[ebp], eax
  003b8	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv251[ebp]
  003be	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv245[ebp], ecx
  003c4	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003c8	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv245[ebp]
  003ce	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  003d3	50		 push	 eax
  003d4	6a 01		 push	 1
  003d6	8d 55 ab	 lea	 edx, DWORD PTR __Ch$160979[ebp]
  003d9	52		 push	 edx
  003da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy_s
  003e0	83 c4 10	 add	 esp, 16			; 00000010H
  003e3	3b f4		 cmp	 esi, esp
  003e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ea	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003ee	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T173899[ebp]
  003f4	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 475  : 						sizeof (_Elem));	// copy raw bytes to element
; 476  : 
; 477  : 					return (_Traits::to_int_type(_Ch));	// return result

  003f9	8d 45 ab	 lea	 eax, DWORD PTR __Ch$160979[ebp]
  003fc	50		 push	 eax
  003fd	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00402	83 c4 04	 add	 esp, 4
  00405	89 85 a0 fe ff
	ff		 mov	 DWORD PTR $T173900[ebp], eax
  0040b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00412	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00415	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0041a	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR $T173900[ebp]
  00420	eb 36		 jmp	 SHORT $LN19@uflow
$LN1@uflow:

; 478  : 
; 479  : 				default:
; 480  : 					return (_Traits::eof());	// conversion failed

  00422	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00427	89 85 ac fe ff
	ff		 mov	 DWORD PTR $T173901[ebp], eax
  0042d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00434	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00437	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0043c	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR $T173901[ebp]
  00442	eb 14		 jmp	 SHORT $LN19@uflow
$LN9@uflow:

; 481  : 					}
; 482  : 				}

  00444	e9 de fc ff ff	 jmp	 $LN13@uflow

; 483  : 			}

  00449	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00450	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00453	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN19@uflow:

; 484  : 		}

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN36@uflow
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 00 02 00
	00		 add	 esp, 512		; 00000200H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	8b ff		 npad	 2
$LN36@uflow:
  00494	05 00 00 00	 DD	 5
  00498	00 00 00 00	 DD	 $LN35@uflow
$LN35@uflow:
  0049c	df ff ff ff	 DD	 -33			; ffffffdfH
  004a0	01 00 00 00	 DD	 1
  004a4	00 00 00 00	 DD	 $LN29@uflow
  004a8	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004ac	20 00 00 00	 DD	 32			; 00000020H
  004b0	00 00 00 00	 DD	 $LN30@uflow
  004b4	ab ff ff ff	 DD	 -85			; ffffffabH
  004b8	01 00 00 00	 DD	 1
  004bc	00 00 00 00	 DD	 $LN31@uflow
  004c0	9c ff ff ff	 DD	 -100			; ffffff9cH
  004c4	04 00 00 00	 DD	 4
  004c8	00 00 00 00	 DD	 $LN32@uflow
  004cc	90 ff ff ff	 DD	 -112			; ffffff90H
  004d0	04 00 00 00	 DD	 4
  004d4	00 00 00 00	 DD	 $LN33@uflow
$LN33@uflow:
  004d8	5f		 DB	 95			; 0000005fH
  004d9	53		 DB	 83			; 00000053H
  004da	72		 DB	 114			; 00000072H
  004db	63		 DB	 99			; 00000063H
  004dc	00		 DB	 0
$LN32@uflow:
  004dd	5f		 DB	 95			; 0000005fH
  004de	44		 DB	 68			; 00000044H
  004df	65		 DB	 101			; 00000065H
  004e0	73		 DB	 115			; 00000073H
  004e1	74		 DB	 116			; 00000074H
  004e2	00		 DB	 0
$LN31@uflow:
  004e3	5f		 DB	 95			; 0000005fH
  004e4	43		 DB	 67			; 00000043H
  004e5	68		 DB	 104			; 00000068H
  004e6	00		 DB	 0
$LN30@uflow:
  004e7	5f		 DB	 95			; 0000005fH
  004e8	53		 DB	 83			; 00000053H
  004e9	74		 DB	 116			; 00000074H
  004ea	72		 DB	 114			; 00000072H
  004eb	00		 DB	 0
$LN29@uflow:
  004ec	5f		 DB	 95			; 0000005fH
  004ed	43		 DB	 67			; 00000043H
  004ee	68		 DB	 104			; 00000068H
  004ef	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Str$160975[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1:
  00008	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR $T173894[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2:
  00013	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T173895[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3:
  0001e	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T173896[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4:
  00029	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T173898[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5:
  00034	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T173899[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a fc fd ff
	ff		 mov	 ecx, DWORD PTR [edx-516]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Meta$ = -8						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 35   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 36   : 	int _Meta;
; 37   : 	if ((_Meta = fgetc(_File)) == EOF)

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	89 45 f8	 mov	 DWORD PTR __Meta$[ebp], eax
  00037	83 7d f8 ff	 cmp	 DWORD PTR __Meta$[ebp], -1
  0003b	75 06		 jne	 SHORT $LN2@Fgetc

; 38   : 		return (false);

  0003d	32 c0		 xor	 al, al
  0003f	eb 0c		 jmp	 SHORT $LN3@Fgetc

; 39   : 	else

  00041	eb 0a		 jmp	 SHORT $LN3@Fgetc
$LN2@Fgetc:

; 40   : 		{	// got one, convert to char
; 41   : 		_Byte = (char)_Meta;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Byte$[ebp]
  00046	8a 4d f8	 mov	 cl, BYTE PTR __Meta$[ebp]
  00049	88 08		 mov	 BYTE PTR [eax], cl

; 42   : 		return (true);

  0004b	b0 01		 mov	 al, 1
$LN3@Fgetc:

; 43   : 		}
; 44   : 	}

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T173925 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	51		 push	 ecx
  00043	8b cc		 mov	 ecx, esp
  00045	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T173925[ebp], esp
  0004b	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 551  : 		_Tidy();

  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 552  : 		}

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$fpos@H@std@@QAE@H_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	__imp__fgetpos:PROC
EXTRN	__imp___fseeki64:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -24					; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 490  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 491  : 		fpos_t _Fileposition;
; 492  : 
; 493  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 494  : 			&& _Way == ios_base::cur	// a relative seek
; 495  : 			&& _Pcvt == 0)	// not converting

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 48	 add	 ecx, 72			; 00000048H
  0003b	3b c1		 cmp	 eax, ecx
  0003d	75 21		 jne	 SHORT $LN5@seekoff
  0003f	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00043	75 1b		 jne	 SHORT $LN5@seekoff
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0004c	75 12		 jne	 SHORT $LN5@seekoff

; 496  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  0004e	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00051	83 e8 01	 sub	 eax, 1
  00054	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00057	83 d9 00	 sbb	 ecx, 0
  0005a	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  0005d	89 4d 10	 mov	 DWORD PTR __Off$[ebp+4], ecx
$LN5@seekoff:

; 497  : 
; 498  : 		if (_Myfile == 0 || !_Endwrite()
; 499  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 500  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 501  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00067	74 67		 je	 SHORT $LN3@seekoff
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 58		 je	 SHORT $LN3@seekoff
  00078	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0007b	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  0007e	75 06		 jne	 SHORT $LN1@seekoff
  00080	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00084	74 29		 je	 SHORT $LN2@seekoff
$LN1@seekoff:
  00086	8b f4		 mov	 esi, esp
  00088	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0008f	51		 push	 ecx
  00090	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00093	52		 push	 edx
  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0009a	51		 push	 ecx
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	85 c0		 test	 eax, eax
  000ad	75 21		 jne	 SHORT $LN3@seekoff
$LN2@seekoff:
  000af	8b f4		 mov	 esi, esp
  000b1	8d 45 e8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  000bb	52		 push	 edx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  000c2	83 c4 08	 add	 esp, 8
  000c5	3b f4		 cmp	 esi, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	85 c0		 test	 eax, eax
  000ce	74 19		 je	 SHORT $LN4@seekoff
$LN3@seekoff:

; 502  : 			return (pos_type(_BADOFF));	// report failure

  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d8	51		 push	 ecx
  000d9	8b 10		 mov	 edx, DWORD PTR [eax]
  000db	52		 push	 edx
  000dc	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000df	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>
  000e4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000e7	eb 22		 jmp	 SHORT $LN6@seekoff
$LN4@seekoff:

; 503  : 
; 504  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 505  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  000f1	8b 45 ec	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  000f4	50		 push	 eax
  000f5	8b 4d e8	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  000f8	51		 push	 ecx
  000f9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000fc	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  000ff	50		 push	 eax
  00100	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00103	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@H_J@Z ; std::fpos<int>::fpos<int>
  00108	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@seekoff:

; 506  : 			_Fileposition));	// return new position
; 507  : 		}

  0010b	52		 push	 edx
  0010c	8b cd		 mov	 ecx, ebp
  0010e	50		 push	 eax
  0010f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@seekoff
  00115	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011a	58		 pop	 eax
  0011b	5a		 pop	 edx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00125	3b ec		 cmp	 ebp, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 14 00	 ret	 20			; 00000014H
  00132	8b ff		 npad	 2
$LN10@seekoff:
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN9@seekoff
$LN9@seekoff:
  0013c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00140	08 00 00 00	 DD	 8
  00144	00 00 00 00	 DD	 $LN8@seekoff
$LN8@seekoff:
  00148	5f		 DB	 95			; 0000005fH
  00149	46		 DB	 70			; 00000046H
  0014a	69		 DB	 105			; 00000069H
  0014b	6c		 DB	 108			; 0000006cH
  0014c	65		 DB	 101			; 00000065H
  0014d	70		 DB	 112			; 00000070H
  0014e	6f		 DB	 111			; 0000006fH
  0014f	73		 DB	 115			; 00000073H
  00150	69		 DB	 105			; 00000069H
  00151	74		 DB	 116			; 00000074H
  00152	69		 DB	 105			; 00000069H
  00153	6f		 DB	 111			; 0000006fH
  00154	6e		 DB	 110			; 0000006eH
  00155	00		 DB	 0
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
PUBLIC	?state@?$fpos@H@std@@QBEHXZ			; std::fpos<int>::state
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
PUBLIC	?seekpos@?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::seekpos
EXTRN	__imp__fsetpos:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
__Off$ = -40						; size = 8
__Fileposition$ = -24					; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 512  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 513  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  00023	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00026	e8 00 00 00 00	 call	 ?seekpos@?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::seekpos
  0002b	89 45 e8	 mov	 DWORD PTR __Fileposition$[ebp], eax
  0002e	89 55 ec	 mov	 DWORD PTR __Fileposition$[ebp+4], edx

; 514  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);

  00031	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00034	e8 00 00 00 00	 call	 ??B?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::operator __int64
  00039	8b c8		 mov	 ecx, eax
  0003b	8b f2		 mov	 esi, edx
  0003d	8b 45 e8	 mov	 eax, DWORD PTR __Fileposition$[ebp]
  00040	99		 cdq
  00041	2b c8		 sub	 ecx, eax
  00043	1b f2		 sbb	 esi, edx
  00045	89 4d d8	 mov	 DWORD PTR __Off$[ebp], ecx
  00048	89 75 dc	 mov	 DWORD PTR __Off$[ebp+4], esi

; 515  : 
; 516  : 		if (_Myfile == 0 || !_Endwrite()
; 517  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 518  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 519  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00052	0f 84 80 00 00
	00		 je	 $LN2@seekpos
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00060	0f b6 c0	 movzx	 eax, al
  00063	85 c0		 test	 eax, eax
  00065	74 71		 je	 SHORT $LN2@seekpos
  00067	8b f4		 mov	 esi, esp
  00069	8d 45 e8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00073	52		 push	 edx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fsetpos
  0007a	83 c4 08	 add	 esp, 8
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	85 c0		 test	 eax, eax
  00086	75 50		 jne	 SHORT $LN2@seekpos
  00088	8b 45 d8	 mov	 eax, DWORD PTR __Off$[ebp]
  0008b	0b 45 dc	 or	 eax, DWORD PTR __Off$[ebp+4]
  0008e	74 27		 je	 SHORT $LN1@seekpos
  00090	8b f4		 mov	 esi, esp
  00092	6a 01		 push	 1
  00094	8b 45 dc	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00097	50		 push	 eax
  00098	8b 4d d8	 mov	 ecx, DWORD PTR __Off$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0009f	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	85 c0		 test	 eax, eax
  000b5	75 21		 jne	 SHORT $LN2@seekpos
$LN1@seekpos:
  000b7	8b f4		 mov	 esi, esp
  000b9	8d 45 e8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  000c3	52		 push	 edx
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  000ca	83 c4 08	 add	 esp, 8
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	85 c0		 test	 eax, eax
  000d6	74 19		 je	 SHORT $LN3@seekpos
$LN2@seekpos:

; 520  : 			return (pos_type(_BADOFF));	// report failure

  000d8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000dd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e0	51		 push	 ecx
  000e1	8b 10		 mov	 edx, DWORD PTR [eax]
  000e3	52		 push	 edx
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e7	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>
  000ec	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ef	eb 30		 jmp	 SHORT $LN4@seekpos
$LN3@seekpos:

; 521  : 
; 522  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  000f1	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  000f4	e8 00 00 00 00	 call	 ?state@?$fpos@H@std@@QBEHXZ ; std::fpos<int>::state
  000f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 523  : 
; 524  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 525  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  00107	8b 45 ec	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  0010a	50		 push	 eax
  0010b	8b 4d e8	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00115	50		 push	 eax
  00116	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00119	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@H_J@Z ; std::fpos<int>::fpos<int>
  0011e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN4@seekpos:

; 526  : 			_Fileposition));	// return new position
; 527  : 		}

  00121	52		 push	 edx
  00122	8b cd		 mov	 ecx, ebp
  00124	50		 push	 eax
  00125	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@seekpos
  0012b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00130	58		 pop	 eax
  00131	5a		 pop	 edx
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0013b	3b ec		 cmp	 ebp, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 20 00	 ret	 32			; 00000020H
$LN8@seekpos:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN7@seekpos
$LN7@seekpos:
  00150	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00154	08 00 00 00	 DD	 8
  00158	00 00 00 00	 DD	 $LN6@seekpos
$LN6@seekpos:
  0015c	5f		 DB	 95			; 0000005fH
  0015d	46		 DB	 70			; 00000046H
  0015e	69		 DB	 105			; 00000069H
  0015f	6c		 DB	 108			; 0000006cH
  00160	65		 DB	 101			; 00000065H
  00161	70		 DB	 112			; 00000070H
  00162	6f		 DB	 111			; 0000006fH
  00163	73		 DB	 115			; 00000073H
  00164	69		 DB	 105			; 00000069H
  00165	74		 DB	 116			; 00000074H
  00166	69		 DB	 105			; 00000069H
  00167	6f		 DB	 111			; 0000006fH
  00168	6e		 DB	 110			; 0000006eH
  00169	00		 DB	 0
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
EXTRN	__imp__setvbuf:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 530  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 531  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 532  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 533  : 			(size_t)_Count * sizeof (_Elem)) != 0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  0002a	74 50		 je	 SHORT $LN2@setbuf
  0002c	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00030	75 14		 jne	 SHORT $LN6@setbuf
  00032	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00035	0b 45 10	 or	 eax, DWORD PTR __Count$[ebp+4]
  00038	75 0c		 jne	 SHORT $LN6@setbuf
  0003a	c7 85 30 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv71[ebp], 4
  00044	eb 0a		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00046	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@setbuf:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b f4		 mov	 esi, esp
  00055	51		 push	 ecx
  00056	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00060	50		 push	 eax
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00067	52		 push	 edx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setvbuf
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	85 c0		 test	 eax, eax
  0007a	74 06		 je	 SHORT $LN3@setbuf
$LN2@setbuf:

; 534  : 			return (0);	// failed

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 16		 jmp	 SHORT $LN4@setbuf

; 535  : 		else

  00080	eb 14		 jmp	 SHORT $LN4@setbuf
$LN3@setbuf:

; 536  : 			{	// new buffer, reinitialize pointers
; 537  : 			_Init(_Myfile, _Openfl);

  00082	6a 01		 push	 1
  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0008a	51		 push	 ecx
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 538  : 			return (this);

  00093	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@setbuf:

; 539  : 			}
; 540  : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
EXTRN	__imp__fflush:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv86 = -232						; size = 4
$T173949 = -224						; size = 4
$T173950 = -212						; size = 4
_this$ = -8						; size = 4
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 543  : 		{	// synchronize C stream with external file

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 544  : 		return (_Myfile == 0
; 545  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 546  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  0002a	74 73		 je	 SHORT $LN3@sync
  0002c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00031	8b f4		 mov	 esi, esp
  00033	50		 push	 eax
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003f	ff d0		 call	 eax
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T173949[ebp], eax
  0004e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00053	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T173950[ebp], eax
  00059	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T173949[ebp]
  0005f	51		 push	 ecx
  00060	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR $T173950[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0006c	83 c4 08	 add	 esp, 8
  0006f	0f b6 c0	 movzx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	75 29		 jne	 SHORT $LN3@sync
  00076	8b f4		 mov	 esi, esp
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  0007e	52		 push	 edx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  00085	83 c4 04	 add	 esp, 4
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	85 c0		 test	 eax, eax
  00091	7d 0c		 jge	 SHORT $LN3@sync
  00093	c7 85 18 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv86[ebp], -1
  0009d	eb 0a		 jmp	 SHORT $LN4@sync
$LN3@sync:
  0009f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN4@sync:
  000a9	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]

; 547  : 		}

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 550  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 551  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 552  : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_fstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
EXTRN	__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:PROC
EXTRN	??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_fstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
	DD	060H
CONST	ENDS
;	COMDAT ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T173957 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_$initVBases$ = 8					; size = 4
??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1164 : 		{	// construct unopened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T173957[ebp], 0
  0004c	83 7d 08 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 3e		 je	 SHORT $LN1@basic_fstr
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 70	 add	 ecx, 112		; 00000070H
  0006b	8b f4		 mov	 esi, esp
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00081	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T173957[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T173957[ebp], eax
$LN1@basic_fstr:
  00090	8b f4		 mov	 esi, esp
  00092	6a 00		 push	 0
  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	83 c0 18	 add	 eax, 24			; 00000018H
  0009a	50		 push	 eax
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
  000c4	6a 00		 push	 0
  000c6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	83 c1 18	 add	 ecx, 24			; 00000018H
  000cc	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >

; 1165 : 		}

  000d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e5	59		 pop	 ecx
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ef	3b ec		 cmp	 ebp, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T173957[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN5@basic_fstr
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T173957[ebp], -2 ; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 70	 add	 ecx, 112		; 00000070H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN5@basic_fstr:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 18	 add	 ecx, 24			; 00000018H
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1302 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00048	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c7 44 10 90 00
	00 00 00	 mov	 DWORD PTR [eax+edx-112], OFFSET ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1303 : 		}

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 e9 58	 sub	 ecx, 88			; 00000058H
  00063	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00068	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 e9 58	 sub	 ecx, 88			; 00000058H
  00075	8b f4		 mov	 esi, esp
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	8b f4		 mov	 esi, esp
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000e	3b f4		 cmp	 esi, esp
  00010	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001c	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 1318 : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1319 : 		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)

  00023	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 18	 add	 ecx, 24			; 00000018H
  00035	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  0003a	85 c0		 test	 eax, eax
  0003c	75 22		 jne	 SHORT $LN2@open

; 1320 : 			_Myios::setstate(ios_base::failbit);

  0003e	8b f4		 mov	 esi, esp
  00040	6a 00		 push	 0
  00042	6a 02		 push	 2
  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0004f	8b ca		 mov	 ecx, edx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1321 : 		else

  0005e	eb 20		 jmp	 SHORT $LN3@open
$LN2@open:

; 1322 : 			_Myios::clear();	// added with C++0X

  00060	8b f4		 mov	 esi, esp
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00071	8b ca		 mov	 ecx, edx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@open:

; 1323 : 		}

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::open
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_fstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 1340 : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1341 : 		if (_Filebuffer.close() == 0)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 18	 add	 ecx, 24			; 00000018H
  00029	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0002e	85 c0		 test	 eax, eax
  00030	75 20		 jne	 SHORT $LN2@close@2

; 1342 : 			_Myios::setstate(ios_base::failbit);

  00032	8b f4		 mov	 esi, esp
  00034	6a 00		 push	 0
  00036	6a 02		 push	 2
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00040	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00043	8b ca		 mov	 ecx, edx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@close@2:

; 1343 : 		}

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::close
_TEXT	ENDS
PUBLIC	??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@XZ ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T173984 = -212						; size = 4
_this$ = -8						; size = 4
??0?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ PROC ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	51		 push	 ecx
  00024	8b cc		 mov	 ecx, esp
  00026	89 a5 2c ff ff
	ff		 mov	 DWORD PTR $T173984[ebp], esp
  0002c	e8 00 00 00 00	 call	 ??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@XZ ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >

; 608  : 		}

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??0?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ENDP ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	?_Tidy@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ PROC ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 770  : 		_Tidy();

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Tidy@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Tidy

; 771  : 		}

  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
__ehhandler$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ENDP ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	??1?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::~_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::~_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::~_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::~_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::~_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 60	 sub	 ecx, 96			; 00000060H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN1@scalar
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 60	 sub	 eax, 96			; 00000060H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 60	 sub	 eax, 96			; 00000060H
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0c		 je	 SHORT $LN1@scalar@2
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 70	 sub	 ecx, 112		; 00000070H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN1@scalar@3
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 70	 sub	 eax, 112		; 00000070H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN1@scalar@3:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 70	 sub	 eax, 112		; 00000070H
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 128  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 129  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 130  : 		_Lockit _Lock(_LOCK_DEBUG);

  00042	8b f4		 mov	 esi, esp
  00044	6a 03		 push	 3
  00046	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 131  : 		_Orphan_me();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 132  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 133  : 		}

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b f4		 mov	 esi, esp
  0006e	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	52		 push	 edx
  0007f	8b cd		 mov	 ecx, ebp
  00081	50		 push	 eax
  00082	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Iterator_b
  00088	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008d	58		 pop	 eax
  0008e	5a		 pop	 edx
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	8b ff		 npad	 2
$LN7@Iterator_b:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN6@Iterator_b
$LN6@Iterator_b:
  000b8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN4@Iterator_b
$LN4@Iterator_b:
  000c4	5f		 DB	 95			; 0000005fH
  000c5	4c		 DB	 76			; 0000004cH
  000c6	6f		 DB	 111			; 0000006fH
  000c7	63		 DB	 99			; 00000063H
  000c8	6b		 DB	 107			; 0000006bH
  000c9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't'
	DB	00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$72569 = -20					; size = 4
_this$ = -8						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 172  : 		{	// cut ties with parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 173  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 174  : 		if (_Myproxy != 0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	74 67		 je	 SHORT $LN5@Orphan_me

; 175  : 			{	// adopted, remove self from list
; 176  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	83 c1 04	 add	 ecx, 4
  00033	89 4d ec	 mov	 DWORD PTR __Pnext$72569[ebp], ecx
$LN3@Orphan_me:

; 177  : 			while (*_Pnext != 0 && *_Pnext != this)

  00036	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$72569[ebp]
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	74 17		 je	 SHORT $LN2@Orphan_me
  0003e	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$72569[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	3b 4d f8	 cmp	 ecx, DWORD PTR _this$[ebp]
  00046	74 0d		 je	 SHORT $LN2@Orphan_me

; 178  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  00048	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$72569[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	83 c1 04	 add	 ecx, 4
  00050	89 4d ec	 mov	 DWORD PTR __Pnext$72569[ebp], ecx
  00053	eb e1		 jmp	 SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 179  : 
; 180  : 			if (*_Pnext == 0)

  00055	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$72569[ebp]
  00058	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005b	75 21		 jne	 SHORT $LN1@Orphan_me

; 181  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

  0005d	8b f4		 mov	 esi, esp
  0005f	68 b5 00 00 00	 push	 181			; 000000b5H
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1JA@DBMECOPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_me:

; 182  : 			*_Pnext = _Mynextiter;

  0007e	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$72569[ebp]
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00087	89 10		 mov	 DWORD PTR [eax], edx

; 183  : 			_Myproxy = 0;

  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN5@Orphan_me:

; 184  : 			}
; 185  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 186  : 		}

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
$T174026 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 606  : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	51		 push	 ecx
  00043	8b cc		 mov	 ecx, esp
  00045	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T174026[ebp], esp
  0004b	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 607  : 		_Tidy();

  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 608  : 		assign(_Count, _Ch);

  0006b	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00073	51		 push	 ecx
  00074	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 609  : 		}

  0007c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00083	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 844  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 845  : 		if (npos - this->_Mysize <= _Count)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0002c	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  0002f	3b 4d 08	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00032	77 08		 ja	 SHORT $LN2@append

; 846  : 			_Xlen();	// result too long

  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 847  : 
; 848  : 		size_type _Num;
; 849  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003c	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00040	76 45		 jbe	 SHORT $LN1@append
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00048	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  0004b	89 4d ec	 mov	 DWORD PTR __Num$[ebp], ecx
  0004e	6a 00		 push	 0
  00050	8b 55 ec	 mov	 edx, DWORD PTR __Num$[ebp]
  00053	52		 push	 edx
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	74 24		 je	 SHORT $LN1@append

; 850  : 			{	// make room and append new stuff using assign
; 851  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00063	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00067	50		 push	 eax
  00068	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00072	50		 push	 eax
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 852  : 			_Eos(_Num);

  0007b	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@append:

; 853  : 			}
; 854  : 		return (*this);

  00087	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@append:

; 855  : 		}

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00093	3b ec		 cmp	 ebp, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$161308 = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1109 : 		if (this->_Mysize < _Off)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00029	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0002c	73 08		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003c	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0003f	3b 4d 0c	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00042	73 0c		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004a	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0004d	89 4d 0c	 mov	 DWORD PTR __Count$[ebp], ecx
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00050	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00054	76 48		 jbe	 SHORT $LN1@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005c	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0005f	2b 4d 0c	 sub	 ecx, DWORD PTR __Count$[ebp]
  00062	51		 push	 ecx
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006b	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0006e	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00071	50		 push	 eax
  00072	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0007a	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008c	2b 4d 0c	 sub	 ecx, DWORD PTR __Count$[ebp]
  0008f	89 4d ec	 mov	 DWORD PTR __Newsize$161308[ebp], ecx

; 1118 : 			_Eos(_Newsize);

  00092	8b 45 ec	 mov	 eax, DWORD PTR __Newsize$161308[ebp]
  00095	50		 push	 eax
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@erase:

; 1121 : 		}

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 518  : 		}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T174043 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1350 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T174043[ebp], 0

; 1351 : 		return (_STRING_ITERATOR(_Myptr()));

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0003d	e8 00 00 00 00	 call	 ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
  00042	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T174043[ebp]
  00048	83 c9 01	 or	 ecx, 1
  0004b	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T174043[ebp], ecx
  00051	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1352 : 		}

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$161329 = -20					; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1988 : 		if (!_Built)

  00023	0f b6 45 08	 movzx	 eax, BYTE PTR __Built$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	75 02		 jne	 SHORT $LN4@Tidy
  0002b	eb 48		 jmp	 SHORT $LN3@Tidy
$LN4@Tidy:

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00034	72 3f		 jb	 SHORT $LN3@Tidy

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	89 4d ec	 mov	 DWORD PTR __Ptr$161329[ebp], ecx

; 1993 : 			if (0 < _Newsize)

  0003f	83 7d 0c 00	 cmp	 DWORD PTR __Newsize$[ebp], 0
  00043	76 17		 jbe	 SHORT $LN1@Tidy

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$161329[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00050	83 c2 04	 add	 edx, 4
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Tidy:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00062	83 c1 01	 add	 ecx, 1
  00065	51		 push	 ecx
  00066	8b 55 ec	 mov	 edx, DWORD PTR __Ptr$161329[ebp]
  00069	52		 push	 edx
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00070	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN3@Tidy:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 1998 : 		_Eos(_Newsize);

  0007f	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	50		 push	 eax
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1999 : 		}

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 498  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
$T174051 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 466  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00065	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>

; 467  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 468  : 			_Alproxy(_Alval);

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 c0 1c	 add	 eax, 28			; 0000001cH
  00070	50		 push	 eax
  00071	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00074	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 469  : 		this->_Myproxy = _Alproxy.allocate(1);

  00079	6a 01		 push	 1
  0007b	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0007e	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	89 01		 mov	 DWORD PTR [ecx], eax

; 470  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

  00088	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T174051[ebp]
  0008e	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00093	50		 push	 eax
  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	51		 push	 ecx
  0009a	8d 55 e3	 lea	 edx, DWORD PTR __Alproxy$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 471  : 		this->_Myproxy->_Mycont = this;

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000ae	89 11		 mov	 DWORD PTR [ecx], edx

; 472  : 		}

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	52		 push	 edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	50		 push	 eax
  000be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@String_val
  000c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c9	58		 pop	 eax
  000ca	5a		 pop	 edx
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000df	3b ec		 cmp	 ebp, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
$LN7@String_val:
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN6@String_val
$LN6@String_val:
  000f4	e3 ff ff ff	 DD	 -29			; ffffffe3H
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@String_val
$LN4@String_val:
  00100	5f		 DB	 95			; 0000005fH
  00101	41		 DB	 65			; 00000041H
  00102	6c		 DB	 108			; 0000006cH
  00103	70		 DB	 112			; 00000070H
  00104	72		 DB	 114			; 00000072H
  00105	6f		 DB	 111			; 0000006fH
  00106	78		 DB	 120			; 00000078H
  00107	79		 DB	 121			; 00000079H
  00108	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 65   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 66   : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 475  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 476  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 477  : 			_Alproxy(_Alval);

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0004f	50		 push	 eax
  00050	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 478  : 		this->_Orphan_all();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 479  : 		_Dest_val(_Alproxy, this->_Myproxy);

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	51		 push	 ecx
  00070	8d 55 e3	 lea	 edx, DWORD PTR __Alproxy$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
  00079	83 c4 08	 add	 esp, 8

; 480  : 		_Alproxy.deallocate(this->_Myproxy, 1);

  0007c	6a 01		 push	 1
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00087	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 481  : 		this->_Myproxy = 0;

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 482  : 		}

  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8b f4		 mov	 esi, esp
  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@String_val@2
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	8b ff		 npad	 2
$LN7@String_val@2:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN6@String_val@2
$LN6@String_val@2:
  000e8	e3 ff ff ff	 DD	 -29			; ffffffe3H
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN4@String_val@2
$LN4@String_val@2:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	41		 DB	 65			; 00000041H
  000f6	6c		 DB	 108			; 0000006cH
  000f7	70		 DB	 112			; 00000070H
  000f8	72		 DB	 114			; 00000072H
  000f9	6f		 DB	 111			; 0000006fH
  000fa	78		 DB	 120			; 00000078H
  000fb	79		 DB	 121			; 00000079H
  000fc	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 152  : 		{	// construct from pointer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 153  : 		_Init(_File, _Newfl);

  00064	6a 00		 push	 0
  00066	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 154  : 		}

  00072	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
tv88 = -248						; size = 4
tv89 = -244						; size = 4
$T174093 = -236						; size = 4
__File$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 218  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00021	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 219  : 		_Filet *_File;
; 220  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00049	75 27		 jne	 SHORT $LN1@open@2
  0004b	8b f4		 mov	 esi, esp
  0004d	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	89 45 e0	 mov	 DWORD PTR __File$[ebp], eax
  0006c	83 7d e0 00	 cmp	 DWORD PTR __File$[ebp], 0
  00070	75 04		 jne	 SHORT $LN2@open@2
$LN1@open@2:

; 221  : 			return (0);	// open failed

  00072	33 c0		 xor	 eax, eax
  00074	eb 6d		 jmp	 SHORT $LN3@open@2
$LN2@open@2:

; 222  : 
; 223  : 		_Init(_File, _Openfl);

  00076	6a 01		 push	 1
  00078	8b 45 e0	 mov	 eax, DWORD PTR __File$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 224  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00084	8b f4		 mov	 esi, esp
  00086	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T174093[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
  00096	3b f4		 cmp	 esi, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  000a3	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  000a9	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  000af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b6	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR tv88[ebp]
  000bc	52		 push	 edx
  000bd	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  000c2	83 c4 04	 add	 esp, 4
  000c5	50		 push	 eax
  000c6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  000ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d5	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T174093[ebp]
  000db	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 225  : 		return (this);	// open succeeded

  000e0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@open@2:

; 226  : 		}

  000e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ed	59		 pop	 ecx
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  000f7	3b ec		 cmp	 ebp, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T174093[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 04 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-252]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ; std::_DebugHeapDelete<std::locale::facet>
EXTRN	__imp_?_Decref@facet@locale@std@@QAEPAV123@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 409  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		if (_Ptr != 0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	74 1d		 je	 SHORT $LN2@locale

; 411  : 			_DELETE_CRT(_Ptr->_Decref());

  0002b	8b f4		 mov	 esi, esp
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Decref@facet@locale@std@@QAEPAV123@XZ
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ; std::_DebugHeapDelete<std::locale::facet>
  00045	83 c4 04	 add	 esp, 4
$LN2@locale:

; 412  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
EXTRN	__imp__fclose:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
__Ans$ = -20						; size = 4
_this$ = -8						; size = 4
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 292  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 293  : 		_Myt *_Ans = this;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR __Ans$[ebp], eax

; 294  : 		if (_Myfile == 0)

  00029	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00030	75 09		 jne	 SHORT $LN4@close@3

; 295  : 			_Ans = 0;

  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0

; 296  : 		else

  00039	eb 3a		 jmp	 SHORT $LN3@close@3
$LN4@close@3:

; 297  : 			{	// put any homing sequence and close file
; 298  : 			if (!_Endwrite())

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	75 07		 jne	 SHORT $LN2@close@3

; 299  : 				_Ans = 0;

  0004a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN2@close@3:

; 300  : 			if (fclose(_Myfile) != 0)

  00051	8b f4		 mov	 esi, esp
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00059	51		 push	 ecx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00060	83 c4 04	 add	 esp, 4
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	85 c0		 test	 eax, eax
  0006c	74 07		 je	 SHORT $LN3@close@3

; 301  : 				_Ans = 0;

  0006e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN3@close@3:

; 302  : 			}
; 303  : 		_Init(0, _Closefl);

  00075	6a 02		 push	 2
  00077	6a 00		 push	 0
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 304  : 		return (_Ans);

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Ans$[ebp]

; 305  : 		}

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:PROC
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA DD 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
; Function compile flags: /Odtp /RTCsu /ZI
_BSS	ENDS
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__Nw$162494 = -56					; size = 4
__Nr$162492 = -44					; size = 4
__Pn$162490 = -32					; size = 4
__Pb$162488 = -20					; size = 4
_this$ = -8						; size = 4
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 555  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 556  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 557  : 
; 558  : 		_Closef = _Which == _Openfl;

  00023	33 c0		 xor	 eax, eax
  00025	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00029	0f 94 c0	 sete	 al
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	88 41 50	 mov	 BYTE PTR [ecx+80], al

; 559  : 		_Wrotesome = false;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c6 40 49 00	 mov	 BYTE PTR [eax+73], 0

; 560  : 
; 561  : 		_Mysb::_Init();	// initialize stream buffer base object

  00039	8b f4		 mov	 esi, esp
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 562  : 
; 563  :  #ifndef _IORCNT
; 564  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 565  :   #define _IOWCNT _IOCNT
; 566  :  #endif /* _IORCNT */
; 567  : 
; 568  :   #pragma warning(push)
; 569  :   #pragma warning(disable: 6240)	/* prefast noise VSW 489858 */
; 570  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0004b	83 7d 08 00	 cmp	 DWORD PTR __File$[ebp], 0
  0004f	74 54		 je	 SHORT $LN1@Init
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	85 c0		 test	 eax, eax
  00058	74 4b		 je	 SHORT $LN1@Init

; 571  :   #pragma warning(pop)
; 572  : 
; 573  : 			{	// point inside C stream with [first, first + count) buffer
; 574  : 			_Elem **_Pb = (_Elem **)&_File->_IOBASE;

  0005a	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  0005d	83 c0 08	 add	 eax, 8
  00060	89 45 ec	 mov	 DWORD PTR __Pb$162488[ebp], eax

; 575  : 			_Elem **_Pn = (_Elem **)&_File->_IOPTR;

  00063	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  00066	89 45 e0	 mov	 DWORD PTR __Pn$162490[ebp], eax

; 576  : 			int *_Nr = (int *)&_File->_IORCNT;

  00069	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  0006c	83 c0 04	 add	 eax, 4
  0006f	89 45 d4	 mov	 DWORD PTR __Nr$162492[ebp], eax

; 577  : 			int *_Nw = (int *)&_File->_IOWCNT;

  00072	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  00075	83 c0 04	 add	 eax, 4
  00078	89 45 c8	 mov	 DWORD PTR __Nw$162494[ebp], eax

; 578  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  0007b	8b f4		 mov	 esi, esp
  0007d	8b 45 c8	 mov	 eax, DWORD PTR __Nw$162494[ebp]
  00080	50		 push	 eax
  00081	8b 4d e0	 mov	 ecx, DWORD PTR __Pn$162490[ebp]
  00084	51		 push	 ecx
  00085	8b 55 ec	 mov	 edx, DWORD PTR __Pb$162488[ebp]
  00088	52		 push	 edx
  00089	8b 45 d4	 mov	 eax, DWORD PTR __Nr$162492[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d e0	 mov	 ecx, DWORD PTR __Pn$162490[ebp]
  00090	51		 push	 ecx
  00091	8b 55 ec	 mov	 edx, DWORD PTR __Pb$162488[ebp]
  00094	52		 push	 edx
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
  0009e	3b f4		 cmp	 esi, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Init:

; 579  : 			}
; 580  : 
; 581  : 		_Myfile = _File;

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  000ab	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 582  : 		_State = _Stinit;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  000b7	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 583  : 		_Pcvt = 0;	// pointer to codecvt facet

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 584  : 		}

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
tv147 = -504						; size = 4
tv190 = -500						; size = 4
tv204 = -496						; size = 4
tv172 = -496						; size = 4
tv197 = -492						; size = 4
tv192 = -492						; size = 4
tv188 = -492						; size = 4
tv206 = -488						; size = 4
tv205 = -488						; size = 4
tv86 = -488						; size = 4
$T174110 = -480						; size = 4
$T174111 = -468						; size = 4
$T174112 = -456						; size = 4
$T174113 = -444						; size = 12
$T174114 = -424						; size = 12
$T174115 = -404						; size = 12
$T174116 = -381						; size = 1
$T174117 = -372						; size = 12
$T174120 = -349						; size = 1
$T174121 = -337						; size = 1
$T174122 = -325						; size = 1
$T174123 = -313						; size = 1
$T174128 = -304						; size = 4
__Count$162519 = -100					; size = 4
__Str$162506 = -88					; size = 32
__Dest$162502 = -48					; size = 4
__STRING_INC$162501 = -36				; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 587  : 		{	// put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ec 01 00
	00		 sub	 esp, 492		; 000001ecH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 08 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-504]
  00021	b9 7b 00 00 00	 mov	 ecx, 123		; 0000007bH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T174128[ebp], 0

; 588  : 		if (_Pcvt == 0 || !_Wrotesome)

  0004f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00056	74 0b		 je	 SHORT $LN14@Endwrite
  00058	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	0f b6 48 49	 movzx	 ecx, BYTE PTR [eax+73]
  0005f	85 c9		 test	 ecx, ecx
  00061	75 0c		 jne	 SHORT $LN15@Endwrite
$LN14@Endwrite:

; 589  : 			return (true);

  00063	b0 01		 mov	 al, 1
  00065	e9 09 03 00 00	 jmp	 $LN16@Endwrite

; 590  : 		else

  0006a	e9 04 03 00 00	 jmp	 $LN16@Endwrite
$LN15@Endwrite:

; 591  : 			{	// may have to put
; 592  : 			const int _STRING_INC = 8;

  0006f	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$162501[ebp], 8

; 593  : 			char *_Dest;
; 594  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00076	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0007b	8b f4		 mov	 esi, esp
  0007d	50		 push	 eax
  0007e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 10		 mov	 edx, DWORD PTR [eax]
  00083	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00089	ff d0		 call	 eax
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	89 85 20 fe ff
	ff		 mov	 DWORD PTR $T174110[ebp], eax
  00098	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0009d	89 85 2c fe ff
	ff		 mov	 DWORD PTR $T174111[ebp], eax
  000a3	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T174110[ebp]
  000a9	51		 push	 ecx
  000aa	8d 95 2c fe ff
	ff		 lea	 edx, DWORD PTR $T174111[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000b6	83 c4 08	 add	 esp, 8
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	74 07		 je	 SHORT $LN12@Endwrite

; 595  : 				return (false);

  000c0	32 c0		 xor	 al, al
  000c2	e9 ac 02 00 00	 jmp	 $LN16@Endwrite
$LN12@Endwrite:

; 596  : 
; 597  : 			string _Str(_STRING_INC, '\0');

  000c7	6a 00		 push	 0
  000c9	6a 08		 push	 8
  000cb	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  000ce	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN11@Endwrite:

; 598  : 			for (; ; )
; 599  : 				switch (_Pcvt->unshift(_State,
; 600  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  000da	8b f4		 mov	 esi, esp
  000dc	8d 45 d0	 lea	 eax, DWORD PTR __Dest$162502[ebp]
  000df	50		 push	 eax
  000e0	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T174113[ebp]
  000e6	51		 push	 ecx
  000e7	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  000ea	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000ef	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000f5	8b 95 18 fe ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  000fb	89 95 14 fe ff
	ff		 mov	 DWORD PTR tv188[ebp], edx
  00101	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00105	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv188[ebp]
  0010b	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  00110	8b f8		 mov	 edi, eax
  00112	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00115	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0011a	03 f8		 add	 edi, eax
  0011c	57		 push	 edi
  0011d	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR $T174114[ebp]
  00123	50		 push	 eax
  00124	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00127	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0012c	89 85 10 fe ff
	ff		 mov	 DWORD PTR tv204[ebp], eax
  00132	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv204[ebp]
  00138	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv190[ebp], ecx
  0013e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00142	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv190[ebp]
  00148	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  0014d	50		 push	 eax
  0014e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00151	83 c2 4c	 add	 edx, 76			; 0000004cH
  00154	52		 push	 edx
  00155	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	89 85 38 fe ff
	ff		 mov	 DWORD PTR $T174112[ebp], eax
  0016e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00172	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T174114[ebp]
  00178	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0017d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00181	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T174113[ebp]
  00187	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0018c	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR $T174112[ebp]
  00192	89 8d 08 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], ecx
  00198	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR tv147[ebp], 0
  0019f	74 1b		 je	 SHORT $LN7@Endwrite
  001a1	83 bd 08 fe ff
	ff 01		 cmp	 DWORD PTR tv147[ebp], 1
  001a8	74 19		 je	 SHORT $LN6@Endwrite
  001aa	83 bd 08 fe ff
	ff 03		 cmp	 DWORD PTR tv147[ebp], 3
  001b1	0f 84 6c 01 00
	00		 je	 $LN2@Endwrite
  001b7	e9 85 01 00 00	 jmp	 $LN1@Endwrite
$LN7@Endwrite:

; 601  : 				{	// test result of homing conversion
; 602  : 				case codecvt_base::ok:
; 603  : 					_Wrotesome = false;	// homed successfully

  001bc	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001bf	c6 40 49 00	 mov	 BYTE PTR [eax+73], 0
$LN6@Endwrite:

; 604  : 
; 605  : 				case codecvt_base::partial:	// fall through
; 606  : 					{	// put any generated bytes
; 607  : 					size_t _Count = _Dest - &*_Str.begin();

  001c3	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR $T174115[ebp]
  001c9	50		 push	 eax
  001ca	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  001cd	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001d2	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv205[ebp], eax
  001d8	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv205[ebp]
  001de	89 8d 14 fe ff
	ff		 mov	 DWORD PTR tv192[ebp], ecx
  001e4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001e8	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  001ee	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  001f3	8b 55 d0	 mov	 edx, DWORD PTR __Dest$162502[ebp]
  001f6	2b d0		 sub	 edx, eax
  001f8	89 55 9c	 mov	 DWORD PTR __Count$162519[ebp], edx
  001fb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ff	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T174115[ebp]
  00205	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 608  : 					if (0 < _Count && _Count !=
; 609  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  0020a	83 7d 9c 00	 cmp	 DWORD PTR __Count$162519[ebp], 0
  0020e	76 70		 jbe	 SHORT $LN18@Endwrite
  00210	8b f4		 mov	 esi, esp
  00212	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00215	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00218	51		 push	 ecx
  00219	8b 55 9c	 mov	 edx, DWORD PTR __Count$162519[ebp]
  0021c	52		 push	 edx
  0021d	6a 01		 push	 1
  0021f	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T174117[ebp]
  00225	50		 push	 eax
  00226	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00229	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0022e	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv206[ebp], eax
  00234	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv206[ebp]
  0023a	89 8d 14 fe ff
	ff		 mov	 DWORD PTR tv197[ebp], ecx
  00240	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00244	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR $T174128[ebp]
  0024a	83 ca 01	 or	 edx, 1
  0024d	89 95 d0 fe ff
	ff		 mov	 DWORD PTR $T174128[ebp], edx
  00253	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv197[ebp]
  00259	e8 00 00 00 00	 call	 ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
  0025e	50		 push	 eax
  0025f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00265	83 c4 10	 add	 esp, 16			; 00000010H
  00268	3b f4		 cmp	 esi, esp
  0026a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026f	39 45 9c	 cmp	 DWORD PTR __Count$162519[ebp], eax
  00272	74 0c		 je	 SHORT $LN18@Endwrite
  00274	c7 85 10 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv172[ebp], 1
  0027e	eb 0a		 jmp	 SHORT $LN19@Endwrite
$LN18@Endwrite:
  00280	c7 85 10 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN19@Endwrite:
  0028a	8a 85 10 fe ff
	ff		 mov	 al, BYTE PTR tv172[ebp]
  00290	88 85 83 fe ff
	ff		 mov	 BYTE PTR $T174116[ebp], al
  00296	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0029d	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR $T174128[ebp]
  002a3	83 e1 01	 and	 ecx, 1
  002a6	74 12		 je	 SHORT $LN26@Endwrite
  002a8	83 a5 d0 fe ff
	ff fe		 and	 DWORD PTR $T174128[ebp], -2 ; fffffffeH
  002af	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T174117[ebp]
  002b5	e8 00 00 00 00	 call	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN26@Endwrite:
  002ba	0f b6 95 83 fe
	ff ff		 movzx	 edx, BYTE PTR $T174116[ebp]
  002c1	85 d2		 test	 edx, edx
  002c3	74 21		 je	 SHORT $LN5@Endwrite

; 610  : 						return (false);	// write failed

  002c5	c6 85 a3 fe ff
	ff 00		 mov	 BYTE PTR $T174120[ebp], 0
  002cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d3	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  002d6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002db	8a 85 a3 fe ff
	ff		 mov	 al, BYTE PTR $T174120[ebp]
  002e1	e9 8d 00 00 00	 jmp	 $LN16@Endwrite
$LN5@Endwrite:

; 611  : 					if (!_Wrotesome)

  002e6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002e9	0f b6 48 49	 movzx	 ecx, BYTE PTR [eax+73]
  002ed	85 c9		 test	 ecx, ecx
  002ef	75 1e		 jne	 SHORT $LN4@Endwrite

; 612  : 						return (true);

  002f1	c6 85 af fe ff
	ff 01		 mov	 BYTE PTR $T174121[ebp], 1
  002f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002ff	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00302	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00307	8a 85 af fe ff
	ff		 mov	 al, BYTE PTR $T174121[ebp]
  0030d	eb 64		 jmp	 SHORT $LN16@Endwrite
$LN4@Endwrite:

; 613  : 					if (_Count == 0)

  0030f	83 7d 9c 00	 cmp	 DWORD PTR __Count$162519[ebp], 0
  00313	75 0c		 jne	 SHORT $LN3@Endwrite

; 614  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  00315	6a 00		 push	 0
  00317	6a 08		 push	 8
  00319	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  0031c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN3@Endwrite:

; 615  : 					break;

  00321	eb 3c		 jmp	 SHORT $LN8@Endwrite
$LN2@Endwrite:

; 616  : 					}
; 617  : 
; 618  : 				case codecvt_base::noconv:
; 619  : 					return (true);	// nothing to do

  00323	c6 85 bb fe ff
	ff 01		 mov	 BYTE PTR $T174122[ebp], 1
  0032a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00331	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00334	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00339	8a 85 bb fe ff
	ff		 mov	 al, BYTE PTR $T174122[ebp]
  0033f	eb 32		 jmp	 SHORT $LN16@Endwrite
$LN1@Endwrite:

; 620  : 
; 621  : 				default:
; 622  : 					return (false);	// conversion failed

  00341	c6 85 c7 fe ff
	ff 00		 mov	 BYTE PTR $T174123[ebp], 0
  00348	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0034f	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00352	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00357	8a 85 c7 fe ff
	ff		 mov	 al, BYTE PTR $T174123[ebp]
  0035d	eb 14		 jmp	 SHORT $LN16@Endwrite
$LN8@Endwrite:

; 623  : 				}

  0035f	e9 76 fd ff ff	 jmp	 $LN11@Endwrite

; 624  : 			}

  00364	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0036b	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  0036e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN16@Endwrite:

; 625  : 		}

  00373	52		 push	 edx
  00374	8b cd		 mov	 ecx, ebp
  00376	50		 push	 eax
  00377	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@Endwrite
  0037d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00382	58		 pop	 eax
  00383	5a		 pop	 edx
  00384	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00387	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038e	59		 pop	 ecx
  0038f	5f		 pop	 edi
  00390	5e		 pop	 esi
  00391	5b		 pop	 ebx
  00392	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00395	33 cd		 xor	 ecx, ebp
  00397	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039c	81 c4 f8 01 00
	00		 add	 esp, 504		; 000001f8H
  003a2	3b ec		 cmp	 ebp, esp
  003a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	c3		 ret	 0
  003ad	8d 49 00	 npad	 3
$LN31@Endwrite:
  003b0	02 00 00 00	 DD	 2
  003b4	00 00 00 00	 DD	 $LN30@Endwrite
$LN30@Endwrite:
  003b8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  003bc	04 00 00 00	 DD	 4
  003c0	00 00 00 00	 DD	 $LN27@Endwrite
  003c4	a8 ff ff ff	 DD	 -88			; ffffffa8H
  003c8	20 00 00 00	 DD	 32			; 00000020H
  003cc	00 00 00 00	 DD	 $LN28@Endwrite
$LN28@Endwrite:
  003d0	5f		 DB	 95			; 0000005fH
  003d1	53		 DB	 83			; 00000053H
  003d2	74		 DB	 116			; 00000074H
  003d3	72		 DB	 114			; 00000072H
  003d4	00		 DB	 0
$LN27@Endwrite:
  003d5	5f		 DB	 95			; 0000005fH
  003d6	44		 DB	 68			; 00000044H
  003d7	65		 DB	 101			; 00000065H
  003d8	73		 DB	 115			; 00000073H
  003d9	74		 DB	 116			; 00000074H
  003da	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR __Str$162506[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1:
  00008	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T174113[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2:
  00013	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T174114[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3:
  0001e	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T174115[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4:
  00029	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR $T174128[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	0f 84 12 00 00
	00		 je	 $LN25@Endwrite
  00038	83 a5 d0 fe ff
	ff fe		 and	 DWORD PTR $T174128[ebp], -2 ; fffffffeH
  0003f	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T174117[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN25@Endwrite:
  0004a	c3		 ret	 0
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a 04 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-508]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
EXTRN	__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 628  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 629  : 		if (_Newpcvt->always_noconv())

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?always_noconv@codecvt_base@std@@QBE_NXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0c		 je	 SHORT $LN2@Initcvt

; 630  : 			_Pcvt = 0;	// nothing to do

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 631  : 		else

  00046	eb 1b		 jmp	 SHORT $LN3@Initcvt
$LN2@Initcvt:

; 632  : 			{	// set up for nontrivial codecvt facet
; 633  : 			_Pcvt = _Newpcvt;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  0004e	89 48 44	 mov	 DWORD PTR [eax+68], ecx

; 634  : 			_Mysb::_Init();	// reset any buffering

  00051	8b f4		 mov	 esi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Initcvt:

; 635  : 			}
; 636  : 		}

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 640  : 		{	// restore buffer after putback

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 641  : 		if (_Mysb::eback() == &_Mychar)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 48	 add	 ecx, 72			; 00000048H
  0003b	3b c1		 cmp	 eax, ecx
  0003d	75 27		 jne	 SHORT $LN2@Reset_back

; 642  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0003f	8b f4		 mov	 esi, esp
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00047	51		 push	 ecx
  00048	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  0004e	50		 push	 eax
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00055	52		 push	 edx
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Reset_back:

; 643  : 		}

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 646  : 		{	// set up putback area

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 647  : 		if (_Mysb::eback() != &_Mychar)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 48	 add	 ecx, 72			; 00000048H
  0003b	3b c1		 cmp	 eax, ecx
  0003d	74 30		 je	 SHORT $LN1@Set_back

; 648  : 			{	// save current get buffer
; 649  : 			_Set_eback = _Mysb::eback();

  0003f	8b f4		 mov	 esi, esp
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 650  : 			_Set_egptr = _Mysb::egptr();

  00057	8b f4		 mov	 esi, esp
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	89 41 40	 mov	 DWORD PTR [ecx+64], eax
$LN1@Set_back:

; 651  : 			}
; 652  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 49	 add	 eax, 73			; 00000049H
  00075	8b f4		 mov	 esi, esp
  00077	50		 push	 eax
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 48	 add	 ecx, 72			; 00000048H
  0007e	51		 push	 ecx
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00082	83 c2 48	 add	 edx, 72			; 00000048H
  00085	52		 push	 edx
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 653  : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
PUBLIC	?clear@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::clear
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Tidy@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ PROC ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Tidy, COMDAT
; _this$ = ecx

; 1496 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1497 : 		clear();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?clear@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::clear

; 1498 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Tidy@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ ENDP ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	?_Prevnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Prevnode
PUBLIC	?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocate
PUBLIC	??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@ABV01@@Z ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z$0
__ehfuncinfo$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
_TEXT	SEGMENT
$T174152 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z PROC ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	51		 push	 ecx
  00043	8b cc		 mov	 ecx, esp
  00045	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T174152[ebp], esp
  0004b	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@ABV01@@Z ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 494  : 		this->_Mysize = 0;

  00063	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0006d	6a 01		 push	 1
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocate
  0007a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00080	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode
  0008c	83 c4 04	 add	 esp, 4
  0008f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00095	89 08		 mov	 DWORD PTR [eax], ecx

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00097	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Prevnode
  000a3	83 c4 04	 add	 esp, 4
  000a6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ac	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 		}

  000ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000cc	3b ec		 cmp	 ebp, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
__ehhandler$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z ENDP ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::deallocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ PROC ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >, COMDAT
; _this$ = ecx

; 501  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00049	6a 01		 push	 1
  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00051	51		 push	 ecx
  00052	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00058	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::deallocate

; 503  : 		}

  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00064	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
__ehhandler$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@XZ PROC ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@XZ ENDP ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>
_TEXT	ENDS
PUBLIC	??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 342  : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 343  : 		return ((reference)**(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*

; 344  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	?_Stz@?$fpos@H@std@@0HB				; std::fpos<int>::_Stz
;	COMDAT ?_Stz@?$fpos@H@std@@0HB
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
?_Stz@?$fpos@H@std@@0HB DD 00H				; std::fpos<int>::_Stz
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  0002e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0003b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Stz@?$fpos@H@std@@0HB ; std::fpos<int>::_Stz
  0004b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 41   : 		}

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@H_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__State$ = 8						; size = 4
__Fileposition$ = 12					; size = 8
??0?$fpos@H@std@@QAE@H_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00039	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0003c	8b 55 10	 mov	 edx, DWORD PTR __Fileposition$[ebp+4]
  0003f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00048	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 46   : 		}

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
??0?$fpos@H@std@@QAE@H_J@Z ENDP				; std::fpos<int>::fpos<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?state@?$fpos@H@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?state@?$fpos@H@std@@QBEHXZ PROC			; std::fpos<int>::state, COMDAT
; _this$ = ecx

; 49   : 		{	// return conversion state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 		return (_Mystate);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 51   : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?state@?$fpos@H@std@@QBEHXZ ENDP			; std::fpos<int>::state
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?seekpos@?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?seekpos@?$fpos@H@std@@QBE_JXZ PROC			; std::fpos<int>::seekpos, COMDAT
; _this$ = ecx

; 59   : 		{	// return C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 60   : 		return (_Fpos);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00029	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 61   : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?seekpos@?$fpos@H@std@@QBE_JXZ ENDP			; std::fpos<int>::seekpos
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 64   : 		{	// return offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00029	99		 cdq
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	03 01		 add	 eax, DWORD PTR [ecx]
  0002f	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 66   : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 934  : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 935  : 		if (_Count == npos)

  00023	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00026	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0002c	75 08		 jne	 SHORT $LN2@assign

; 936  : 			_Xlen();	// result too long

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@assign:

; 937  : 
; 938  : 		if (_Grow(_Count))

  00036	6a 00		 push	 0
  00038	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00044	0f b6 c8	 movzx	 ecx, al
  00047	85 c9		 test	 ecx, ecx
  00049	74 1f		 je	 SHORT $LN1@assign

; 939  : 			{	// make room and assign new stuff
; 940  : 			_Chassign(0, _Count, _Ch);

  0004b	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	51		 push	 ecx
  00054	6a 00		 push	 0
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 941  : 			_Eos(_Count);

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00061	50		 push	 eax
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 942  : 			}
; 943  : 		return (*this);

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 944  : 		}

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1910 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1911 : 		if (_Count == 1)

  00023	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00027	75 1a		 jne	 SHORT $LN2@Chassign

; 1912 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00029	8d 45 10	 lea	 eax, DWORD PTR __Ch$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  00035	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0003e	83 c4 08	 add	 esp, 8

; 1913 : 		else

  00041	eb 1d		 jmp	 SHORT $LN3@Chassign
$LN2@Chassign:

; 1914 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  00043	0f b6 45 10	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  00054	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADPADID@Z ; std::char_traits<char>::assign
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Chassign:

; 1915 : 		}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	0f be 4d 10	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 527  : 		_Left = _Right;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	88 10		 mov	 BYTE PTR [eax], dl

; 528  : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T174193 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00023	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T174193[ebp], 0
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00030	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00033	8d 95 2f ff ff
	ff		 lea	 edx, DWORD PTR $T174193[ebp]
  00039	52		 push	 edx
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  00042	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0004b	83 c4 08	 add	 esp, 8

; 1954 : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv129 = -208						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1959 : 		if (max_size() < _Newsize)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0002b	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0002e	73 08		 jae	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	3b 4d 08	 cmp	 ecx, DWORD PTR __Newsize$[ebp]
  00041	73 15		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0004d	52		 push	 edx
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00056	eb 53		 jmp	 SHORT $LN4@Grow
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00058	0f b6 45 0c	 movzx	 eax, BYTE PTR __Trim$[ebp]
  0005c	85 c0		 test	 eax, eax
  0005e	74 3b		 je	 SHORT $LN3@Grow
  00060	83 7d 08 10	 cmp	 DWORD PTR __Newsize$[ebp], 16 ; 00000010H
  00064	73 35		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00066	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0006c	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0006f	73 0b		 jae	 SHORT $LN9@Grow
  00071	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00074	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], edx
  0007a	eb 0c		 jmp	 SHORT $LN10@Grow
$LN9@Grow:
  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00082	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
$LN10@Grow:
  00088	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv129[ebp]
  0008e	52		 push	 edx
  0008f	6a 01		 push	 1
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00099	eb 10		 jmp	 SHORT $LN4@Grow
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  0009b	83 7d 08 00	 cmp	 DWORD PTR __Newsize$[ebp], 0
  0009f	75 0a		 jne	 SHORT $LN4@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  000a1	6a 00		 push	 0
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  000ab	33 c0		 xor	 eax, eax
  000ad	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  000b0	1b c0		 sbb	 eax, eax
  000b2	f7 d8		 neg	 eax
$LN8@Grow:

; 1969 : 		}

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2002 : 		{	// determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0002a	72 0e		 jb	 SHORT $LN3@Myptr
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], edx
  00038	eb 0c		 jmp	 SHORT $LN4@Myptr
$LN3@Myptr:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], eax
$LN4@Myptr:
  00046	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv82[ebp]

; 2005 : 		}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2014 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2015 : 		_Xlength_error("string too long");

  00023	8b f4		 mov	 esi, esp
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Xlen:

; 2016 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2019 : 		{	// report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00023	8b f4		 mov	 esi, esp
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Xran:

; 2021 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@0@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>,std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
PUBLIC	?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Orphan_ptr
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?clear@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnode$ = -32						; size = 4
__Pnext$ = -20						; size = 4
_this$ = -8						; size = 4
?clear@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ PROC ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);

  00023	6a 00		 push	 0
  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Orphan_ptr

; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode
  0003d	83 c4 04	 add	 esp, 4
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	89 55 e0	 mov	 DWORD PTR __Pnode$[ebp], edx

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode
  00051	83 c4 04	 add	 esp, 4
  00054	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0005a	89 08		 mov	 DWORD PTR [eax], ecx

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Prevnode
  00068	83 c4 04	 add	 esp, 4
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00071	89 08		 mov	 DWORD PTR [eax], ecx

; 1105 : 		this->_Mysize = 0;

  00073	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0007d	eb 06		 jmp	 SHORT $LN3@clear
$LN2@clear:

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  0007f	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00082	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN3@clear:
  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d e0	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0008b	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0008e	74 37		 je	 SHORT $LN4@clear

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00090	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode
  00099	83 c4 04	 add	 esp, 4
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	89 4d ec	 mov	 DWORD PTR __Pnext$[ebp], ecx

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);

  000a1	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@0@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>,std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
  000b1	83 c4 08	 add	 esp, 8

; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  000b4	6a 01		 push	 1
  000b6	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000c0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::deallocate

; 1113 : 			}

  000c5	eb b8		 jmp	 SHORT $LN2@clear
$LN4@clear:

; 1114 : 		}

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d0	3b ec		 cmp	 ebp, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?clear@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAEXXZ ENDP ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::clear
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z PROC ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?_Nextnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Nextnode
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z PROC ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00021	83 c0 04	 add	 eax, 4

; 567  : 		}

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Prevnode@?$_List_val@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@SAAAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Prevnode
_TEXT	ENDS
PUBLIC	??$?0U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
PUBLIC	??$?0PAVGameAction@ReplayTool@@@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVGameAction@ReplayTool@@@1@@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node><ReplayTool::GameAction *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z$0
__ehfuncinfo$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
_TEXT	SEGMENT
$T174214 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z PROC ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >, COMDAT
; _this$ = ecx

; 444  : 		{	// construct allocators and proxy from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00065	e8 00 00 00 00	 call	 ??$?0PAVGameAction@ReplayTool@@@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVGameAction@ReplayTool@@@1@@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node><ReplayTool::GameAction *>
  0006a	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 0d	 add	 ecx, 13			; 0000000dH
  00074	e8 00 00 00 00	 call	 ??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@ABV01@@Z ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>

; 445  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 446  : 			_Alproxy(_Alnod);

  00079	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007f	50		 push	 eax
  00080	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00083	e8 00 00 00 00	 call	 ??$?0U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>

; 447  : 		this->_Myproxy = _Alproxy.allocate(1);

  00088	6a 01		 push	 1
  0008a	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0008d	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00092	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	89 01		 mov	 DWORD PTR [ecx], eax

; 448  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

  00097	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T174214[ebp]
  0009d	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  000a2	50		 push	 eax
  000a3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	51		 push	 ecx
  000a9	8d 55 e3	 lea	 edx, DWORD PTR __Alproxy$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 449  : 		this->_Myproxy->_Mycont = this;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	89 11		 mov	 DWORD PTR [ecx], edx

; 450  : 		}

  000bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	52		 push	 edx
  000ca	8b cd		 mov	 ecx, ebp
  000cc	50		 push	 eax
  000cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@List_nod
  000d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d8	58		 pop	 eax
  000d9	5a		 pop	 edx
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
  000fb	90		 npad	 1
$LN7@List_nod:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN6@List_nod
$LN6@List_nod:
  00104	e3 ff ff ff	 DD	 -29			; ffffffe3H
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN4@List_nod
$LN4@List_nod:
  00110	5f		 DB	 95			; 0000005fH
  00111	41		 DB	 65			; 00000041H
  00112	6c		 DB	 108			; 0000006cH
  00113	70		 DB	 112			; 00000070H
  00114	72		 DB	 114			; 00000072H
  00115	6f		 DB	 111			; 0000006fH
  00116	78		 DB	 120			; 00000078H
  00117	79		 DB	 121			; 00000079H
  00118	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@V?$allocator@PAVGameAction@ReplayTool@@@1@@Z ENDP ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >, COMDAT
; _this$ = ecx

; 453  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 454  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 455  : 			_Alproxy(_Alnod);

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004f	50		 push	 eax
  00050	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>

; 456  : 		this->_Orphan_all();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 457  : 		_Dest_val(_Alproxy, this->_Myproxy);

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	51		 push	 ecx
  00070	8d 55 e3	 lea	 edx, DWORD PTR __Alproxy$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
  00079	83 c4 08	 add	 esp, 8

; 458  : 		_Alproxy.deallocate(this->_Myproxy, 1);

  0007c	6a 01		 push	 1
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00087	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 459  : 		this->_Myproxy = 0;

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 460  : 		}

  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8b f4		 mov	 esi, esp
  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@List_nod@2
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	8b ff		 npad	 2
$LN7@List_nod@2:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN6@List_nod@2
$LN6@List_nod@2:
  000e8	e3 ff ff ff	 DD	 -29			; ffffffe3H
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN4@List_nod@2
$LN4@List_nod@2:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	41		 DB	 65			; 00000041H
  000f6	6c		 DB	 108			; 0000006cH
  000f7	70		 DB	 112			; 00000070H
  000f8	72		 DB	 114			; 00000072H
  000f9	6f		 DB	 111			; 0000006fH
  000fa	78		 DB	 120			; 00000078H
  000fb	79		 DB	 121			; 00000079H
  000fc	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::~_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$allocator@PAVGameAction@ReplayTool@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ReplayTool::GameAction *>::allocator<ReplayTool::GameAction *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00023	6a 00		 push	 0
  00025	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
  0002e	83 c4 08	 add	 esp, 8

; 188  : 		}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base12@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 325  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >

; 326  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base12@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NA@ICLOEHKI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
PUBLIC	??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@ICLOEHKI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr@
CONST	SEGMENT
??_C@_1NA@ICLOEHKI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ':'
	DB	00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 70   : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 71   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 72   : 		if (this->_Getcont() == 0
; 73   : 			|| this->_Ptr == 0
; 74   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 75   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002b	85 c0		 test	 eax, eax
  0002d	74 44		 je	 SHORT $LN4@operator
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00036	74 3b		 je	 SHORT $LN4@operator
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  0004d	72 24		 jb	 SHORT $LN4@operator
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00057	8b c8		 mov	 ecx, eax
  00059	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0005e	8b f0		 mov	 esi, eax
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00068	03 70 14	 add	 esi, DWORD PTR [eax+20]
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00071	77 78		 ja	 SHORT $LN2@operator
$LN4@operator:

; 77   : 			{	// report error
; 78   : 			_DEBUG_ERROR("string iterator not dereferencable");

  00073	8b f4		 mov	 esi, esp
  00075	6a 4e		 push	 78			; 0000004eH
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 79   : 			_SCL_SECURE_OUT_OF_RANGE;

  00091	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
  00096	85 c0		 test	 eax, eax
  00098	74 04		 je	 SHORT $LN8@operator
  0009a	33 c9		 xor	 ecx, ecx
  0009c	75 28		 jne	 SHORT $LN9@operator
$LN8@operator:
  0009e	8b f4		 mov	 esi, esp
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
  000a5	6a 00		 push	 0
  000a7	6a 4f		 push	 79			; 0000004fH
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000ae	6a 02		 push	 2
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000b6	83 c4 14	 add	 esp, 20			; 00000014H
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	83 f8 01	 cmp	 eax, 1
  000c3	75 01		 jne	 SHORT $LN9@operator
  000c5	cc		 int	 3
$LN9@operator:
  000c6	8b f4		 mov	 esi, esp
  000c8	6a 00		 push	 0
  000ca	6a 4f		 push	 79			; 0000004fH
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@GEGAMENF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@ICLOEHKI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000e1	83 c4 14	 add	 esp, 20			; 00000014H
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 80   : 			}
; 81   : 
; 82   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 83   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 84   : 		_SCL_SECURE_VALIDATE_RANGE(
; 85   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 86   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 87   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 88   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 89   : 
; 90   : 		__analysis_assume(this->_Ptr != 0);

  000eb	33 c0		 xor	 eax, eax
  000ed	75 fc		 jne	 SHORT $LN2@operator

; 91   : 
; 92   : 		return (*this->_Ptr);

  000ef	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 93   : 		}

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000fe	3b ec		 cmp	 ebp, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 162  : 		{	// get owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 163  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	75 0c		 jne	 SHORT $LN3@Getcont
  0002b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
  00035	eb 0d		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
$LN4@Getcont:
  00044	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]

; 164  : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00023	6a 00		 push	 0
  00025	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
  0002e	83 c4 08	 add	 esp, 8

; 188  : 		}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1515 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00029	e8 00 00 00 00	 call	 ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size
  0002e	89 45 ec	 mov	 DWORD PTR __Num$[ebp], eax

; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00031	83 7d ec 01	 cmp	 DWORD PTR __Num$[ebp], 1
  00035	77 0c		 ja	 SHORT $LN3@max_size
  00037	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  00041	eb 0c		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00043	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  00046	83 e8 01	 sub	 eax, 1
  00049	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
$LN4@max_size:
  0004f	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]

; 1518 : 		}

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv185 = -248						; size = 4
tv184 = -248						; size = 4
__Ptr$ = -48						; size = 4
__Newres$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00022	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00049	83 c8 0f	 or	 eax, 15			; 0000000fH
  0004c	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax

; 1920 : 		if (max_size() < _Newres)

  0004f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00057	3b 45 dc	 cmp	 eax, DWORD PTR __Newres$[ebp]
  0005a	73 08		 jae	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0005f	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax
  00062	eb 52		 jmp	 SHORT $LN8@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00064	8b 45 dc	 mov	 eax, DWORD PTR __Newres$[ebp]
  00067	33 d2		 xor	 edx, edx
  00069	b9 03 00 00 00	 mov	 ecx, 3
  0006e	f7 f1		 div	 ecx
  00070	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00073	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00076	d1 e9		 shr	 ecx, 1
  00078	3b c8		 cmp	 ecx, eax
  0007a	77 02		 ja	 SHORT $LN7@Copy
  0007c	eb 38		 jmp	 SHORT $LN8@Copy
$LN7@Copy:

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0007e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  00084	d1 ee		 shr	 esi, 1
  00086	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0008e	2b c6		 sub	 eax, esi
  00090	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00096	77 13		 ja	 SHORT $LN5@Copy

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00098	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0009e	d1 e9		 shr	 ecx, 1
  000a0	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  000a6	89 4d dc	 mov	 DWORD PTR __Newres$[ebp], ecx

; 1927 : 		else

  000a9	eb 0b		 jmp	 SHORT $LN8@Copy
$LN5@Copy:

; 1928 : 			_Newres = max_size();	// settle for max_size()

  000ab	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000b3	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  000bd	8b 45 dc	 mov	 eax, DWORD PTR __Newres$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	50		 push	 eax
  000c4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000ca	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000cf	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv184[ebp], eax
  000d5	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv184[ebp]
  000db	89 4d d0	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000de	eb 66		 jmp	 SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL

  000e0	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000e3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000e6	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax

; 1935 : 			_TRY_BEGIN

  000e9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  000ed	8b 45 dc	 mov	 eax, DWORD PTR __Newres$[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	50		 push	 eax
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000fa	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000ff	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv185[ebp], eax
  00105	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv185[ebp]
  0010b	89 4d d0	 mov	 DWORD PTR __Ptr$[ebp], ecx
  0010e	eb 22		 jmp	 SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  00110	6a 00		 push	 0
  00112	6a 01		 push	 1
  00114	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1939 : 			_RERAISE;

  0011c	6a 00		 push	 0
  0011e	6a 00		 push	 0
  00120	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1940 : 			_CATCH_END

  00125	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  0012c	b8 00 00 00 00	 mov	 eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
  00131	c3		 ret	 0
$LN14@Copy:
  00132	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 1941 : 		_CATCH_END

  00139	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00140	b8 00 00 00 00	 mov	 eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
  00145	c3		 ret	 0
$LN12@Copy:
  00146	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  0014d	83 7d 0c 00	 cmp	 DWORD PTR __Oldlen$[ebp], 0
  00151	76 19		 jbe	 SHORT $LN1@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  00153	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  00156	50		 push	 eax
  00157	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0015f	50		 push	 eax
  00160	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Copy:

; 1945 : 		_Tidy(true);

  0016c	6a 00		 push	 0
  0016e	6a 01		 push	 1
  00170	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1946 : 		this->_Bx._Ptr = _Ptr;

  00178	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0017b	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0017e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1947 : 		this->_Myres = _Newres;

  00181	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00184	8b 4d dc	 mov	 ecx, DWORD PTR __Newres$[ebp]
  00187	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1948 : 		_Eos(_Oldlen);

  0018a	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  0018d	50		 push	 eax
  0018e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 1949 : 		}

  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  001aa	3b ec		 cmp	 ebp, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 04 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-252]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00023	6a 00		 push	 0
  00025	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0002e	83 c4 08	 add	 esp, 8

; 188  : 		}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
EXTRN	__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z$0
__ehfuncinfo$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Cont$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z PROC ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 1527 : 		{	// orphan iterators with specified node pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00021	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1528 : 		_Lockit _Lock(_LOCK_DEBUG);

  00042	8b f4		 mov	 esi, esp
  00044	6a 03		 push	 3
  00046	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1529 : 		const_iterator **_Pnext = (const_iterator **)_Cont._Getpfirst();

  0005d	8b f4		 mov	 esi, esp
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR __Cont$[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	89 45 d4	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1530 : 		if (_Pnext != 0)

  00072	83 7d d4 00	 cmp	 DWORD PTR __Pnext$[ebp], 0
  00076	74 57		 je	 SHORT $LN6@Orphan_ptr
$LN5@Orphan_ptr:

; 1531 : 			while (*_Pnext != 0)

  00078	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$[ebp]
  0007b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007e	74 4f		 je	 SHORT $LN6@Orphan_ptr

; 1532 : 				if ((*_Pnext)->_Ptr == this->_Myhead
; 1533 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008b	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0008e	74 13		 je	 SHORT $LN2@Orphan_ptr
  00090	83 7d 0c 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00094	74 1c		 je	 SHORT $LN3@Orphan_ptr
  00096	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0009e	3b 55 0c	 cmp	 edx, DWORD PTR __Ptr$[ebp]
  000a1	74 0f		 je	 SHORT $LN3@Orphan_ptr
$LN2@Orphan_ptr:

; 1534 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

  000a3	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  000ad	89 45 d4	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1535 : 				else

  000b0	eb 1b		 jmp	 SHORT $LN1@Orphan_ptr
$LN3@Orphan_ptr:

; 1536 : 					{	// orphan the iterator
; 1537 : 					(*_Pnext)->_Clrcont();

  000b2	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	e8 00 00 00 00	 call	 ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont

; 1538 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

  000bc	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  000c6	8b 4d d4	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  000c9	8b 10		 mov	 edx, DWORD PTR [eax]
  000cb	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@Orphan_ptr:

; 1539 : 					}

  000cd	eb a9		 jmp	 SHORT $LN5@Orphan_ptr
$LN6@Orphan_ptr:

; 1540 : 		}

  000cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d6	8b f4		 mov	 esi, esp
  000d8	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000e1	3b f4		 cmp	 esi, esp
  000e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e8	52		 push	 edx
  000e9	8b cd		 mov	 ecx, ebp
  000eb	50		 push	 eax
  000ec	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Orphan_ptr
  000f2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f7	58		 pop	 eax
  000f8	5a		 pop	 edx
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00103	59		 pop	 ecx
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0010d	3b ec		 cmp	 ebp, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
  0011a	8b ff		 npad	 2
$LN13@Orphan_ptr:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN12@Orphan_ptr
$LN12@Orphan_ptr:
  00124	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN10@Orphan_ptr
$LN10@Orphan_ptr:
  00130	5f		 DB	 95			; 0000005fH
  00131	4c		 DB	 76			; 0000004cH
  00132	6f		 DB	 111			; 0000006fH
  00133	63		 DB	 99			; 00000063H
  00134	6b		 DB	 107			; 0000006bH
  00135	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_ptr@?$list@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@QBEXAAV12@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z ENDP ; std::list<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Orphan_ptr
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 157  : 		{	// disown owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 		_Myproxy = 0;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 159  : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 167  : 		{	// get address of remaining iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 168  : 		return (&_Mynextiter);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4

; 169  : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 50   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 51   : 		{	// construct with pointer _Parg
; 52   : 		this->_Adopt(_Pstring);

  00051	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00054	50		 push	 eax
  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 53   : 		this->_Ptr = _Parg;

  0005d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00063	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 54   : 		}

  00066	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
__ehhandler$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$72559 = -44					; size = 4
__Parent_proxy$72557 = -32				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 136  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00021	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 		if (_Parent != 0)

  00042	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  00046	74 6b		 je	 SHORT $LN3@Adopt

; 138  : 			{	// have a parent, do adoption
; 139  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  00048	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	89 4d e0	 mov	 DWORD PTR __Parent_proxy$72557[ebp], ecx

; 140  : 
; 141  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 142  : 			if (_Myproxy != _Parent_proxy)

  00050	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	3b 4d e0	 cmp	 ecx, DWORD PTR __Parent_proxy$72557[ebp]
  00058	74 59		 je	 SHORT $LN3@Adopt

; 143  : 				{	// change parentage
; 144  : 				_Lockit _Lock(_LOCK_DEBUG);

  0005a	8b f4		 mov	 esi, esp
  0005c	6a 03		 push	 3
  0005e	8d 4d d4	 lea	 ecx, DWORD PTR __Lock$72559[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 145  : 				_Orphan_me();

  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 146  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4d e0	 mov	 ecx, DWORD PTR __Parent_proxy$72557[ebp]
  00083	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00086	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 147  : 				_Parent_proxy->_Myfirstiter = this;

  00089	8b 45 e0	 mov	 eax, DWORD PTR __Parent_proxy$72557[ebp]
  0008c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 148  : 				_Myproxy = _Parent_proxy;

  00092	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 4d e0	 mov	 ecx, DWORD PTR __Parent_proxy$72557[ebp]
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 149  : 				}

  0009a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a1	8b f4		 mov	 esi, esp
  000a3	8d 4d d4	 lea	 ecx, DWORD PTR __Lock$72559[ebp]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Adopt:

; 150  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 151  : 			_Myproxy = _Parent_proxy;
; 152  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 153  : 			}
; 154  : 		}

  000b3	52		 push	 edx
  000b4	8b cd		 mov	 ecx, ebp
  000b6	50		 push	 eax
  000b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Adopt
  000bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c2	58		 pop	 eax
  000c3	5a		 pop	 edx
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 04 00	 ret	 4
  000e5	8d 49 00	 npad	 3
$LN9@Adopt:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN8@Adopt
$LN8@Adopt:
  000f0	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN6@Adopt
$LN6@Adopt:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d d4	 lea	 ecx, DWORD PTR __Lock$72559[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 111  : 		{	// construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 112  : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  00023	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR __Count$[ebp], -1

; 219  : 		return (0 < _Count ? _Count : 1);

  0002a	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0002e	76 0b		 jbe	 SHORT $LN3@max_size@2
  00030	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  00033	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00039	eb 0a		 jmp	 SHORT $LN4@max_size@2
$LN3@max_size@2:
  0003b	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
  00045	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xdebug
;	COMDAT ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z PROC ; std::_DebugHeapDelete<std::locale::facet>, COMDAT

; 56   : 	{	// delete from the debug CRT heap even if operator delete exists

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 57   : 	if (_Ptr != 0)

  0001e	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00022	74 2d		 je	 SHORT $LN2@DebugHeapD

; 58   : 		{	// worth deleting
; 59   : 		_Ptr->~_Ty();

  00024	8b f4		 mov	 esi, esp
  00026	6a 00		 push	 0
  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	ff d0		 call	 eax
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 60   : 		// delete as _NORMAL_BLOCK, not _CRT_BLOCK, since we might have
; 61   : 		// facets allocated by normal new.
; 62   : 		free(_Ptr);

  0003b	8b f4		 mov	 esi, esp
  0003d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00040	50		 push	 eax
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00047	83 c4 04	 add	 esp, 4
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@DebugHeapD:

; 63   : 		}
; 64   : 	}

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ENDP ; std::_DebugHeapDelete<std::locale::facet>
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -352						; size = 8
tv293 = -345						; size = 1
tv286 = -345						; size = 1
tv345 = -344						; size = 8
tv292 = -344						; size = 4
tv285 = -344						; size = 4
tv291 = -340						; size = 4
tv288 = -340						; size = 8
tv284 = -340						; size = 4
tv331 = -336						; size = 8
tv290 = -336						; size = 4
tv283 = -336						; size = 4
tv287 = -332						; size = 4
tv137 = -332						; size = 4
tv289 = -329						; size = 1
tv282 = -329						; size = 1
$T174337 = -324						; size = 4
$T174338 = -312						; size = 4
$T174339 = -300						; size = 4
$T174340 = -288						; size = 4
$T174341 = -276						; size = 4
__Ok$ = -72						; size = 8
__Pad$ = -56						; size = 8
__Count$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd a0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-352]
  00021	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;

  00041	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  00048	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length
  00051	83 c4 04	 add	 esp, 4
  00054	33 c9		 xor	 ecx, ecx
  00056	89 45 d8	 mov	 DWORD PTR __Count$[ebp], eax
  00059	89 4d dc	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv331[ebp], eax
  0007e	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv331[ebp+4], edx
  00084	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR tv331[ebp+4], 0
  0008b	7c 79		 jl	 SHORT $LN17@operator@2
  0008d	7f 09		 jg	 SHORT $LN25@operator@2
  0008f	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv331[ebp], 0
  00096	76 6e		 jbe	 SHORT $LN17@operator@2
$LN25@operator@2:
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv345[ebp], eax
  000ba	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv345[ebp+4], edx
  000c0	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR tv345[ebp+4]
  000c6	3b 45 dc	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000c9	7c 3b		 jl	 SHORT $LN17@operator@2
  000cb	7f 0b		 jg	 SHORT $LN26@operator@2
  000cd	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv345[ebp]
  000d3	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d6	76 2e		 jbe	 SHORT $LN17@operator@2
$LN26@operator@2:
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e0	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e3	8b f4		 mov	 esi, esp
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	2b 45 d8	 sub	 eax, DWORD PTR __Count$[ebp]
  000f5	1b 55 dc	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000f8	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  000fe	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00104	eb 14		 jmp	 SHORT $LN18@operator@2
$LN17@operator@2:
  00106	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
  00110	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp+4], 0
$LN18@operator@2:
  0011a	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00120	89 4d c8	 mov	 DWORD PTR __Pad$[ebp], ecx
  00123	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00129	89 55 cc	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

  0012c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0012f	50		 push	 eax
  00130	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00133	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00138	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

  0013f	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00142	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
  00147	83 f8 ff	 cmp	 eax, -1
  0014a	75 0e		 jne	 SHORT $LN14@operator@2

; 777  : 		_State |= ios_base::badbit;

  0014c	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  0014f	83 c8 04	 or	 eax, 4
  00152	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 778  : 	else

  00155	e9 e4 02 00 00	 jmp	 $LN13@operator@2
$LN14@operator@2:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN

  0015a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0015e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00161	8b 08		 mov	 ecx, DWORD PTR [eax]
  00163	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00166	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00169	8b f4		 mov	 esi, esp
  0016b	8b ca		 mov	 ecx, edx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017a	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00180	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00186	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0018b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0018e	0f 84 eb 00 00
	00		 je	 $LN11@operator@2
  00194	eb 12		 jmp	 SHORT $LN10@operator@2
$LN9@operator@2:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00196	8b 45 c8	 mov	 eax, DWORD PTR __Pad$[ebp]
  00199	83 e8 01	 sub	 eax, 1
  0019c	8b 4d cc	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0019f	83 d9 00	 sbb	 ecx, 0
  001a2	89 45 c8	 mov	 DWORD PTR __Pad$[ebp], eax
  001a5	89 4d cc	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN10@operator@2:
  001a8	83 7d cc 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001ac	0f 8c cd 00 00
	00		 jl	 $LN11@operator@2
  001b2	7f 0a		 jg	 SHORT $LN27@operator@2
  001b4	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b8	0f 86 c1 00 00
	00		 jbe	 $LN11@operator@2
$LN27@operator@2:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  001be	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c9	8b f4		 mov	 esi, esp
  001cb	8b ca		 mov	 ecx, edx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d3	3b f4		 cmp	 esi, esp
  001d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001da	88 85 b7 fe ff
	ff		 mov	 BYTE PTR tv282[ebp], al
  001e0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001eb	8b f4		 mov	 esi, esp
  001ed	8b ca		 mov	 ecx, edx
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f5	3b f4		 cmp	 esi, esp
  001f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fc	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv283[ebp], eax
  00202	8b f4		 mov	 esi, esp
  00204	0f b6 85 b7 fe
	ff ff		 movzx	 eax, BYTE PTR tv282[ebp]
  0020b	50		 push	 eax
  0020c	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv283[ebp]
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00218	3b f4		 cmp	 esi, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021f	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00225	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0022b	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T174337[ebp], ecx
  00231	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00236	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  0023c	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv285[ebp]
  00242	89 95 c8 fe ff
	ff		 mov	 DWORD PTR $T174338[ebp], edx
  00248	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T174337[ebp]
  0024e	50		 push	 eax
  0024f	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T174338[ebp]
  00255	51		 push	 ecx
  00256	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0025b	83 c4 08	 add	 esp, 8
  0025e	88 85 a7 fe ff
	ff		 mov	 BYTE PTR tv286[ebp], al
  00264	0f b6 95 a7 fe
	ff ff		 movzx	 edx, BYTE PTR tv286[ebp]
  0026b	85 d2		 test	 edx, edx
  0026d	74 0b		 je	 SHORT $LN7@operator@2

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

  0026f	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  00272	83 c8 04	 or	 eax, 4
  00275	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 787  : 					break;

  00278	eb 05		 jmp	 SHORT $LN11@operator@2
$LN7@operator@2:

; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit

  0027a	e9 17 ff ff ff	 jmp	 $LN9@operator@2
$LN11@operator@2:

; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  0027f	83 7d e8 00	 cmp	 DWORD PTR __State$[ebp], 0
  00283	75 6e		 jne	 SHORT $LN6@operator@2
  00285	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00288	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0028d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00290	8b f4		 mov	 esi, esp
  00292	8b ca		 mov	 ecx, edx
  00294	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0029a	3b f4		 cmp	 esi, esp
  0029c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a1	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002a7	8b f4		 mov	 esi, esp
  002a9	8b 45 dc	 mov	 eax, DWORD PTR __Count$[ebp+4]
  002ac	50		 push	 eax
  002ad	8b 4d d8	 mov	 ecx, DWORD PTR __Count$[ebp]
  002b0	51		 push	 ecx
  002b1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002b4	52		 push	 edx
  002b5	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002c1	3b f4		 cmp	 esi, esp
  002c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c8	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002ce	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002d4	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002da	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp]
  002dd	75 0b		 jne	 SHORT $LN28@operator@2
  002df	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002e5	3b 4d dc	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002e8	74 09		 je	 SHORT $LN6@operator@2
$LN28@operator@2:

; 792  : 			_State |= ios_base::badbit;

  002ea	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  002ed	83 c8 04	 or	 eax, 4
  002f0	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax
$LN6@operator@2:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)

  002f3	83 7d e8 00	 cmp	 DWORD PTR __State$[ebp], 0
  002f7	0f 85 eb 00 00
	00		 jne	 $LN5@operator@2
  002fd	eb 12		 jmp	 SHORT $LN4@operator@2
$LN3@operator@2:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002ff	8b 45 c8	 mov	 eax, DWORD PTR __Pad$[ebp]
  00302	83 e8 01	 sub	 eax, 1
  00305	8b 4d cc	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00308	83 d9 00	 sbb	 ecx, 0
  0030b	89 45 c8	 mov	 DWORD PTR __Pad$[ebp], eax
  0030e	89 4d cc	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator@2:
  00311	83 7d cc 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00315	0f 8c cd 00 00
	00		 jl	 $LN5@operator@2
  0031b	7f 0a		 jg	 SHORT $LN29@operator@2
  0031d	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00321	0f 86 c1 00 00
	00		 jbe	 $LN5@operator@2
$LN29@operator@2:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00327	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0032a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0032f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00332	8b f4		 mov	 esi, esp
  00334	8b ca		 mov	 ecx, edx
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0033c	3b f4		 cmp	 esi, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00343	88 85 b7 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00349	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0034c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00351	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00354	8b f4		 mov	 esi, esp
  00356	8b ca		 mov	 ecx, edx
  00358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0036b	8b f4		 mov	 esi, esp
  0036d	0f b6 85 b7 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00374	50		 push	 eax
  00375	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0037b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00381	3b f4		 cmp	 esi, esp
  00383	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00388	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0038e	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00394	89 8d d4 fe ff
	ff		 mov	 DWORD PTR $T174339[ebp], ecx
  0039a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0039f	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv292[ebp], eax
  003a5	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv292[ebp]
  003ab	89 95 e0 fe ff
	ff		 mov	 DWORD PTR $T174340[ebp], edx
  003b1	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T174339[ebp]
  003b7	50		 push	 eax
  003b8	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T174340[ebp]
  003be	51		 push	 ecx
  003bf	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  003c4	83 c4 08	 add	 esp, 8
  003c7	88 85 a7 fe ff
	ff		 mov	 BYTE PTR tv293[ebp], al
  003cd	0f b6 95 a7 fe
	ff ff		 movzx	 edx, BYTE PTR tv293[ebp]
  003d4	85 d2		 test	 edx, edx
  003d6	74 0b		 je	 SHORT $LN1@operator@2

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  003d8	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  003db	83 c8 04	 or	 eax, 4
  003de	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 800  : 					break;

  003e1	eb 05		 jmp	 SHORT $LN5@operator@2
$LN1@operator@2:

; 801  : 					}

  003e3	e9 17 ff ff ff	 jmp	 $LN3@operator@2
$LN5@operator@2:

; 802  : 		_Ostr.width(0);

  003e8	8b f4		 mov	 esi, esp
  003ea	6a 00		 push	 0
  003ec	6a 00		 push	 0
  003ee	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f9	8b ca		 mov	 ecx, edx
  003fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00401	3b f4		 cmp	 esi, esp
  00403	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00408	eb 2d		 jmp	 SHORT $LN19@operator@2
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

  0040a	8b f4		 mov	 esi, esp
  0040c	6a 01		 push	 1
  0040e	6a 04		 push	 4
  00410	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00413	8b 08		 mov	 ecx, DWORD PTR [eax]
  00415	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00418	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0041b	8b ca		 mov	 ecx, edx
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00423	3b f4		 cmp	 esi, esp
  00425	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0042a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00431	b8 00 00 00 00	 mov	 eax, $LN13@operator@2
  00436	c3		 ret	 0
$LN19@operator@2:
  00437	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator@2:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

  0043e	8b f4		 mov	 esi, esp
  00440	6a 00		 push	 0
  00442	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  00445	50		 push	 eax
  00446	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00449	8b 11		 mov	 edx, DWORD PTR [ecx]
  0044b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0044e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00451	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00457	3b f4		 cmp	 esi, esp
  00459	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 807  : 	return (_Ostr);

  0045e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00461	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T174341[ebp], eax
  00467	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0046e	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00471	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00476	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR $T174341[ebp]

; 808  : 	}

  0047c	52		 push	 edx
  0047d	8b cd		 mov	 ecx, ebp
  0047f	50		 push	 eax
  00480	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN33@operator@2
  00486	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0048b	58		 pop	 eax
  0048c	5a		 pop	 edx
  0048d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00490	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00497	59		 pop	 ecx
  00498	5f		 pop	 edi
  00499	5e		 pop	 esi
  0049a	5b		 pop	 ebx
  0049b	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  004a1	3b ec		 cmp	 ebp, esp
  004a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a8	8b e5		 mov	 esp, ebp
  004aa	5d		 pop	 ebp
  004ab	c3		 ret	 0
$LN33@operator@2:
  004ac	01 00 00 00	 DD	 1
  004b0	00 00 00 00	 DD	 $LN32@operator@2
$LN32@operator@2:
  004b4	b8 ff ff ff	 DD	 -72			; ffffffb8H
  004b8	08 00 00 00	 DD	 8
  004bc	00 00 00 00	 DD	 $LN30@operator@2
$LN30@operator@2:
  004c0	5f		 DB	 95			; 0000005fH
  004c1	4f		 DB	 79			; 0000004fH
  004c2	6b		 DB	 107			; 0000006bH
  004c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 9c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-356]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 491  : 		return (_CSTD strlen(_First));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _strlen
  00027	83 c4 04	 add	 esp, 4

; 492  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 4d		 je	 SHORT $LN1@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 2d		 je	 SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b f4		 mov	 esi, esp
  000b6	8b c8		 mov	 ecx, eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000d0	8b f4		 mov	 esi, esp
  000d2	8b ca		 mov	 ecx, edx
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 118  : 			}

  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00105	3b ec		 cmp	 ebp, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

  00049	8b f4		 mov	 esi, esp
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	0f b6 c0	 movzx	 eax, al
  0005b	85 c0		 test	 eax, eax
  0005d	75 14		 jne	 SHORT $LN2@sentry@2

; 124  : 				this->_Myostr._Osfx();

  0005f	8b f4		 mov	 esi, esp
  00061	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 132  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0002a	f7 d8		 neg	 eax
  0002c	1b c0		 sbb	 eax, eax
  0002e	f7 d8		 neg	 eax
  00030	83 e8 01	 sub	 eax, 1

; 134  : 			}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 92   : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0003a	8b f4		 mov	 esi, esp
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	85 c0		 test	 eax, eax
  0004b	74 40		 je	 SHORT $LN2@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0005c	8b f4		 mov	 esi, esp
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00071	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	8b f4		 mov	 esi, esp
  0007b	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	ff d0		 call	 eax
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Sentry_bas:

; 94   : 			}

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 97   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	85 c0		 test	 eax, eax
  00043	74 40		 je	 SHORT $LN2@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00054	8b f4		 mov	 esi, esp
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00069	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  0006f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00071	8b f4		 mov	 esi, esp
  00073	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv90[ebp]
  00079	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0007c	ff d0		 call	 eax
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Sentry_bas@2:

; 100  : 			}

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_?_Incref@facet@locale@std@@QAEXXZ:PROC
EXTRN	__imp_??0bad_cast@std@@QAE@PBD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	__imp_?id@?$codecvt@DDH@std@@2V0locale@2@A:DWORD
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T174392 = -292						; size = 12
$T174393 = -272						; size = 4
__Pfmod$170297 = -68					; size = 4
__Pf$170286 = -56					; size = 4
__Id$170285 = -44					; size = 4
__Psave$170273 = -32					; size = 4
__Lock$170272 = -20					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,int> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00020	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0003d	8b f4		 mov	 esi, esp
  0003f	6a 00		 push	 0
  00041	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$170272[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
  0005d	89 45 e0	 mov	 DWORD PTR __Psave$170273[ebp], eax

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00060	8b f4		 mov	 esi, esp
  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$codecvt@DDH@std@@2V0locale@2@A
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0006e	3b f4		 cmp	 esi, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	89 45 d4	 mov	 DWORD PTR __Id$170285[ebp], eax

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00078	8b 45 d4	 mov	 eax, DWORD PTR __Id$170285[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007f	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00084	89 45 c8	 mov	 DWORD PTR __Pf$170286[ebp], eax

; 511  : 
; 512  : 		if (_Pf != 0)

  00087	83 7d c8 00	 cmp	 DWORD PTR __Pf$170286[ebp], 0
  0008b	74 05		 je	 SHORT $LN6@use_facet
  0008d	e9 88 00 00 00	 jmp	 $LN5@use_facet
$LN6@use_facet:

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  00092	83 7d e0 00	 cmp	 DWORD PTR __Psave$170273[ebp], 0
  00096	74 08		 je	 SHORT $LN4@use_facet

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00098	8b 45 e0	 mov	 eax, DWORD PTR __Psave$170273[ebp]
  0009b	89 45 c8	 mov	 DWORD PTR __Pf$170286[ebp], eax
  0009e	eb 7a		 jmp	 SHORT $LN5@use_facet
$LN4@use_facet:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000a0	8b f4		 mov	 esi, esp
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000a5	50		 push	 eax
  000a6	8d 4d e0	 lea	 ecx, DWORD PTR __Psave$170273[ebp]
  000a9	51		 push	 ecx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  000b0	83 c4 08	 add	 esp, 8
  000b3	3b f4		 cmp	 esi, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	83 f8 ff	 cmp	 eax, -1
  000bd	75 2d		 jne	 SHORT $LN2@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000bf	8b f4		 mov	 esi, esp
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000c6	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T174392[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@std@@QAE@PBD@Z
  000d2	3b f4		 cmp	 esi, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000de	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T174392[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else

  000ea	eb 2e		 jmp	 SHORT $LN5@use_facet
$LN2@use_facet:

; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  000ec	8b 45 e0	 mov	 eax, DWORD PTR __Psave$170273[ebp]
  000ef	89 45 c8	 mov	 DWORD PTR __Pf$170286[ebp], eax

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000f2	8b 45 e0	 mov	 eax, DWORD PTR __Psave$170273[ebp]
  000f5	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000fa	8b 45 e0	 mov	 eax, DWORD PTR __Psave$170273[ebp]
  000fd	89 45 bc	 mov	 DWORD PTR __Pfmod$170297[ebp], eax

; 532  : 			_Pfmod->_Incref();

  00100	8b f4		 mov	 esi, esp
  00102	8b 4d bc	 mov	 ecx, DWORD PTR __Pfmod$170297[ebp]
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  0010b	3b f4		 cmp	 esi, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 533  : 			_Pfmod->_Register();

  00112	8b 4d bc	 mov	 ecx, DWORD PTR __Pfmod$170297[ebp]
  00115	e8 00 00 00 00	 call	 ?_Register@facet@locale@std@@QAEXXZ ; std::locale::facet::_Register
$LN5@use_facet:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  0011a	8b 45 c8	 mov	 eax, DWORD PTR __Pf$170286[ebp]
  0011d	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T174393[ebp], eax
  00123	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012a	8b f4		 mov	 esi, esp
  0012c	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$170272[ebp]
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00135	3b f4		 cmp	 esi, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013c	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR $T174393[ebp]
$LN8@use_facet:

; 537  : 	_END_LOCK()
; 538  : 	}

  00142	52		 push	 edx
  00143	8b cd		 mov	 ecx, ebp
  00145	50		 push	 eax
  00146	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@use_facet
  0014c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00151	58		 pop	 eax
  00152	5a		 pop	 edx
  00153	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00156	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015d	59		 pop	 ecx
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
  00161	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  00167	3b ec		 cmp	 ebp, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
  00172	8b ff		 npad	 2
$LN14@use_facet:
  00174	02 00 00 00	 DD	 2
  00178	00 00 00 00	 DD	 $LN13@use_facet
$LN13@use_facet:
  0017c	ec ff ff ff	 DD	 -20			; ffffffecH
  00180	04 00 00 00	 DD	 4
  00184	00 00 00 00	 DD	 $LN10@use_facet
  00188	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0018c	04 00 00 00	 DD	 4
  00190	00 00 00 00	 DD	 $LN11@use_facet
$LN11@use_facet:
  00194	5f		 DB	 95			; 0000005fH
  00195	50		 DB	 80			; 00000050H
  00196	73		 DB	 115			; 00000073H
  00197	61		 DB	 97			; 00000061H
  00198	76		 DB	 118			; 00000076H
  00199	65		 DB	 101			; 00000065H
  0019a	00		 DB	 0
$LN10@use_facet:
  0019b	5f		 DB	 95			; 0000005fH
  0019c	4c		 DB	 76			; 0000004cH
  0019d	6f		 DB	 111			; 0000006fH
  0019e	63		 DB	 99			; 00000063H
  0019f	6b		 DB	 107			; 0000006bH
  001a0	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$170272[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,int> >
EXTRN	?_Facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::_Facet_Register
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 128  : 			{	// queue lazy facet destruction

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 129  :  #if defined(_M_CEE)
; 130  : 			_Facet_Register_m(this);
; 131  : 
; 132  :  #else /* defined(_M_CEE) */
; 133  : 			_Facet_Register(this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  0002c	83 c4 04	 add	 esp, 4

; 134  :  #endif /* defined(_M_CEE) */
; 135  : 			}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
EXTRN	__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv80 = -232						; size = 4
tv69 = -232						; size = 4
__Ptr$76898 = -32					; size = 4
__Facptr$ = -20						; size = 4
_this$ = -8						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 437  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 438  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  0002b	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0002e	73 16		 jae	 SHORT $LN6@Getfacet
  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  0003b	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0003e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], ecx
  00044	eb 0a		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00046	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN7@Getfacet:
  00050	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv69[ebp]
  00056	89 55 ec	 mov	 DWORD PTR __Facptr$[ebp], edx

; 439  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00059	83 7d ec 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  0005d	75 0d		 jne	 SHORT $LN2@Getfacet
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  00068	85 d2		 test	 edx, edx
  0006a	75 07		 jne	 SHORT $LN3@Getfacet
$LN2@Getfacet:

; 440  : 			return (_Facptr);	// found facet or not transparent

  0006c	8b 45 ec	 mov	 eax, DWORD PTR __Facptr$[ebp]
  0006f	eb 43		 jmp	 SHORT $LN4@Getfacet

; 441  : 		else

  00071	eb 41		 jmp	 SHORT $LN4@Getfacet
$LN3@Getfacet:

; 442  : 			{	// look in current locale
; 443  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00073	8b f4		 mov	 esi, esp
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	89 45 e0	 mov	 DWORD PTR __Ptr$76898[ebp], eax

; 444  : 			return (_Id < _Ptr->_Facetcount
; 445  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 446  : 				: 0);	// no entry in current locale

  00085	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$76898[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  0008b	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0008e	73 14		 jae	 SHORT $LN8@Getfacet
  00090	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$76898[ebp]
  00093	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00099	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  0009c	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], edx
  000a2	eb 0a		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  000a4	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN9@Getfacet:
  000ae	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv80[ebp]
$LN4@Getfacet:

; 447  : 			}
; 448  : 		}

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00032	e8 00 00 00 00	 call	 ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct

; 281  : 	}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z PROC ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 287  : 	_Alval.destroy(_Pdest);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00025	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy

; 288  : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T174422 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	void *_Ptr = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  0002b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  00032	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00034	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00038	77 15		 ja	 SHORT $LN1@Allocate
  0003a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	83 c4 04	 add	 esp, 4
  00046	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00049	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0004d	75 1e		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0004f	6a 00		 push	 0
  00051	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T174422[ebp]
  00057	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00061	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T174422[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0006d	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b f4		 mov	 esi, esp
  00025	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0c		 je	 SHORT $LN1@scalar@4
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN1@scalar@4:
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@0@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@0@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>,std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 287  : 	_Alval.destroy(_Pdest);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00025	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::destroy

; 288  : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@0@PAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>,std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0PAVGameAction@ReplayTool@@@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVGameAction@ReplayTool@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0PAVGameAction@ReplayTool@@@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVGameAction@ReplayTool@@@1@@Z PROC ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node><ReplayTool::GameAction *>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0PAVGameAction@ReplayTool@@@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVGameAction@ReplayTool@@@1@@Z ENDP ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node><ReplayTool::GameAction *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T174437 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	void *_Ptr = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	77 09		 ja	 SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

  0002b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  00032	eb 3f		 jmp	 SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00034	81 7d 08 55 55
	55 15		 cmp	 DWORD PTR __Count$[ebp], 357913941 ; 15555555H
  0003b	77 18		 ja	 SHORT $LN1@Allocate@2
  0003d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00040	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0004f	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00053	75 1e		 jne	 SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00055	6a 00		 push	 0
  00057	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T174437[ebp]
  0005d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  00062	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00067	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T174437[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00073	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
??$_Allocate@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
$T174440 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	void *_Ptr = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	77 09		 ja	 SHORT $LN4@Allocate@3

; 34   : 		_Count = 0;

  0002b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  00032	eb 3f		 jmp	 SHORT $LN3@Allocate@3
$LN4@Allocate@3:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00034	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  0003b	77 18		 ja	 SHORT $LN1@Allocate@3
  0003d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00040	c1 e0 03	 shl	 eax, 3
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0004f	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00053	75 1e		 jne	 SHORT $LN3@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00055	6a 00		 push	 0
  00057	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T174440[ebp]
  0005d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  00062	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00067	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T174440[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@3:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00073	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@3:

; 40   : 	}

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b f4		 mov	 esi, esp
  00025	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$_Destroy@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
  0002c	83 c4 04	 add	 esp, 4

; 214  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0
__ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T174448 = -236						; size = 4
$T174449 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z PROC ; std::allocator<std::_Container_proxy>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00045	50		 push	 eax
  00046	6a 08		 push	 8
  00048	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0004d	83 c4 08	 add	 esp, 8
  00050	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T174449[ebp], eax
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR $T174449[ebp], 0
  00064	74 2a		 je	 SHORT $LN3@construct
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0006f	83 c4 04	 add	 esp, 4
  00072	8b 10		 mov	 edx, DWORD PTR [eax]
  00074	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00077	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T174449[ebp]
  0007d	89 11		 mov	 DWORD PTR [ecx], edx
  0007f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00082	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR $T174449[ebp]
  00088	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv74[ebp], edx
  0008e	eb 0a		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00090	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  0009a	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  000a0	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T174448[ebp], eax
  000a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T174449[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00010	83 c4 08	 add	 esp, 8
  00013	c3		 ret	 0
__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ENDP ; std::allocator<std::_Container_proxy>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 57   : 	return (_Where);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 61   : 	{	// delete if placement new fails

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z PROC ; std::allocator<std::_Container_proxy>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
  0002c	83 c4 04	 add	 esp, 4

; 214  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 79   : 	return ((_Ty&&)_Arg);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAVGameAction@ReplayTool@@V?$allocator@PAVGameAction@ReplayTool@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<ReplayTool::GameAction *,std::allocator<ReplayTool::GameAction *> >::_Node>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z PROC ; std::_Destroy<std::_Container_proxy>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ENDP ; std::_Destroy<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??0_Ignore@tr1@std@@QAE@XZ			; std::tr1::_Ignore::_Ignore
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\tuple
;	COMDAT ??__Eignore@tr1@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@tr1@std@@YAXXZ PROC				; std::tr1::`dynamic initializer for 'ignore'', COMDAT

; 641  : const _Ignore ignore;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET _ignore
  00023	e8 00 00 00 00	 call	 ??0_Ignore@tr1@std@@QAE@XZ ; std::tr1::_Ignore::_Ignore
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Eignore@tr1@std@@YAXXZ ENDP				; std::tr1::`dynamic initializer for 'ignore''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0_Ignore@tr1@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Ignore@tr1@std@@QAE@XZ PROC				; std::tr1::_Ignore::_Ignore, COMDAT
; _this$ = ecx

; 631  : 	_Ignore()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 632  : 		{	// construct
; 633  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0_Ignore@tr1@std@@QAE@XZ ENDP				; std::tr1::_Ignore::_Ignore
_TEXT	ENDS
PUBLIC	??0?$Point@H$07@BWAPI@@QAE@HH@Z			; BWAPI::Point<int,8>::Point<int,8>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\include\bwapi\position.h
;	COMDAT ??__EInvalid@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EInvalid@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'Invalid'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00023	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Invalid
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EInvalid@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'Invalid''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0?$Point@H$07@BWAPI@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point@H$07@BWAPI@@QAE@HH@Z PROC			; BWAPI::Point<int,8>::Point<int,8>, COMDAT
; _this$ = ecx

; 65   :     Point(_T _x = 0, _T _y = 0) : x(_x), y(_y) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __y$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$Point@H$07@BWAPI@@QAE@HH@Z ENDP			; BWAPI::Point<int,8>::Point<int,8>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__ENone@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__ENone@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'None'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 a4 0f 00 00	 push	 4004			; 00000fa4H
  00023	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _None
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__ENone@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'None''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EUnknown@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EUnknown@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'Unknown'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 a8 0f 00 00	 push	 4008			; 00000fa8H
  00023	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Unknown
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EUnknown@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'Unknown''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EOrigin@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EOrigin@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'Origin'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET _Origin
  00027	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??__EOrigin@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'Origin''
text$yc	ENDS
PUBLIC	??0?$Point@H$00@BWAPI@@QAE@HH@Z			; BWAPI::Point<int,1>::Point<int,1>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EInvalid@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EInvalid@Positions@BWAPI@@YAXXZ PROC		; BWAPI::Positions::`dynamic initializer for 'Invalid'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 00 7d 00 00	 push	 32000			; 00007d00H
  00023	68 00 7d 00 00	 push	 32000			; 00007d00H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Invalid
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EInvalid@Positions@BWAPI@@YAXXZ ENDP		; BWAPI::Positions::`dynamic initializer for 'Invalid''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0?$Point@H$00@BWAPI@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point@H$00@BWAPI@@QAE@HH@Z PROC			; BWAPI::Point<int,1>::Point<int,1>, COMDAT
; _this$ = ecx

; 65   :     Point(_T _x = 0, _T _y = 0) : x(_x), y(_y) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __y$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$Point@H$00@BWAPI@@QAE@HH@Z ENDP			; BWAPI::Point<int,1>::Point<int,1>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__ENone@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__ENone@Positions@BWAPI@@YAXXZ PROC			; BWAPI::Positions::`dynamic initializer for 'None'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 20 7d 00 00	 push	 32032			; 00007d20H
  00023	68 00 7d 00 00	 push	 32000			; 00007d00H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _None
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__ENone@Positions@BWAPI@@YAXXZ ENDP			; BWAPI::Positions::`dynamic initializer for 'None''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EUnknown@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EUnknown@Positions@BWAPI@@YAXXZ PROC		; BWAPI::Positions::`dynamic initializer for 'Unknown'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 40 7d 00 00	 push	 32064			; 00007d40H
  00023	68 00 7d 00 00	 push	 32000			; 00007d00H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Unknown
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EUnknown@Positions@BWAPI@@YAXXZ ENDP		; BWAPI::Positions::`dynamic initializer for 'Unknown''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EOrigin@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EOrigin@Positions@BWAPI@@YAXXZ PROC			; BWAPI::Positions::`dynamic initializer for 'Origin'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET _Origin
  00027	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??__EOrigin@Positions@BWAPI@@YAXXZ ENDP			; BWAPI::Positions::`dynamic initializer for 'Origin''
text$yc	ENDS
PUBLIC	??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z		; BWAPI::Point<int,32>::Point<int,32>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EInvalid@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EInvalid@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'Invalid'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00023	68 e8 03 00 00	 push	 1000			; 000003e8H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Invalid
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EInvalid@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'Invalid''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z PROC			; BWAPI::Point<int,32>::Point<int,32>, COMDAT
; _this$ = ecx

; 65   :     Point(_T _x = 0, _T _y = 0) : x(_x), y(_y) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __y$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ENDP			; BWAPI::Point<int,32>::Point<int,32>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__ENone@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__ENone@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'None'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 e9 03 00 00	 push	 1001			; 000003e9H
  00023	68 e8 03 00 00	 push	 1000			; 000003e8H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _None
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__ENone@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'None''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EUnknown@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EUnknown@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'Unknown'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 ea 03 00 00	 push	 1002			; 000003eaH
  00023	68 e8 03 00 00	 push	 1000			; 000003e8H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Unknown
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EUnknown@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'Unknown''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EOrigin@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EOrigin@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'Origin'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET _Origin
  00027	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??__EOrigin@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'Origin''
text$yc	ENDS
_BSS	SEGMENT
	ALIGN	8

_Origin	DQ	01H DUP (?)
_None	DQ	01H DUP (?)
_Invalid DQ	01H DUP (?)
_Unknown DQ	01H DUP (?)
_Origin	DQ	01H DUP (?)
_None	DQ	01H DUP (?)
_Invalid DQ	01H DUP (?)
_Unknown DQ	01H DUP (?)
_Origin	DQ	01H DUP (?)
_None	DQ	01H DUP (?)
_Invalid DQ	01H DUP (?)
_Unknown DQ	01H DUP (?)
_ignore	DB	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@tr1@std@@YAXXZ
_Invalid$initializer$ DD FLAT:??__EInvalid@WalkPositions@BWAPI@@YAXXZ
_None$initializer$ DD FLAT:??__ENone@WalkPositions@BWAPI@@YAXXZ
_Unknown$initializer$ DD FLAT:??__EUnknown@WalkPositions@BWAPI@@YAXXZ
_Origin$initializer$ DD FLAT:??__EOrigin@WalkPositions@BWAPI@@YAXXZ
_Invalid$initializer$ DD FLAT:??__EInvalid@Positions@BWAPI@@YAXXZ
_None$initializer$ DD FLAT:??__ENone@Positions@BWAPI@@YAXXZ
_Unknown$initializer$ DD FLAT:??__EUnknown@Positions@BWAPI@@YAXXZ
_Origin$initializer$ DD FLAT:??__EOrigin@Positions@BWAPI@@YAXXZ
_Invalid$initializer$ DD FLAT:??__EInvalid@TilePositions@BWAPI@@YAXXZ
_None$initializer$ DD FLAT:??__ENone@TilePositions@BWAPI@@YAXXZ
_Unknown$initializer$ DD FLAT:??__EUnknown@TilePositions@BWAPI@@YAXXZ
_Origin$initializer$ DD FLAT:??__EOrigin@TilePositions@BWAPI@@YAXXZ
CRT$XCU	ENDS
END
