; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Fili\Development\GP\RtsAiResearch\bwapi\bwapi\libReplayTool\StopAction.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04NKFKOIHC@Chat?$AA@			; `string'
PUBLIC	??_C@_0BB@DENPHCHM@Make?5Game?5Public?$AA@	; `string'
PUBLIC	??_C@_0BB@LIPMMPLG@Dark?5Archon?5Meld?$AA@	; `string'
PUBLIC	??_C@_04BKFDJCNG@0x59?$AA@			; `string'
PUBLIC	??_C@_0N@NMOAPDHG@Minimap?5Ping?$AA@		; `string'
PUBLIC	??_C@_0L@LBCNLCCF@Leave?5Game?$AA@		; `string'
PUBLIC	??_C@_0BB@MGBIANOJ@Set?5Replay?5Speed?$AA@	; `string'
PUBLIC	??_C@_0M@GOBIDMLI@Set?5Latency?$AA@		; `string'
PUBLIC	??_C@_0O@PIDPABKE@Skip?5Briefing?$AA@		; `string'
PUBLIC	??_C@_0BJ@OACOAKNO@?$FLResult?$FNBriefing?5Started?$AA@ ; `string'
PUBLIC	??_C@_0BA@HJPKKBAA@?$FLResult?$FNUnknown?$AA@	; `string'
PUBLIC	??_C@_0BG@BEDBIGGC@?$FLResult?$FNNetwork?5Error?$AA@ ; `string'
PUBLIC	??_C@_0L@NKDFONHA@?$FLResult?$FNOK?$AA@		; `string'
PUBLIC	??_C@_0BF@PKMGMLFB@?$FLLobby?$FNFile?5Transfer?$AA@ ; `string'
PUBLIC	??_C@_0BD@EKKNDBJC@?$FLLobby?$FNBoot?5Player?$AA@ ; `string'
PUBLIC	??_C@_0N@KDILJGFG@?$FLLobby?$FNChat2?$AA@	; `string'
PUBLIC	??_C@_0M@PPEBHDOC@?$FLLobby?$FNChat?$AA@	; `string'
PUBLIC	??_C@_0BH@HCFKEAID@?$FLLobby?$FNSet?5Force?5Names?$AA@ ; `string'
PUBLIC	??_C@_0BG@KJAAGDBK@?$FLLobby?$FNSet?5Force?5Data?$AA@ ; `string'
PUBLIC	??_C@_0BE@KPJKPOMP@?$FLLobby?$FNRequest?5Info?$AA@ ; `string'
PUBLIC	??_C@_0BF@NDJBMNCF@?$FLLobby?$FNSet?5Game?5Seed?$AA@ ; `string'
PUBLIC	??_C@_0M@KAAJEOPP@?$FLLobby?$FN0x47?$AA@	; `string'
PUBLIC	??_C@_0M@LJBCHPLO@?$FLLobby?$FN0x46?$AA@	; `string'
PUBLIC	??_C@_0BE@CCEBBKEN@?$FLLobby?$FNSwap?5Players?$AA@ ; `string'
PUBLIC	??_C@_0BA@HNAGKNBE@?$FLLobby?$FNSet?5Slot?$AA@	; `string'
PUBLIC	??_C@_0BH@DINGDBEA@?$FLLobby?$FNSet?5Force?5?$CIUMS?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGIAHMOJ@?$FLLobby?$FNSet?5Force?5?$CIMelee?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BA@OIMPIGAN@?$FLLobby?$FNSet?5Race?$AA@	; `string'
PUBLIC	??_C@_0BH@GNJCPAIB@?$FLLobby?$FNConfirm?5Version?$AA@ ; `string'
PUBLIC	??_C@_0BD@LHOLDPJB@?$FLLobby?$FNAsk?5Version?$AA@ ; `string'
PUBLIC	??_C@_0BM@PIHGGKL@?$FLLobby?$FNSet?5Slot?5Data?5?$CIHost?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BN@OJMALIBE@?$FLLobby?$FNSet?5Download?5Progress?$AA@ ; `string'
PUBLIC	??_C@_0BC@DICKFKJ@?$FLLobby?$FNStart?5Game?$AA@	; `string'
PUBLIC	??_C@_0BA@GMBCDJG@Voice?5Unsquelch?$AA@		; `string'
PUBLIC	??_C@_0O@BMDCHFNH@Voice?5Squelch?$AA@		; `string'
PUBLIC	??_C@_09HLCNEACO@Voice?5Off?$AA@		; `string'
PUBLIC	??_C@_08PAGDMOKP@Voice?5On?$AA@			; `string'
PUBLIC	??_C@_0BF@PHKLFOBD@Game?5Synchronization?$AA@	; `string'
PUBLIC	??_C@_0N@KGHFBHGG@Use?5Stimpack?$AA@		; `string'
PUBLIC	??_C@_0P@KIJNPCAM@Morph?5Building?$AA@		; `string'
PUBLIC	??_C@_0N@IBEDIMJF@Cancel?5Addon?$AA@		; `string'
PUBLIC	??_C@_0P@JCILHKMO@Cancel?5Upgrade?$AA@		; `string'
PUBLIC	??_C@_07CJFOONCK@Upgrade?$AA@			; `string'
PUBLIC	??_C@_0BA@HNONCJOL@Cancel?5Research?$AA@	; `string'
PUBLIC	??_C@_08NKDBNKBN@Research?$AA@			; `string'
PUBLIC	??_C@_08OLGKIKAG@Lift?5Off?$AA@			; `string'
PUBLIC	??_C@_0M@MMNGBMBH@Cancel?5Nuke?$AA@		; `string'
PUBLIC	??_C@_08MCEFCEML@Unburrow?$AA@			; `string'
PUBLIC	??_C@_06ILDJGADH@Burrow?$AA@			; `string'
PUBLIC	??_C@_0O@IMEEPEIA@Hold?5Position?$AA@		; `string'
PUBLIC	??_C@_0N@PMEPMLHE@Merge?5Archon?$AA@		; `string'
PUBLIC	??_C@_0P@ICLFFDLC@Exit?5Transport?$AA@		; `string'
PUBLIC	??_C@_0L@DFGLMHLP@Unload?5All?$AA@		; `string'
PUBLIC	??_C@_0O@GGKHOKHK@Build?5Fighter?$AA@		; `string'
PUBLIC	??_C@_05JOPHEEP@Siege?$AA@			; `string'
PUBLIC	??_C@_07BMOMMFKJ@Unsiege?$AA@			; `string'
PUBLIC	??_C@_04KKLCPKBO@0x24?$AA@			; `string'
PUBLIC	??_C@_0L@EDOHLEKH@Morph?5Unit?$AA@		; `string'
PUBLIC	??_C@_07JAHPJMFF@Decloak?$AA@			; `string'
PUBLIC	??_C@_05DHGKEIPM@Cloak?$AA@			; `string'
PUBLIC	??_C@_0N@OKLPBBP@Cancel?5Train?$AA@		; `string'
PUBLIC	??_C@_05GFNCIBPC@Train?$AA@			; `string'
PUBLIC	??_C@_0N@OAOLMLFB@Return?5Cargo?$AA@		; `string'
PUBLIC	??_C@_07MMBOBMNN@Nothing?$AA@			; `string'
PUBLIC	??_C@_0M@NLHPAPLI@Reaver?5Stop?$AA@		; `string'
PUBLIC	??_C@_0N@PEADPAMH@Carrier?5Stop?$AA@		; `string'
PUBLIC	??_C@_04MOIHHPNJ@Stop?$AA@			; `string'
PUBLIC	??_C@_0N@LFADDGHH@Cancel?5Morph?$AA@		; `string'
PUBLIC	??_C@_0BE@EFOFLOJA@Cancel?5Construction?$AA@	; `string'
PUBLIC	??_C@_04IDNJBHIE@0x17?$AA@			; `string'
PUBLIC	??_C@_04JKMCCGMF@0x16?$AA@			; `string'
PUBLIC	??_C@_0N@LBNBMPMJ@Target?5Click?$AA@		; `string'
PUBLIC	??_C@_0M@BDGMFCOP@Right?5Click?$AA@		; `string'
PUBLIC	??_C@_0M@PECPPPOO@Group?5Units?$AA@		; `string'
PUBLIC	??_C@_09PDOAOMEM@Use?5Cheat?$AA@		; `string'
PUBLIC	??_C@_07OBDOKAPF@Unpause?$AA@			; `string'
PUBLIC	??_C@_05PEDNBBBD@Pause?$AA@			; `string'
PUBLIC	??_C@_09IPLIPCBA@Set?5Speed?$AA@		; `string'
PUBLIC	??_C@_0L@NLHLHKFK@Set?5Allies?$AA@		; `string'
PUBLIC	??_C@_07BOMAKBLO@Set?5Fog?$AA@			; `string'
PUBLIC	??_C@_08CLNBJNCA@Placebox?$AA@			; `string'
PUBLIC	??_C@_0P@IINHCEMO@Shift?5Deselect?$AA@		; `string'
PUBLIC	??_C@_0N@NCDAONAE@Shift?5Select?$AA@		; `string'
PUBLIC	??_C@_06HJGPBJLE@Select?$AA@			; `string'
PUBLIC	??_C@_0N@DKOEBAOF@Restart?5Game?$AA@		; `string'
PUBLIC	??_C@_09EOPBCAJJ@Load?5Game?$AA@		; `string'
PUBLIC	??_C@_09IAJPBCOI@Save?5Game?$AA@		; `string'
PUBLIC	??_C@_0L@LFNIADGH@Keep?5Alive?$AA@		; `string'
PUBLIC	??_C@_04KJDGCOHA@0x04?$AA@			; `string'
PUBLIC	??_C@_04OGHHLILH@0x03?$AA@			; `string'
PUBLIC	??_C@_09JELFAMD@Null?5Chat?$AA@			; `string'
PUBLIC	??_C@_0N@LPBJEAGM@Private?5Chat?$AA@		; `string'
PUBLIC	??_C@_0M@MJLADDJO@Public?5Chat?$AA@		; `string'
PUBLIC	??_C@_07GIDPHHDH@Dropped?$AA@			; `string'
PUBLIC	??_C@_04HMPDNAFK@Draw?$AA@			; `string'
PUBLIC	??_C@_08IAMFKBPN@Finished?$AA@			; `string'
PUBLIC	??_C@_07FPEFHBMO@Victory?$AA@			; `string'
PUBLIC	??_C@_06JCCCHHDL@Defeat?$AA@			; `string'
PUBLIC	??_C@_04GMBKPCGK@Quit?$AA@			; `string'
PUBLIC	??_C@_0L@HBLPOPIK@Extra?5High?$AA@		; `string'
PUBLIC	??_C@_04PHMMJPOJ@High?$AA@			; `string'
PUBLIC	??_C@_03CMIMKEEK@Low?$AA@			; `string'
PUBLIC	??_C@_07MIBGPIAH@Fastest?$AA@			; `string'
PUBLIC	??_C@_06IPNKADFG@Faster?$AA@			; `string'
PUBLIC	??_C@_04HABAFPJG@Fast?$AA@			; `string'
PUBLIC	??_C@_06EFAGIKOH@Normal?$AA@			; `string'
PUBLIC	??_C@_04BEGLJGGO@Slow?$AA@			; `string'
PUBLIC	??_C@_06LBAHHGIM@Slower?$AA@			; `string'
PUBLIC	??_C@_07KOCOBOLI@Slowest?$AA@			; `string'
PUBLIC	??_C@_03LDFMNCOE@Add?$AA@			; `string'
PUBLIC	??_C@_06FLGNMNOC@Recall?$AA@			; `string'
PUBLIC	??_C@_04INACKGJP@Save?$AA@			; `string'
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?_Value@?$_Size@U?$_Cons_node@U_Nil@tr1@std@@U123@@tr1@std@@@tr1@std@@2IB ; std::tr1::_Size<std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> >::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ??_C@_04NKFKOIHC@Chat?$AA@
CONST	SEGMENT
??_C@_04NKFKOIHC@Chat?$AA@ DB 'Chat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DENPHCHM@Make?5Game?5Public?$AA@
CONST	SEGMENT
??_C@_0BB@DENPHCHM@Make?5Game?5Public?$AA@ DB 'Make Game Public', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LIPMMPLG@Dark?5Archon?5Meld?$AA@
CONST	SEGMENT
??_C@_0BB@LIPMMPLG@Dark?5Archon?5Meld?$AA@ DB 'Dark Archon Meld', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKFDJCNG@0x59?$AA@
CONST	SEGMENT
??_C@_04BKFDJCNG@0x59?$AA@ DB '0x59', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMOAPDHG@Minimap?5Ping?$AA@
CONST	SEGMENT
??_C@_0N@NMOAPDHG@Minimap?5Ping?$AA@ DB 'Minimap Ping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LBCNLCCF@Leave?5Game?$AA@
CONST	SEGMENT
??_C@_0L@LBCNLCCF@Leave?5Game?$AA@ DB 'Leave Game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MGBIANOJ@Set?5Replay?5Speed?$AA@
CONST	SEGMENT
??_C@_0BB@MGBIANOJ@Set?5Replay?5Speed?$AA@ DB 'Set Replay Speed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOBIDMLI@Set?5Latency?$AA@
CONST	SEGMENT
??_C@_0M@GOBIDMLI@Set?5Latency?$AA@ DB 'Set Latency', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIDPABKE@Skip?5Briefing?$AA@
CONST	SEGMENT
??_C@_0O@PIDPABKE@Skip?5Briefing?$AA@ DB 'Skip Briefing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OACOAKNO@?$FLResult?$FNBriefing?5Started?$AA@
CONST	SEGMENT
??_C@_0BJ@OACOAKNO@?$FLResult?$FNBriefing?5Started?$AA@ DB '[Result]Brief'
	DB	'ing Started', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HJPKKBAA@?$FLResult?$FNUnknown?$AA@
CONST	SEGMENT
??_C@_0BA@HJPKKBAA@?$FLResult?$FNUnknown?$AA@ DB '[Result]Unknown', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BEDBIGGC@?$FLResult?$FNNetwork?5Error?$AA@
CONST	SEGMENT
??_C@_0BG@BEDBIGGC@?$FLResult?$FNNetwork?5Error?$AA@ DB '[Result]Network '
	DB	'Error', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NKDFONHA@?$FLResult?$FNOK?$AA@
CONST	SEGMENT
??_C@_0L@NKDFONHA@?$FLResult?$FNOK?$AA@ DB '[Result]OK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PKMGMLFB@?$FLLobby?$FNFile?5Transfer?$AA@
CONST	SEGMENT
??_C@_0BF@PKMGMLFB@?$FLLobby?$FNFile?5Transfer?$AA@ DB '[Lobby]File Trans'
	DB	'fer', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EKKNDBJC@?$FLLobby?$FNBoot?5Player?$AA@
CONST	SEGMENT
??_C@_0BD@EKKNDBJC@?$FLLobby?$FNBoot?5Player?$AA@ DB '[Lobby]Boot Player', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDILJGFG@?$FLLobby?$FNChat2?$AA@
CONST	SEGMENT
??_C@_0N@KDILJGFG@?$FLLobby?$FNChat2?$AA@ DB '[Lobby]Chat2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPEBHDOC@?$FLLobby?$FNChat?$AA@
CONST	SEGMENT
??_C@_0M@PPEBHDOC@?$FLLobby?$FNChat?$AA@ DB '[Lobby]Chat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HCFKEAID@?$FLLobby?$FNSet?5Force?5Names?$AA@
CONST	SEGMENT
??_C@_0BH@HCFKEAID@?$FLLobby?$FNSet?5Force?5Names?$AA@ DB '[Lobby]Set For'
	DB	'ce Names', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KJAAGDBK@?$FLLobby?$FNSet?5Force?5Data?$AA@
CONST	SEGMENT
??_C@_0BG@KJAAGDBK@?$FLLobby?$FNSet?5Force?5Data?$AA@ DB '[Lobby]Set Forc'
	DB	'e Data', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KPJKPOMP@?$FLLobby?$FNRequest?5Info?$AA@
CONST	SEGMENT
??_C@_0BE@KPJKPOMP@?$FLLobby?$FNRequest?5Info?$AA@ DB '[Lobby]Request Inf'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NDJBMNCF@?$FLLobby?$FNSet?5Game?5Seed?$AA@
CONST	SEGMENT
??_C@_0BF@NDJBMNCF@?$FLLobby?$FNSet?5Game?5Seed?$AA@ DB '[Lobby]Set Game '
	DB	'Seed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KAAJEOPP@?$FLLobby?$FN0x47?$AA@
CONST	SEGMENT
??_C@_0M@KAAJEOPP@?$FLLobby?$FN0x47?$AA@ DB '[Lobby]0x47', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJBCHPLO@?$FLLobby?$FN0x46?$AA@
CONST	SEGMENT
??_C@_0M@LJBCHPLO@?$FLLobby?$FN0x46?$AA@ DB '[Lobby]0x46', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CCEBBKEN@?$FLLobby?$FNSwap?5Players?$AA@
CONST	SEGMENT
??_C@_0BE@CCEBBKEN@?$FLLobby?$FNSwap?5Players?$AA@ DB '[Lobby]Swap Player'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HNAGKNBE@?$FLLobby?$FNSet?5Slot?$AA@
CONST	SEGMENT
??_C@_0BA@HNAGKNBE@?$FLLobby?$FNSet?5Slot?$AA@ DB '[Lobby]Set Slot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DINGDBEA@?$FLLobby?$FNSet?5Force?5?$CIUMS?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@DINGDBEA@?$FLLobby?$FNSet?5Force?5?$CIUMS?$CJ?$AA@ DB '[Lobby]S'
	DB	'et Force (UMS)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGIAHMOJ@?$FLLobby?$FNSet?5Force?5?$CIMelee?$CJ?$AA@
CONST	SEGMENT
??_C@_0BJ@OGIAHMOJ@?$FLLobby?$FNSet?5Force?5?$CIMelee?$CJ?$AA@ DB '[Lobby'
	DB	']Set Force (Melee)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OIMPIGAN@?$FLLobby?$FNSet?5Race?$AA@
CONST	SEGMENT
??_C@_0BA@OIMPIGAN@?$FLLobby?$FNSet?5Race?$AA@ DB '[Lobby]Set Race', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GNJCPAIB@?$FLLobby?$FNConfirm?5Version?$AA@
CONST	SEGMENT
??_C@_0BH@GNJCPAIB@?$FLLobby?$FNConfirm?5Version?$AA@ DB '[Lobby]Confirm '
	DB	'Version', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LHOLDPJB@?$FLLobby?$FNAsk?5Version?$AA@
CONST	SEGMENT
??_C@_0BD@LHOLDPJB@?$FLLobby?$FNAsk?5Version?$AA@ DB '[Lobby]Ask Version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PIHGGKL@?$FLLobby?$FNSet?5Slot?5Data?5?$CIHost?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@PIHGGKL@?$FLLobby?$FNSet?5Slot?5Data?5?$CIHost?$CJ?$AA@ DB '[Lo'
	DB	'bby]Set Slot Data (Host)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJMALIBE@?$FLLobby?$FNSet?5Download?5Progress?$AA@
CONST	SEGMENT
??_C@_0BN@OJMALIBE@?$FLLobby?$FNSet?5Download?5Progress?$AA@ DB '[Lobby]S'
	DB	'et Download Progress', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DICKFKJ@?$FLLobby?$FNStart?5Game?$AA@
CONST	SEGMENT
??_C@_0BC@DICKFKJ@?$FLLobby?$FNStart?5Game?$AA@ DB '[Lobby]Start Game', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GMBCDJG@Voice?5Unsquelch?$AA@
CONST	SEGMENT
??_C@_0BA@GMBCDJG@Voice?5Unsquelch?$AA@ DB 'Voice Unsquelch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMDCHFNH@Voice?5Squelch?$AA@
CONST	SEGMENT
??_C@_0O@BMDCHFNH@Voice?5Squelch?$AA@ DB 'Voice Squelch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HLCNEACO@Voice?5Off?$AA@
CONST	SEGMENT
??_C@_09HLCNEACO@Voice?5Off?$AA@ DB 'Voice Off', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PAGDMOKP@Voice?5On?$AA@
CONST	SEGMENT
??_C@_08PAGDMOKP@Voice?5On?$AA@ DB 'Voice On', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHKLFOBD@Game?5Synchronization?$AA@
CONST	SEGMENT
??_C@_0BF@PHKLFOBD@Game?5Synchronization?$AA@ DB 'Game Synchronization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KGHFBHGG@Use?5Stimpack?$AA@
CONST	SEGMENT
??_C@_0N@KGHFBHGG@Use?5Stimpack?$AA@ DB 'Use Stimpack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KIJNPCAM@Morph?5Building?$AA@
CONST	SEGMENT
??_C@_0P@KIJNPCAM@Morph?5Building?$AA@ DB 'Morph Building', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBEDIMJF@Cancel?5Addon?$AA@
CONST	SEGMENT
??_C@_0N@IBEDIMJF@Cancel?5Addon?$AA@ DB 'Cancel Addon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JCILHKMO@Cancel?5Upgrade?$AA@
CONST	SEGMENT
??_C@_0P@JCILHKMO@Cancel?5Upgrade?$AA@ DB 'Cancel Upgrade', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJFOONCK@Upgrade?$AA@
CONST	SEGMENT
??_C@_07CJFOONCK@Upgrade?$AA@ DB 'Upgrade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HNONCJOL@Cancel?5Research?$AA@
CONST	SEGMENT
??_C@_0BA@HNONCJOL@Cancel?5Research?$AA@ DB 'Cancel Research', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKDBNKBN@Research?$AA@
CONST	SEGMENT
??_C@_08NKDBNKBN@Research?$AA@ DB 'Research', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLGKIKAG@Lift?5Off?$AA@
CONST	SEGMENT
??_C@_08OLGKIKAG@Lift?5Off?$AA@ DB 'Lift Off', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMNGBMBH@Cancel?5Nuke?$AA@
CONST	SEGMENT
??_C@_0M@MMNGBMBH@Cancel?5Nuke?$AA@ DB 'Cancel Nuke', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MCEFCEML@Unburrow?$AA@
CONST	SEGMENT
??_C@_08MCEFCEML@Unburrow?$AA@ DB 'Unburrow', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILDJGADH@Burrow?$AA@
CONST	SEGMENT
??_C@_06ILDJGADH@Burrow?$AA@ DB 'Burrow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IMEEPEIA@Hold?5Position?$AA@
CONST	SEGMENT
??_C@_0O@IMEEPEIA@Hold?5Position?$AA@ DB 'Hold Position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PMEPMLHE@Merge?5Archon?$AA@
CONST	SEGMENT
??_C@_0N@PMEPMLHE@Merge?5Archon?$AA@ DB 'Merge Archon', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ICLFFDLC@Exit?5Transport?$AA@
CONST	SEGMENT
??_C@_0P@ICLFFDLC@Exit?5Transport?$AA@ DB 'Exit Transport', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DFGLMHLP@Unload?5All?$AA@
CONST	SEGMENT
??_C@_0L@DFGLMHLP@Unload?5All?$AA@ DB 'Unload All', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGKHOKHK@Build?5Fighter?$AA@
CONST	SEGMENT
??_C@_0O@GGKHOKHK@Build?5Fighter?$AA@ DB 'Build Fighter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JOPHEEP@Siege?$AA@
CONST	SEGMENT
??_C@_05JOPHEEP@Siege?$AA@ DB 'Siege', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BMOMMFKJ@Unsiege?$AA@
CONST	SEGMENT
??_C@_07BMOMMFKJ@Unsiege?$AA@ DB 'Unsiege', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KKLCPKBO@0x24?$AA@
CONST	SEGMENT
??_C@_04KKLCPKBO@0x24?$AA@ DB '0x24', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EDOHLEKH@Morph?5Unit?$AA@
CONST	SEGMENT
??_C@_0L@EDOHLEKH@Morph?5Unit?$AA@ DB 'Morph Unit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JAHPJMFF@Decloak?$AA@
CONST	SEGMENT
??_C@_07JAHPJMFF@Decloak?$AA@ DB 'Decloak', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHGKEIPM@Cloak?$AA@
CONST	SEGMENT
??_C@_05DHGKEIPM@Cloak?$AA@ DB 'Cloak', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKLPBBP@Cancel?5Train?$AA@
CONST	SEGMENT
??_C@_0N@OKLPBBP@Cancel?5Train?$AA@ DB 'Cancel Train', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFNCIBPC@Train?$AA@
CONST	SEGMENT
??_C@_05GFNCIBPC@Train?$AA@ DB 'Train', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OAOLMLFB@Return?5Cargo?$AA@
CONST	SEGMENT
??_C@_0N@OAOLMLFB@Return?5Cargo?$AA@ DB 'Return Cargo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMBOBMNN@Nothing?$AA@
CONST	SEGMENT
??_C@_07MMBOBMNN@Nothing?$AA@ DB 'Nothing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NLHPAPLI@Reaver?5Stop?$AA@
CONST	SEGMENT
??_C@_0M@NLHPAPLI@Reaver?5Stop?$AA@ DB 'Reaver Stop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEADPAMH@Carrier?5Stop?$AA@
CONST	SEGMENT
??_C@_0N@PEADPAMH@Carrier?5Stop?$AA@ DB 'Carrier Stop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MOIHHPNJ@Stop?$AA@
CONST	SEGMENT
??_C@_04MOIHHPNJ@Stop?$AA@ DB 'Stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFADDGHH@Cancel?5Morph?$AA@
CONST	SEGMENT
??_C@_0N@LFADDGHH@Cancel?5Morph?$AA@ DB 'Cancel Morph', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EFOFLOJA@Cancel?5Construction?$AA@
CONST	SEGMENT
??_C@_0BE@EFOFLOJA@Cancel?5Construction?$AA@ DB 'Cancel Construction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDNJBHIE@0x17?$AA@
CONST	SEGMENT
??_C@_04IDNJBHIE@0x17?$AA@ DB '0x17', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKMCCGMF@0x16?$AA@
CONST	SEGMENT
??_C@_04JKMCCGMF@0x16?$AA@ DB '0x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBNBMPMJ@Target?5Click?$AA@
CONST	SEGMENT
??_C@_0N@LBNBMPMJ@Target?5Click?$AA@ DB 'Target Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDGMFCOP@Right?5Click?$AA@
CONST	SEGMENT
??_C@_0M@BDGMFCOP@Right?5Click?$AA@ DB 'Right Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PECPPPOO@Group?5Units?$AA@
CONST	SEGMENT
??_C@_0M@PECPPPOO@Group?5Units?$AA@ DB 'Group Units', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDOAOMEM@Use?5Cheat?$AA@
CONST	SEGMENT
??_C@_09PDOAOMEM@Use?5Cheat?$AA@ DB 'Use Cheat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OBDOKAPF@Unpause?$AA@
CONST	SEGMENT
??_C@_07OBDOKAPF@Unpause?$AA@ DB 'Unpause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEDNBBBD@Pause?$AA@
CONST	SEGMENT
??_C@_05PEDNBBBD@Pause?$AA@ DB 'Pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPLIPCBA@Set?5Speed?$AA@
CONST	SEGMENT
??_C@_09IPLIPCBA@Set?5Speed?$AA@ DB 'Set Speed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NLHLHKFK@Set?5Allies?$AA@
CONST	SEGMENT
??_C@_0L@NLHLHKFK@Set?5Allies?$AA@ DB 'Set Allies', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BOMAKBLO@Set?5Fog?$AA@
CONST	SEGMENT
??_C@_07BOMAKBLO@Set?5Fog?$AA@ DB 'Set Fog', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLNBJNCA@Placebox?$AA@
CONST	SEGMENT
??_C@_08CLNBJNCA@Placebox?$AA@ DB 'Placebox', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IINHCEMO@Shift?5Deselect?$AA@
CONST	SEGMENT
??_C@_0P@IINHCEMO@Shift?5Deselect?$AA@ DB 'Shift Deselect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCDAONAE@Shift?5Select?$AA@
CONST	SEGMENT
??_C@_0N@NCDAONAE@Shift?5Select?$AA@ DB 'Shift Select', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJGPBJLE@Select?$AA@
CONST	SEGMENT
??_C@_06HJGPBJLE@Select?$AA@ DB 'Select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DKOEBAOF@Restart?5Game?$AA@
CONST	SEGMENT
??_C@_0N@DKOEBAOF@Restart?5Game?$AA@ DB 'Restart Game', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EOPBCAJJ@Load?5Game?$AA@
CONST	SEGMENT
??_C@_09EOPBCAJJ@Load?5Game?$AA@ DB 'Load Game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IAJPBCOI@Save?5Game?$AA@
CONST	SEGMENT
??_C@_09IAJPBCOI@Save?5Game?$AA@ DB 'Save Game', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LFNIADGH@Keep?5Alive?$AA@
CONST	SEGMENT
??_C@_0L@LFNIADGH@Keep?5Alive?$AA@ DB 'Keep Alive', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJDGCOHA@0x04?$AA@
CONST	SEGMENT
??_C@_04KJDGCOHA@0x04?$AA@ DB '0x04', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGHHLILH@0x03?$AA@
CONST	SEGMENT
??_C@_04OGHHLILH@0x03?$AA@ DB '0x03', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JELFAMD@Null?5Chat?$AA@
CONST	SEGMENT
??_C@_09JELFAMD@Null?5Chat?$AA@ DB 'Null Chat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPBJEAGM@Private?5Chat?$AA@
CONST	SEGMENT
??_C@_0N@LPBJEAGM@Private?5Chat?$AA@ DB 'Private Chat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJLADDJO@Public?5Chat?$AA@
CONST	SEGMENT
??_C@_0M@MJLADDJO@Public?5Chat?$AA@ DB 'Public Chat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIDPHHDH@Dropped?$AA@
CONST	SEGMENT
??_C@_07GIDPHHDH@Dropped?$AA@ DB 'Dropped', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMPDNAFK@Draw?$AA@
CONST	SEGMENT
??_C@_04HMPDNAFK@Draw?$AA@ DB 'Draw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IAMFKBPN@Finished?$AA@
CONST	SEGMENT
??_C@_08IAMFKBPN@Finished?$AA@ DB 'Finished', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPEFHBMO@Victory?$AA@
CONST	SEGMENT
??_C@_07FPEFHBMO@Victory?$AA@ DB 'Victory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCCCHHDL@Defeat?$AA@
CONST	SEGMENT
??_C@_06JCCCHHDL@Defeat?$AA@ DB 'Defeat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMBKPCGK@Quit?$AA@
CONST	SEGMENT
??_C@_04GMBKPCGK@Quit?$AA@ DB 'Quit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HBLPOPIK@Extra?5High?$AA@
CONST	SEGMENT
??_C@_0L@HBLPOPIK@Extra?5High?$AA@ DB 'Extra High', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHMMJPOJ@High?$AA@
CONST	SEGMENT
??_C@_04PHMMJPOJ@High?$AA@ DB 'High', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMIMKEEK@Low?$AA@
CONST	SEGMENT
??_C@_03CMIMKEEK@Low?$AA@ DB 'Low', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIBGPIAH@Fastest?$AA@
CONST	SEGMENT
??_C@_07MIBGPIAH@Fastest?$AA@ DB 'Fastest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPNKADFG@Faster?$AA@
CONST	SEGMENT
??_C@_06IPNKADFG@Faster?$AA@ DB 'Faster', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HABAFPJG@Fast?$AA@
CONST	SEGMENT
??_C@_04HABAFPJG@Fast?$AA@ DB 'Fast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFAGIKOH@Normal?$AA@
CONST	SEGMENT
??_C@_06EFAGIKOH@Normal?$AA@ DB 'Normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEGLJGGO@Slow?$AA@
CONST	SEGMENT
??_C@_04BEGLJGGO@Slow?$AA@ DB 'Slow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBAHHGIM@Slower?$AA@
CONST	SEGMENT
??_C@_06LBAHHGIM@Slower?$AA@ DB 'Slower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOCOBOLI@Slowest?$AA@
CONST	SEGMENT
??_C@_07KOCOBOLI@Slowest?$AA@ DB 'Slowest', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_pszGroupType DD FLAT:??_C@_04INACKGJP@Save?$AA@
	DD	FLAT:??_C@_06FLGNMNOC@Recall?$AA@
	DD	FLAT:??_C@_03LDFMNCOE@Add?$AA@
_pszGameSpeed DD FLAT:??_C@_07KOCOBOLI@Slowest?$AA@
	DD	FLAT:??_C@_06LBAHHGIM@Slower?$AA@
	DD	FLAT:??_C@_04BEGLJGGO@Slow?$AA@
	DD	FLAT:??_C@_06EFAGIKOH@Normal?$AA@
	DD	FLAT:??_C@_04HABAFPJG@Fast?$AA@
	DD	FLAT:??_C@_06IPNKADFG@Faster?$AA@
	DD	FLAT:??_C@_07MIBGPIAH@Fastest?$AA@
_pszLatency DD	FLAT:??_C@_03CMIMKEEK@Low?$AA@
	DD	FLAT:??_C@_04PHMMJPOJ@High?$AA@
	DD	FLAT:??_C@_0L@HBLPOPIK@Extra?5High?$AA@
_pszLeaveType DD FLAT:??_C@_04GMBKPCGK@Quit?$AA@
	DD	FLAT:??_C@_06JCCCHHDL@Defeat?$AA@
	DD	FLAT:??_C@_07FPEFHBMO@Victory?$AA@
	DD	FLAT:??_C@_08IAMFKBPN@Finished?$AA@
	DD	FLAT:??_C@_04HMPDNAFK@Draw?$AA@
	DD	FLAT:??_C@_07GIDPHHDH@Dropped?$AA@
	ORG $+4
_pszActionNames DD FLAT:??_C@_0M@MJLADDJO@Public?5Chat?$AA@
	DD	FLAT:??_C@_0N@LPBJEAGM@Private?5Chat?$AA@
	DD	FLAT:??_C@_09JELFAMD@Null?5Chat?$AA@
	DD	FLAT:??_C@_04OGHHLILH@0x03?$AA@
	DD	FLAT:??_C@_04KJDGCOHA@0x04?$AA@
	DD	FLAT:??_C@_0L@LFNIADGH@Keep?5Alive?$AA@
	DD	FLAT:??_C@_09IAJPBCOI@Save?5Game?$AA@
	DD	FLAT:??_C@_09EOPBCAJJ@Load?5Game?$AA@
	DD	FLAT:??_C@_0N@DKOEBAOF@Restart?5Game?$AA@
	DD	FLAT:??_C@_06HJGPBJLE@Select?$AA@
	DD	FLAT:??_C@_0N@NCDAONAE@Shift?5Select?$AA@
	DD	FLAT:??_C@_0P@IINHCEMO@Shift?5Deselect?$AA@
	DD	FLAT:??_C@_08CLNBJNCA@Placebox?$AA@
	DD	FLAT:??_C@_07BOMAKBLO@Set?5Fog?$AA@
	DD	FLAT:??_C@_0L@NLHLHKFK@Set?5Allies?$AA@
	DD	FLAT:??_C@_09IPLIPCBA@Set?5Speed?$AA@
	DD	FLAT:??_C@_05PEDNBBBD@Pause?$AA@
	DD	FLAT:??_C@_07OBDOKAPF@Unpause?$AA@
	DD	FLAT:??_C@_09PDOAOMEM@Use?5Cheat?$AA@
	DD	FLAT:??_C@_0M@PECPPPOO@Group?5Units?$AA@
	DD	FLAT:??_C@_0M@BDGMFCOP@Right?5Click?$AA@
	DD	FLAT:??_C@_0N@LBNBMPMJ@Target?5Click?$AA@
	DD	FLAT:??_C@_04JKMCCGMF@0x16?$AA@
	DD	FLAT:??_C@_04IDNJBHIE@0x17?$AA@
	DD	FLAT:??_C@_0BE@EFOFLOJA@Cancel?5Construction?$AA@
	DD	FLAT:??_C@_0N@LFADDGHH@Cancel?5Morph?$AA@
	DD	FLAT:??_C@_04MOIHHPNJ@Stop?$AA@
	DD	FLAT:??_C@_0N@PEADPAMH@Carrier?5Stop?$AA@
	DD	FLAT:??_C@_0M@NLHPAPLI@Reaver?5Stop?$AA@
	DD	FLAT:??_C@_07MMBOBMNN@Nothing?$AA@
	DD	FLAT:??_C@_0N@OAOLMLFB@Return?5Cargo?$AA@
	DD	FLAT:??_C@_05GFNCIBPC@Train?$AA@
	DD	FLAT:??_C@_0N@OKLPBBP@Cancel?5Train?$AA@
	DD	FLAT:??_C@_05DHGKEIPM@Cloak?$AA@
	DD	FLAT:??_C@_07JAHPJMFF@Decloak?$AA@
	DD	FLAT:??_C@_0L@EDOHLEKH@Morph?5Unit?$AA@
	DD	FLAT:??_C@_04KKLCPKBO@0x24?$AA@
	DD	FLAT:??_C@_07BMOMMFKJ@Unsiege?$AA@
	DD	FLAT:??_C@_05JOPHEEP@Siege?$AA@
	DD	FLAT:??_C@_0O@GGKHOKHK@Build?5Fighter?$AA@
	DD	FLAT:??_C@_0L@DFGLMHLP@Unload?5All?$AA@
	DD	FLAT:??_C@_0P@ICLFFDLC@Exit?5Transport?$AA@
	DD	FLAT:??_C@_0N@PMEPMLHE@Merge?5Archon?$AA@
	DD	FLAT:??_C@_0O@IMEEPEIA@Hold?5Position?$AA@
	DD	FLAT:??_C@_06ILDJGADH@Burrow?$AA@
	DD	FLAT:??_C@_08MCEFCEML@Unburrow?$AA@
	DD	FLAT:??_C@_0M@MMNGBMBH@Cancel?5Nuke?$AA@
	DD	FLAT:??_C@_08OLGKIKAG@Lift?5Off?$AA@
	DD	FLAT:??_C@_08NKDBNKBN@Research?$AA@
	DD	FLAT:??_C@_0BA@HNONCJOL@Cancel?5Research?$AA@
	DD	FLAT:??_C@_07CJFOONCK@Upgrade?$AA@
	DD	FLAT:??_C@_0P@JCILHKMO@Cancel?5Upgrade?$AA@
	DD	FLAT:??_C@_0N@IBEDIMJF@Cancel?5Addon?$AA@
	DD	FLAT:??_C@_0P@KIJNPCAM@Morph?5Building?$AA@
	DD	FLAT:??_C@_0N@KGHFBHGG@Use?5Stimpack?$AA@
	DD	FLAT:??_C@_0BF@PHKLFOBD@Game?5Synchronization?$AA@
	DD	FLAT:??_C@_08PAGDMOKP@Voice?5On?$AA@
	DD	FLAT:??_C@_09HLCNEACO@Voice?5Off?$AA@
	DD	FLAT:??_C@_0O@BMDCHFNH@Voice?5Squelch?$AA@
	DD	FLAT:??_C@_0BA@GMBCDJG@Voice?5Unsquelch?$AA@
	DD	FLAT:??_C@_0BC@DICKFKJ@?$FLLobby?$FNStart?5Game?$AA@
	DD	FLAT:??_C@_0BN@OJMALIBE@?$FLLobby?$FNSet?5Download?5Progress?$AA@
	DD	FLAT:??_C@_0BM@PIHGGKL@?$FLLobby?$FNSet?5Slot?5Data?5?$CIHost?$CJ?$AA@
	DD	FLAT:??_C@_0BD@LHOLDPJB@?$FLLobby?$FNAsk?5Version?$AA@
	DD	FLAT:??_C@_0BH@GNJCPAIB@?$FLLobby?$FNConfirm?5Version?$AA@
	DD	FLAT:??_C@_0BA@OIMPIGAN@?$FLLobby?$FNSet?5Race?$AA@
	DD	FLAT:??_C@_0BJ@OGIAHMOJ@?$FLLobby?$FNSet?5Force?5?$CIMelee?$CJ?$AA@
	DD	FLAT:??_C@_0BH@DINGDBEA@?$FLLobby?$FNSet?5Force?5?$CIUMS?$CJ?$AA@
	DD	FLAT:??_C@_0BA@HNAGKNBE@?$FLLobby?$FNSet?5Slot?$AA@
	DD	FLAT:??_C@_0BE@CCEBBKEN@?$FLLobby?$FNSwap?5Players?$AA@
	DD	FLAT:??_C@_0M@LJBCHPLO@?$FLLobby?$FN0x46?$AA@
	DD	FLAT:??_C@_0M@KAAJEOPP@?$FLLobby?$FN0x47?$AA@
	DD	FLAT:??_C@_0BF@NDJBMNCF@?$FLLobby?$FNSet?5Game?5Seed?$AA@
	DD	FLAT:??_C@_0BE@KPJKPOMP@?$FLLobby?$FNRequest?5Info?$AA@
	DD	FLAT:??_C@_0BG@KJAAGDBK@?$FLLobby?$FNSet?5Force?5Data?$AA@
	DD	FLAT:??_C@_0BH@HCFKEAID@?$FLLobby?$FNSet?5Force?5Names?$AA@
	DD	FLAT:??_C@_0M@PPEBHDOC@?$FLLobby?$FNChat?$AA@
	DD	FLAT:??_C@_0N@KDILJGFG@?$FLLobby?$FNChat2?$AA@
	DD	FLAT:??_C@_0BD@EKKNDBJC@?$FLLobby?$FNBoot?5Player?$AA@
	DD	FLAT:??_C@_0BF@PKMGMLFB@?$FLLobby?$FNFile?5Transfer?$AA@
	DD	FLAT:??_C@_0L@NKDFONHA@?$FLResult?$FNOK?$AA@
	DD	FLAT:??_C@_0BG@BEDBIGGC@?$FLResult?$FNNetwork?5Error?$AA@
	DD	FLAT:??_C@_0BA@HJPKKBAA@?$FLResult?$FNUnknown?$AA@
	DD	FLAT:??_C@_0BJ@OACOAKNO@?$FLResult?$FNBriefing?5Started?$AA@
	DD	FLAT:??_C@_0O@PIDPABKE@Skip?5Briefing?$AA@
	DD	FLAT:??_C@_0M@GOBIDMLI@Set?5Latency?$AA@
	DD	FLAT:??_C@_0BB@MGBIANOJ@Set?5Replay?5Speed?$AA@
	DD	FLAT:??_C@_0L@LBCNLCCF@Leave?5Game?$AA@
	DD	FLAT:??_C@_0N@NMOAPDHG@Minimap?5Ping?$AA@
	DD	FLAT:??_C@_04BKFDJCNG@0x59?$AA@
	DD	FLAT:??_C@_0BB@LIPMMPLG@Dark?5Archon?5Meld?$AA@
	DD	FLAT:??_C@_0BB@DENPHCHM@Make?5Game?5Public?$AA@
	DD	FLAT:??_C@_04NKFKOIHC@Chat?$AA@
_DATA	ENDS
;	COMDAT ??_C@_03LDFMNCOE@Add?$AA@
CONST	SEGMENT
??_C@_03LDFMNCOE@Add?$AA@ DB 'Add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLGNMNOC@Recall?$AA@
CONST	SEGMENT
??_C@_06FLGNMNOC@Recall?$AA@ DB 'Recall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACKGJP@Save?$AA@
CONST	SEGMENT
??_C@_04INACKGJP@Save?$AA@ DB 'Save', 00H		; `string'
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Value@?$_Size@U?$_Cons_node@U_Nil@tr1@std@@U123@@tr1@std@@@tr1@std@@2IB
CONST	SEGMENT
?_Value@?$_Size@U?$_Cons_node@U_Nil@tr1@std@@U123@@tr1@std@@@tr1@std@@2IB DD 00H ; std::tr1::_Size<std::tr1::_Cons_node<std::tr1::_Nil,std::tr1::_Nil> >::_Value
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_7StopAction@ReplayTool@@6B@			; ReplayTool::StopAction::`vftable'
PUBLIC	??0StopAction@ReplayTool@@QAE@E_N@Z		; ReplayTool::StopAction::StopAction
PUBLIC	??_R4StopAction@ReplayTool@@6B@			; ReplayTool::StopAction::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStopAction@ReplayTool@@@8		; ReplayTool::StopAction `RTTI Type Descriptor'
PUBLIC	??_R3StopAction@ReplayTool@@8			; ReplayTool::StopAction::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StopAction@ReplayTool@@8			; ReplayTool::StopAction::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StopAction@ReplayTool@@8		; ReplayTool::StopAction::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@GameAction@ReplayTool@@8		; ReplayTool::GameAction::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGameAction@ReplayTool@@@8		; ReplayTool::GameAction `RTTI Type Descriptor'
PUBLIC	??_R3GameAction@ReplayTool@@8			; ReplayTool::GameAction::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GameAction@ReplayTool@@8			; ReplayTool::GameAction::`RTTI Base Class Array'
PUBLIC	?read@StopAction@ReplayTool@@UAEXAAVAbstractReplayReader@2@@Z ; ReplayTool::StopAction::read
PUBLIC	?from@StopAction@ReplayTool@@UAEPAVGameAction@2@E@Z ; ReplayTool::StopAction::from
PUBLIC	?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; ReplayTool::StopAction::toString
EXTRN	??0GameAction@ReplayTool@@QAE@EE@Z:PROC		; ReplayTool::GameAction::GameAction
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R2GameAction@ReplayTool@@8
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\stopaction.cpp
rdata$r	SEGMENT
??_R2GameAction@ReplayTool@@8 DD FLAT:??_R1A@?0A@EA@GameAction@ReplayTool@@8 ; ReplayTool::GameAction::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GameAction@ReplayTool@@8
rdata$r	SEGMENT
??_R3GameAction@ReplayTool@@8 DD 00H			; ReplayTool::GameAction::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GameAction@ReplayTool@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGameAction@ReplayTool@@@8
_DATA	SEGMENT
??_R0?AVGameAction@ReplayTool@@@8 DD FLAT:??_7type_info@@6B@ ; ReplayTool::GameAction `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGameAction@ReplayTool@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@GameAction@ReplayTool@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GameAction@ReplayTool@@8 DD FLAT:??_R0?AVGameAction@ReplayTool@@@8 ; ReplayTool::GameAction::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GameAction@ReplayTool@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StopAction@ReplayTool@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StopAction@ReplayTool@@8 DD FLAT:??_R0?AVStopAction@ReplayTool@@@8 ; ReplayTool::StopAction::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StopAction@ReplayTool@@8
rdata$r	ENDS
;	COMDAT ??_R2StopAction@ReplayTool@@8
rdata$r	SEGMENT
??_R2StopAction@ReplayTool@@8 DD FLAT:??_R1A@?0A@EA@StopAction@ReplayTool@@8 ; ReplayTool::StopAction::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GameAction@ReplayTool@@8
rdata$r	ENDS
;	COMDAT ??_R3StopAction@ReplayTool@@8
rdata$r	SEGMENT
??_R3StopAction@ReplayTool@@8 DD 00H			; ReplayTool::StopAction::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StopAction@ReplayTool@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStopAction@ReplayTool@@@8
_DATA	SEGMENT
??_R0?AVStopAction@ReplayTool@@@8 DD FLAT:??_7type_info@@6B@ ; ReplayTool::StopAction `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStopAction@ReplayTool@@', 00H
_DATA	ENDS
;	COMDAT ??_R4StopAction@ReplayTool@@6B@
rdata$r	SEGMENT
??_R4StopAction@ReplayTool@@6B@ DD 00H			; ReplayTool::StopAction::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStopAction@ReplayTool@@@8
	DD	FLAT:??_R3StopAction@ReplayTool@@8
rdata$r	ENDS
;	COMDAT ??_7StopAction@ReplayTool@@6B@
CONST	SEGMENT
??_7StopAction@ReplayTool@@6B@ DD FLAT:??_R4StopAction@ReplayTool@@6B@ ; ReplayTool::StopAction::`vftable'
	DD	FLAT:?read@StopAction@ReplayTool@@UAEXAAVAbstractReplayReader@2@@Z
	DD	FLAT:?from@StopAction@ReplayTool@@UAEPAVGameAction@2@E@Z
	DD	FLAT:?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0StopAction@ReplayTool@@QAE@E_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_player$ = 8						; size = 1
_myStop$ = 12						; size = 1
??0StopAction@ReplayTool@@QAE@E_N@Z PROC		; ReplayTool::StopAction::StopAction, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	0f b6 45 0c	 movzx	 eax, BYTE PTR _myStop$[ebp]
  00027	f7 d8		 neg	 eax
  00029	1b c0		 sbb	 eax, eax
  0002b	83 e0 fc	 and	 eax, -4			; fffffffcH
  0002e	83 c0 1e	 add	 eax, 30			; 0000001eH
  00031	50		 push	 eax
  00032	0f b6 4d 08	 movzx	 ecx, BYTE PTR _player$[ebp]
  00036	51		 push	 ecx
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0GameAction@ReplayTool@@QAE@EE@Z ; ReplayTool::GameAction::GameAction
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StopAction@ReplayTool@@6B@
  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8a 4d 0c	 mov	 cl, BYTE PTR _myStop$[ebp]
  00055	88 48 09	 mov	 BYTE PTR [eax+9], cl

; 15   : }

  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
??0StopAction@ReplayTool@@QAE@E_N@Z ENDP		; ReplayTool::StopAction::StopAction
_TEXT	ENDS
PUBLIC	??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z ; ReplayTool::GameAction::create1<ReplayTool::StopAction,bool>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\stopaction.h
;	COMDAT ?from@StopAction@ReplayTool@@UAEPAVGameAction@2@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_player$ = 8						; size = 1
?from@StopAction@ReplayTool@@UAEPAVGameAction@2@E@Z PROC ; ReplayTool::StopAction::from, COMDAT
; _this$ = ecx

; 19   :   IMPLEMENT_FROM_WITH_1_PARAM(StopAction, stop);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  0002a	51		 push	 ecx
  0002b	0f b6 55 08	 movzx	 edx, BYTE PTR _player$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z ; ReplayTool::GameAction::create1<ReplayTool::StopAction,bool>
  00035	83 c4 08	 add	 esp, 8
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?from@StopAction@ReplayTool@@UAEPAVGameAction@2@E@Z ENDP ; ReplayTool::StopAction::from
_TEXT	ENDS
PUBLIC	??0StopAction@ReplayTool@@QAE@EE_N@Z		; ReplayTool::StopAction::StopAction
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\stopaction.cpp
;	COMDAT ??0StopAction@ReplayTool@@QAE@EE_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_player$ = 8						; size = 1
_myHow$ = 12						; size = 1
_myStop$ = 16						; size = 1
??0StopAction@ReplayTool@@QAE@EE_N@Z PROC		; ReplayTool::StopAction::StopAction, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	0f b6 45 10	 movzx	 eax, BYTE PTR _myStop$[ebp]
  00027	f7 d8		 neg	 eax
  00029	1b c0		 sbb	 eax, eax
  0002b	83 e0 fc	 and	 eax, -4			; fffffffcH
  0002e	83 c0 1e	 add	 eax, 30			; 0000001eH
  00031	50		 push	 eax
  00032	0f b6 4d 08	 movzx	 ecx, BYTE PTR _player$[ebp]
  00036	51		 push	 ecx
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0GameAction@ReplayTool@@QAE@EE@Z ; ReplayTool::GameAction::GameAction
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StopAction@ReplayTool@@6B@
  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8a 4d 0c	 mov	 cl, BYTE PTR _myHow$[ebp]
  0004e	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8a 4d 10	 mov	 cl, BYTE PTR _myStop$[ebp]
  00057	88 48 09	 mov	 BYTE PTR [eax+9], cl

; 22   : 
; 23   : }

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
??0StopAction@ReplayTool@@QAE@EE_N@Z ENDP		; ReplayTool::StopAction::StopAction
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?read@StopAction@ReplayTool@@UAEXAAVAbstractReplayReader@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_reader$ = 8						; size = 4
?read@StopAction@ReplayTool@@UAEXAAVAbstractReplayReader@2@@Z PROC ; ReplayTool::StopAction::read, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 27   :   how = reader.readBYTE();

  00023	8b 45 08	 mov	 eax, DWORD PTR _reader$[ebp]
  00026	8b 10		 mov	 edx, DWORD PTR [eax]
  00028	8b f4		 mov	 esi, esp
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _reader$[ebp]
  0002d	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00030	ff d0		 call	 eax
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 28   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?read@StopAction@ReplayTool@@UAEXAAVAbstractReplayReader@2@@Z ENDP ; ReplayTool::StopAction::read
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06POGAFBAL@Queued?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	?format@StrUtil@ReplayTool@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ:PROC ; ReplayTool::StrUtil::format
EXTRN	?toString@GameAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; ReplayTool::GameAction::toString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06POGAFBAL@Queued?$AA@
CONST	SEGMENT
??_C@_06POGAFBAL@Queued?$AA@ DB 'Queued', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv90 = -324						; size = 4
tv69 = -320						; size = 4
tv78 = -316						; size = 4
$T171204 = -308						; size = 4
$T157448 = -296						; size = 32
_str$ = -64						; size = 32
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; ReplayTool::StopAction::toString, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd bc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-324]
  00021	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T171204[ebp], 0

; 32   :   string str = GameAction::toString();

  0004f	8d 45 c0	 lea	 eax, DWORD PTR _str$[ebp]
  00052	50		 push	 eax
  00053	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?toString@GameAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; ReplayTool::GameAction::toString
  0005b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 33   :   str += StrUtil::format("%s", how ? "Queued" : "");

  00062	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00065	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00069	85 c9		 test	 ecx, ecx
  0006b	74 0c		 je	 SHORT $LN3@toString
  0006d	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], OFFSET ??_C@_06POGAFBAL@Queued?$AA@
  00077	eb 0a		 jmp	 SHORT $LN4@toString
$LN3@toString:
  00079	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@toString:
  00083	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR tv78[ebp]
  00089	52		 push	 edx
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0008f	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T157448[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?format@StrUtil@ReplayTool@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; ReplayTool::StrUtil::format
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009e	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  000a4	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  000aa	89 8d bc fe ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  000b0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b4	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  000ba	52		 push	 edx
  000bb	8d 4d c0	 lea	 ecx, DWORD PTR _str$[ebp]
  000be	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  000c3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c7	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T157448[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 34   : 
; 35   :   return str;

  000d2	8d 45 c0	 lea	 eax, DWORD PTR _str$[ebp]
  000d5	50		 push	 eax
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000de	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR $T171204[ebp]
  000e4	83 c9 01	 or	 ecx, 1
  000e7	89 8d cc fe ff
	ff		 mov	 DWORD PTR $T171204[ebp], ecx
  000ed	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f1	8d 4d c0	 lea	 ecx, DWORD PTR _str$[ebp]
  000f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 36   : }

  000fc	52		 push	 edx
  000fd	8b cd		 mov	 ecx, ebp
  000ff	50		 push	 eax
  00100	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@toString
  00106	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010b	58		 pop	 eax
  0010c	5a		 pop	 edx
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00117	59		 pop	 ecx
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 cd		 xor	 ecx, ebp
  00120	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00125	81 c4 44 01 00
	00		 add	 esp, 324		; 00000144H
  0012b	3b ec		 cmp	 ebp, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
$LN12@toString:
  00138	01 00 00 00	 DD	 1
  0013c	00 00 00 00	 DD	 $LN11@toString
$LN11@toString:
  00140	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00144	20 00 00 00	 DD	 32			; 00000020H
  00148	00 00 00 00	 DD	 $LN9@toString
$LN9@toString:
  0014c	73		 DB	 115			; 00000073H
  0014d	74		 DB	 116			; 00000074H
  0014e	72		 DB	 114			; 00000072H
  0014f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T157448[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00013	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T171204[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 0f 00 00
	00		 je	 $LN8@toString
  00022	83 a5 cc fe ff
	ff fe		 and	 DWORD PTR $T171204[ebp], -2 ; fffffffeH
  00029	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@toString:
  00031	c3		 ret	 0
__ehhandler$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?toString@StopAction@ReplayTool@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; ReplayTool::StopAction::toString
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T171223 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00045	83 c0 1c	 add	 eax, 28			; 0000001cH
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  0004e	8b cc		 mov	 ecx, esp
  00050	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T171223[ebp], esp
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 703  : 		_Tidy();

  0006b	6a 00		 push	 0
  0006d	6a 00		 push	 0
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 704  : 		assign(_STD forward<_Myt>(_Right));

  00077	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00080	83 c4 04	 add	 esp, 4
  00083	50		 push	 eax
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 752  : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 753  : 		_Tidy(true);

  00049	6a 00		 push	 0
  0004b	6a 01		 push	 1
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 754  : 		}

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 777  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 778  : 		return (append(_Right));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 779  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
$T171244 = -221						; size = 1
$T171245 = -209						; size = 1
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 714  : 		if (this == &_Right)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	3b 45 08	 cmp	 eax, DWORD PTR __Right$[ebp]
  00029	75 05		 jne	 SHORT $LN6@assign

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()

  0002b	e9 b7 00 00 00	 jmp	 $LN5@assign
$LN6@assign:

; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)

  00030	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T171244[ebp]
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003a	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  0003f	50		 push	 eax
  00040	8d 8d 2f ff ff
	ff		 lea	 ecx, DWORD PTR $T171245[ebp]
  00046	51		 push	 ecx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ; std::operator!=<char,char>
  00055	83 c4 08	 add	 esp, 8
  00058	0f b6 d0	 movzx	 edx, al
  0005b	85 d2		 test	 edx, edx
  0005d	74 17		 je	 SHORT $LN4@assign
  0005f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00062	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00066	72 0e		 jb	 SHORT $LN4@assign

; 718  : 			*this = _Right;

  00068	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 719  : 		else

  00074	eb 71		 jmp	 SHORT $LN5@assign
$LN4@assign:

; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  00076	6a 00		 push	 0
  00078	6a 01		 push	 1
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00082	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00085	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00089	73 22		 jae	 SHORT $LN2@assign

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0008e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00091	83 c1 01	 add	 ecx, 1
  00094	51		 push	 ecx
  00095	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00098	83 c2 04	 add	 edx, 4
  0009b	52		 push	 edx
  0009c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	83 c0 04	 add	 eax, 4
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  000ab	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000b3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b6	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 728  : 				_Right._Bx._Ptr = 0;

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  000bc	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN1@assign:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000c9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000cc	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 731  : 			this->_Myres = _Right._Myres;

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000d5	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000d8	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 732  : 
; 733  : 			_Right._Tidy();

  000db	6a 00		 push	 0
  000dd	6a 00		 push	 0
  000df	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000e2	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN5@assign:

; 734  : 			}
; 735  : 		return (*this);

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 736  : 		}

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000f3	3b ec		 cmp	 ebp, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 518  : 		}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 792  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 793  : 		return (append(_Right, 0, npos));

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 794  : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$159485 = -20					; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1987 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1988 : 		if (!_Built)

  00023	0f b6 45 08	 movzx	 eax, BYTE PTR __Built$[ebp]
  00027	85 c0		 test	 eax, eax
  00029	75 02		 jne	 SHORT $LN4@Tidy
  0002b	eb 48		 jmp	 SHORT $LN3@Tidy
$LN4@Tidy:

; 1989 : 			;
; 1990 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00034	72 3f		 jb	 SHORT $LN3@Tidy

; 1991 : 			{	// copy any leftovers to small buffer and deallocate
; 1992 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	89 4d ec	 mov	 DWORD PTR __Ptr$159485[ebp], ecx

; 1993 : 			if (0 < _Newsize)

  0003f	83 7d 0c 00	 cmp	 DWORD PTR __Newsize$[ebp], 0
  00043	76 17		 jbe	 SHORT $LN1@Tidy

; 1994 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$159485[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00050	83 c2 04	 add	 edx, 4
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Tidy:

; 1995 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00062	83 c1 01	 add	 ecx, 1
  00065	51		 push	 ecx
  00066	8b 55 ec	 mov	 edx, DWORD PTR __Ptr$159485[ebp]
  00069	52		 push	 edx
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00070	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN3@Tidy:

; 1996 : 			}
; 1997 : 		this->_Myres = this->_BUF_SIZE - 1;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 1998 : 		_Eos(_Newsize);

  0007f	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	50		 push	 eax
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1999 : 		}

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 498  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
$T171256 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 466  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8d 45 08	 lea	 eax, DWORD PTR __Al$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00065	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>

; 467  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 468  : 			_Alproxy(_Alval);

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 c0 1c	 add	 eax, 28			; 0000001cH
  00070	50		 push	 eax
  00071	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00074	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 469  : 		this->_Myproxy = _Alproxy.allocate(1);

  00079	6a 01		 push	 1
  0007b	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0007e	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	89 01		 mov	 DWORD PTR [ecx], eax

; 470  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

  00088	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T171256[ebp]
  0008e	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00093	50		 push	 eax
  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	51		 push	 ecx
  0009a	8d 55 e3	 lea	 edx, DWORD PTR __Alproxy$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 471  : 		this->_Myproxy->_Mycont = this;

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000ae	89 11		 mov	 DWORD PTR [ecx], edx

; 472  : 		}

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	52		 push	 edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	50		 push	 eax
  000be	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@String_val
  000c4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c9	58		 pop	 eax
  000ca	5a		 pop	 edx
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000df	3b ec		 cmp	 ebp, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
$LN7@String_val:
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN6@String_val
$LN6@String_val:
  000f4	e3 ff ff ff	 DD	 -29			; ffffffe3H
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@String_val
$LN4@String_val:
  00100	5f		 DB	 95			; 0000005fH
  00101	41		 DB	 65			; 00000041H
  00102	6c		 DB	 108			; 0000006cH
  00103	70		 DB	 112			; 00000070H
  00104	72		 DB	 114			; 00000072H
  00105	6f		 DB	 111			; 0000006fH
  00106	78		 DB	 120			; 00000078H
  00107	79		 DB	 121			; 00000079H
  00108	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 65   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 66   : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 475  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 476  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 477  : 			_Alproxy(_Alval);

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0004f	50		 push	 eax
  00050	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 478  : 		this->_Orphan_all();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 479  : 		_Dest_val(_Alproxy, this->_Myproxy);

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	51		 push	 ecx
  00070	8d 55 e3	 lea	 edx, DWORD PTR __Alproxy$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
  00079	83 c4 08	 add	 esp, 8

; 480  : 		_Alproxy.deallocate(this->_Myproxy, 1);

  0007c	6a 01		 push	 1
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	51		 push	 ecx
  00084	8d 4d e3	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00087	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 481  : 		this->_Myproxy = 0;

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 482  : 		}

  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8b f4		 mov	 esi, esp
  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@String_val@2
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
  000de	8b ff		 npad	 2
$LN7@String_val@2:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN6@String_val@2
$LN6@String_val@2:
  000e8	e3 ff ff ff	 DD	 -29			; ffffffe3H
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN4@String_val@2
$LN4@String_val@2:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	41		 DB	 65			; 00000041H
  000f6	6c		 DB	 108			; 0000006cH
  000f7	70		 DB	 112			; 00000070H
  000f8	72		 DB	 114			; 00000072H
  000f9	6f		 DB	 111			; 0000006fH
  000fa	78		 DB	 120			; 00000078H
  000fb	79		 DB	 121			; 00000079H
  000fc	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 762  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 763  : 		return (assign(_Right));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 764  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 798  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 799  : 		if (_Right.size() < _Roff)

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0002b	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  0002e	73 08		 jae	 SHORT $LN4@append

; 800  : 			_Xran();	// _Roff off end

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@append:

; 801  : 		size_type _Num = _Right.size() - _Roff;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00040	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]
  00043	89 45 ec	 mov	 DWORD PTR __Num$[ebp], eax

; 802  : 		if (_Num < _Count)

  00046	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  00049	3b 45 10	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004c	73 06		 jae	 SHORT $LN3@append

; 803  : 			_Count = _Num;	// trim _Count to size

  0004e	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  00051	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax
$LN3@append:

; 804  : 		if (npos - this->_Mysize <= _Count)

  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0005d	2b 48 14	 sub	 ecx, DWORD PTR [eax+20]
  00060	3b 4d 10	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00063	77 08		 ja	 SHORT $LN2@append

; 805  : 			_Xlen();	// result too long

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 806  : 
; 807  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0006d	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00071	76 54		 jbe	 SHORT $LN1@append
  00073	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00079	03 4d 10	 add	 ecx, DWORD PTR __Count$[ebp]
  0007c	89 4d ec	 mov	 DWORD PTR __Num$[ebp], ecx
  0007f	6a 00		 push	 0
  00081	8b 55 ec	 mov	 edx, DWORD PTR __Num$[ebp]
  00084	52		 push	 edx
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0008d	0f b6 c0	 movzx	 eax, al
  00090	85 c0		 test	 eax, eax
  00092	74 33		 je	 SHORT $LN1@append

; 808  : 			{	// make room and append new stuff
; 809  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 810  : 				_Right._Myptr() + _Roff, _Count);

  00094	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00097	50		 push	 eax
  00098	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  000a0	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  000ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 			_Eos(_Num);

  000bb	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@append:

; 812  : 			}
; 813  : 		return (*this);

  000c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN6@append:

; 814  : 		}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000d3	3b ec		 cmp	 ebp, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1510 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1511 : 		return (this->_Mysize);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 1512 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2008 : 		{	// determine current pointer to buffer for nonmutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2009 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2010 : 			: this->_Bx._Buf);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0002a	72 0e		 jb	 SHORT $LN3@Myptr
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], edx
  00038	eb 0c		 jmp	 SHORT $LN4@Myptr
$LN3@Myptr:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], eax
$LN4@Myptr:
  00046	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv82[ebp]

; 2011 : 		}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1905 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1906 : 		return (this->_Alval);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 1c	 add	 eax, 28			; 0000001cH
  00029	50		 push	 eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1907 : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T171299 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1952 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1953 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00023	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T171299[ebp], 0
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00030	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00033	8d 95 2f ff ff
	ff		 lea	 edx, DWORD PTR $T171299[ebp]
  00039	52		 push	 edx
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  00042	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0004b	83 c4 08	 add	 esp, 8

; 1954 : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 527  : 		_Left = _Right;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	88 10		 mov	 BYTE PTR [eax], dl

; 528  : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2002 : 		{	// determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2003 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2004 : 			: this->_Bx._Buf);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0002a	72 0e		 jb	 SHORT $LN3@Myptr@2
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], edx
  00038	eb 0c		 jmp	 SHORT $LN4@Myptr@2
$LN3@Myptr@2:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 04	 add	 eax, 4
  00040	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], eax
$LN4@Myptr@2:
  00046	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv82[ebp]

; 2005 : 		}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2019 : 		{	// report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2020 : 		_Xout_of_range("invalid string position");

  00023	8b f4		 mov	 esi, esp
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Xran:

; 2021 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00023	6a 00		 push	 0
  00025	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
  0002e	83 c4 08	 add	 esp, 8

; 188  : 		}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 886  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 887  : 		return (assign(_Right, 0, npos));

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00028	50		 push	 eax
  00029	6a 00		 push	 0
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 888  : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 892  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 893  : 		if (_Right.size() < _Roff)

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0002b	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  0002e	73 08		 jae	 SHORT $LN5@assign@2

; 894  : 			_Xran();	// _Roff off end

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign@2:

; 895  : 		size_type _Num = _Right.size() - _Roff;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00040	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]
  00043	89 45 ec	 mov	 DWORD PTR __Num$[ebp], eax

; 896  : 		if (_Count < _Num)

  00046	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00049	3b 45 ec	 cmp	 eax, DWORD PTR __Num$[ebp]
  0004c	73 06		 jae	 SHORT $LN4@assign@2

; 897  : 			_Num = _Count;	// trim _Num to size

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00051	89 45 ec	 mov	 DWORD PTR __Num$[ebp], eax
$LN4@assign@2:

; 898  : 
; 899  : 		if (this == &_Right)

  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	3b 45 08	 cmp	 eax, DWORD PTR __Right$[ebp]
  0005a	75 25		 jne	 SHORT $LN3@assign@2

; 900  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00061	50		 push	 eax
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00065	03 4d ec	 add	 ecx, DWORD PTR __Num$[ebp]
  00068	51		 push	 ecx
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00071	8b 55 0c	 mov	 edx, DWORD PTR __Roff$[ebp]
  00074	52		 push	 edx
  00075	6a 00		 push	 0
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0007f	eb 42		 jmp	 SHORT $LN2@assign@2
$LN3@assign@2:

; 901  : 		else if (_Grow(_Num))

  00081	6a 00		 push	 0
  00083	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  00086	50		 push	 eax
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0008f	0f b6 c8	 movzx	 ecx, al
  00092	85 c9		 test	 ecx, ecx
  00094	74 2d		 je	 SHORT $LN2@assign@2

; 902  : 			{	// make room and assign new stuff
; 903  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00096	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  000a2	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 904  : 			_Eos(_Num);

  000b7	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign@2:

; 905  : 			}
; 906  : 		return (*this);

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN7@assign@2:

; 907  : 		}

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv129 = -208						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1958 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1959 : 		if (max_size() < _Newsize)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0002b	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0002e	73 08		 jae	 SHORT $LN6@Grow

; 1960 : 			_Xlen();	// result too long

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 1961 : 		if (this->_Myres < _Newsize)

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	3b 4d 08	 cmp	 ecx, DWORD PTR __Newsize$[ebp]
  00041	73 15		 jae	 SHORT $LN5@Grow

; 1962 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0004d	52		 push	 edx
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00056	eb 53		 jmp	 SHORT $LN4@Grow
$LN5@Grow:

; 1963 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00058	0f b6 45 0c	 movzx	 eax, BYTE PTR __Trim$[ebp]
  0005c	85 c0		 test	 eax, eax
  0005e	74 3b		 je	 SHORT $LN3@Grow
  00060	83 7d 08 10	 cmp	 DWORD PTR __Newsize$[ebp], 16 ; 00000010H
  00064	73 35		 jae	 SHORT $LN3@Grow

; 1964 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1965 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00066	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0006c	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0006f	73 0b		 jae	 SHORT $LN9@Grow
  00071	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00074	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], edx
  0007a	eb 0c		 jmp	 SHORT $LN10@Grow
$LN9@Grow:
  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00082	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
$LN10@Grow:
  00088	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv129[ebp]
  0008e	52		 push	 edx
  0008f	6a 01		 push	 1
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00099	eb 10		 jmp	 SHORT $LN4@Grow
$LN3@Grow:

; 1966 : 		else if (_Newsize == 0)

  0009b	83 7d 08 00	 cmp	 DWORD PTR __Newsize$[ebp], 0
  0009f	75 0a		 jne	 SHORT $LN4@Grow

; 1967 : 			_Eos(0);	// new size is zero, just null terminate

  000a1	6a 00		 push	 0
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 1968 : 		return (0 < _Newsize);	// return true only if more work to do

  000ab	33 c0		 xor	 eax, eax
  000ad	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  000b0	1b c0		 sbb	 eax, eax
  000b2	f7 d8		 neg	 eax
$LN8@Grow:

; 1969 : 		}

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2014 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2015 : 		_Xlength_error("string too long");

  00023	8b f4		 mov	 esi, esp
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Xlen:

; 2016 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$165613 = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1108 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1109 : 		if (this->_Mysize < _Off)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00029	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0002c	73 08		 jae	 SHORT $LN3@erase

; 1110 : 			_Xran();	// _Off off end

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN3@erase:

; 1111 : 		if (this->_Mysize - _Off < _Count)

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003c	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0003f	3b 4d 0c	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00042	73 0c		 jae	 SHORT $LN2@erase

; 1112 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004a	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0004d	89 4d 0c	 mov	 DWORD PTR __Count$[ebp], ecx
$LN2@erase:

; 1113 : 		if (0 < _Count)

  00050	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00054	76 48		 jbe	 SHORT $LN1@erase

; 1114 : 			{	// move elements down
; 1115 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1116 : 				this->_Mysize - _Off - _Count);

  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005c	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0005f	2b 4d 0c	 sub	 ecx, DWORD PTR __Count$[ebp]
  00062	51		 push	 ecx
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0006b	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0006e	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00071	50		 push	 eax
  00072	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0007a	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1117 : 			size_type _Newsize = this->_Mysize - _Count;

  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008c	2b 4d 0c	 sub	 ecx, DWORD PTR __Count$[ebp]
  0008f	89 4d ec	 mov	 DWORD PTR __Newsize$165613[ebp], ecx

; 1118 : 			_Eos(_Newsize);

  00092	8b 45 ec	 mov	 eax, DWORD PTR __Newsize$165613[ebp]
  00095	50		 push	 eax
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@erase:

; 1119 : 			}
; 1120 : 		return (*this);

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@erase:

; 1121 : 		}

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1515 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1516 : 		size_type _Num = this->_Alval.max_size();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00029	e8 00 00 00 00	 call	 ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size
  0002e	89 45 ec	 mov	 DWORD PTR __Num$[ebp], eax

; 1517 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00031	83 7d ec 01	 cmp	 DWORD PTR __Num$[ebp], 1
  00035	77 0c		 ja	 SHORT $LN3@max_size
  00037	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  00041	eb 0c		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00043	8b 45 ec	 mov	 eax, DWORD PTR __Num$[ebp]
  00046	83 e8 01	 sub	 eax, 1
  00049	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
$LN4@max_size:
  0004f	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]

; 1518 : 		}

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv185 = -248						; size = 4
tv184 = -248						; size = 4
__Ptr$ = -48						; size = 4
__Newres$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1918 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00022	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1919 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00049	83 c8 0f	 or	 eax, 15			; 0000000fH
  0004c	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax

; 1920 : 		if (max_size() < _Newres)

  0004f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00057	3b 45 dc	 cmp	 eax, DWORD PTR __Newres$[ebp]
  0005a	73 08		 jae	 SHORT $LN9@Copy

; 1921 : 			_Newres = _Newsize;	// undo roundup if too big

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0005f	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax
  00062	eb 52		 jmp	 SHORT $LN8@Copy
$LN9@Copy:

; 1922 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00064	8b 45 dc	 mov	 eax, DWORD PTR __Newres$[ebp]
  00067	33 d2		 xor	 edx, edx
  00069	b9 03 00 00 00	 mov	 ecx, 3
  0006e	f7 f1		 div	 ecx
  00070	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00073	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00076	d1 e9		 shr	 ecx, 1
  00078	3b c8		 cmp	 ecx, eax
  0007a	77 02		 ja	 SHORT $LN7@Copy
  0007c	eb 38		 jmp	 SHORT $LN8@Copy
$LN7@Copy:

; 1923 : 			;
; 1924 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0007e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  00084	d1 ee		 shr	 esi, 1
  00086	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0008e	2b c6		 sub	 eax, esi
  00090	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  00096	77 13		 ja	 SHORT $LN5@Copy

; 1925 : 			_Newres = this->_Myres
; 1926 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00098	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0009e	d1 e9		 shr	 ecx, 1
  000a0	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	03 4a 18	 add	 ecx, DWORD PTR [edx+24]
  000a6	89 4d dc	 mov	 DWORD PTR __Newres$[ebp], ecx

; 1927 : 		else

  000a9	eb 0b		 jmp	 SHORT $LN8@Copy
$LN5@Copy:

; 1928 : 			_Newres = max_size();	// settle for max_size()

  000ab	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000b3	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 1929 : 
; 1930 : 		_Elem *_Ptr;
; 1931 : 		_TRY_BEGIN

  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1932 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  000bd	8b 45 dc	 mov	 eax, DWORD PTR __Newres$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	50		 push	 eax
  000c4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000ca	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000cf	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv184[ebp], eax
  000d5	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv184[ebp]
  000db	89 4d d0	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000de	eb 66		 jmp	 SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1933 : 		_CATCH_ALL

  000e0	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1934 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000e3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000e6	89 45 dc	 mov	 DWORD PTR __Newres$[ebp], eax

; 1935 : 			_TRY_BEGIN

  000e9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 1936 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  000ed	8b 45 dc	 mov	 eax, DWORD PTR __Newres$[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	50		 push	 eax
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000fa	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000ff	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv185[ebp], eax
  00105	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv185[ebp]
  0010b	89 4d d0	 mov	 DWORD PTR __Ptr$[ebp], ecx
  0010e	eb 22		 jmp	 SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1937 : 			_CATCH_ALL
; 1938 : 			_Tidy(true);	// failed again, discard storage and reraise

  00110	6a 00		 push	 0
  00112	6a 01		 push	 1
  00114	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1939 : 			_RERAISE;

  0011c	6a 00		 push	 0
  0011e	6a 00		 push	 0
  00120	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1940 : 			_CATCH_END

  00125	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  0012c	b8 00 00 00 00	 mov	 eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
  00131	c3		 ret	 0
$LN14@Copy:
  00132	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 1941 : 		_CATCH_END

  00139	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00140	b8 00 00 00 00	 mov	 eax, __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
  00145	c3		 ret	 0
$LN12@Copy:
  00146	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 1942 : 
; 1943 : 		if (0 < _Oldlen)

  0014d	83 7d 0c 00	 cmp	 DWORD PTR __Oldlen$[ebp], 0
  00151	76 19		 jbe	 SHORT $LN1@Copy

; 1944 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  00153	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  00156	50		 push	 eax
  00157	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
  0015f	50		 push	 eax
  00160	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Copy:

; 1945 : 		_Tidy(true);

  0016c	6a 00		 push	 0
  0016e	6a 01		 push	 1
  00170	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1946 : 		this->_Bx._Ptr = _Ptr;

  00178	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0017b	8b 4d d0	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0017e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1947 : 		this->_Myres = _Newres;

  00181	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00184	8b 4d dc	 mov	 ecx, DWORD PTR __Newres$[ebp]
  00187	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1948 : 		_Eos(_Oldlen);

  0018a	8b 45 0c	 mov	 eax, DWORD PTR __Oldlen$[ebp]
  0018d	50		 push	 eax
  0018e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 1949 : 		}

  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  001aa	3b ec		 cmp	 ebp, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 04 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-252]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00023	6a 00		 push	 0
  00025	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0002e	83 c4 08	 add	 esp, 8

; 188  : 		}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

  00023	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR __Count$[ebp], -1

; 219  : 		return (0 < _Count ? _Count : 1);

  0002a	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0002e	76 0b		 jbe	 SHORT $LN3@max_size@2
  00030	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  00033	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00039	eb 0a		 jmp	 SHORT $LN4@max_size@2
$LN3@max_size@2:
  0003b	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
  00045	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]

; 220  : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\gameaction.h
xdata$x	SEGMENT
__unwindtable$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z$0
__ehfuncinfo$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z
_TEXT	SEGMENT
tv76 = -232						; size = 4
$T171357 = -224						; size = 4
$T171358 = -212						; size = 4
__$EHRec$ = -12						; size = 12
_player$ = 8						; size = 1
_param$ = 12						; size = 1
??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z PROC ; ReplayTool::GameAction::create1<ReplayTool::StopAction,bool>, COMDAT

; 39   :   static GameAction* create1(PlayerID player, TParam param) { return new TAction(player, param); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00020	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00044	83 c4 04	 add	 esp, 4
  00047	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T171358[ebp], eax
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR $T171358[ebp], 0
  0005b	74 1d		 je	 SHORT $LN3@create1
  0005d	0f b6 45 0c	 movzx	 eax, BYTE PTR _param$[ebp]
  00061	50		 push	 eax
  00062	0f b6 4d 08	 movzx	 ecx, BYTE PTR _player$[ebp]
  00066	51		 push	 ecx
  00067	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T171358[ebp]
  0006d	e8 00 00 00 00	 call	 ??0StopAction@ReplayTool@@QAE@E_N@Z ; ReplayTool::StopAction::StopAction
  00072	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  00078	eb 0a		 jmp	 SHORT $LN4@create1
$LN3@create1:
  0007a	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN4@create1:
  00084	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv76[ebp]
  0008a	89 95 20 ff ff
	ff		 mov	 DWORD PTR $T171357[ebp], edx
  00090	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00097	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T171357[ebp]
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z$0:
  00000	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T171358[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$create1@VStopAction@ReplayTool@@_N@GameAction@ReplayTool@@SAPAV01@E_N@Z ENDP ; ReplayTool::GameAction::create1<ReplayTool::StopAction,bool>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 79   : 	return ((_Ty&&)_Arg);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 79   : 	return ((_Ty&&)_Arg);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 270  : 	{	// test for allocator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 271  : 	return (!(_Left == _Right));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ; std::operator==<char,char>
  0002b	83 c4 08	 add	 esp, 8
  0002e	0f b6 c0	 movzx	 eax, al
  00031	f7 d8		 neg	 eax
  00033	1b c0		 sbb	 eax, eax
  00035	83 c0 01	 add	 eax, 1

; 272  : 	}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00032	e8 00 00 00 00	 call	 ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct

; 281  : 	}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z PROC ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 287  : 	_Alval.destroy(_Pdest);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00025	e8 00 00 00 00	 call	 ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy

; 288  : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T171382 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	void *_Ptr = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	77 09		 ja	 SHORT $LN4@Allocate

; 34   : 		_Count = 0;

  0002b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  00032	eb 39		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00034	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00038	77 15		 ja	 SHORT $LN1@Allocate
  0003a	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	83 c4 04	 add	 esp, 4
  00046	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  00049	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0004d	75 1e		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0004f	6a 00		 push	 0
  00051	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T171382[ebp]
  00057	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00061	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T171382[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0006d	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 40   : 	}

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b f4		 mov	 esi, esp
  00025	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ ; std::bad_alloc::~bad_alloc
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0c		 je	 SHORT $LN1@scalar
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$LN1@scalar:
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
$T171391 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	void *_Ptr = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	77 09		 ja	 SHORT $LN4@Allocate@2

; 34   : 		_Count = 0;

  0002b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  00032	eb 3f		 jmp	 SHORT $LN3@Allocate@2
$LN4@Allocate@2:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00034	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  0003b	77 18		 ja	 SHORT $LN1@Allocate@2
  0003d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00040	c1 e0 03	 shl	 eax, 3
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0004f	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00053	75 1e		 jne	 SHORT $LN3@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00055	6a 00		 push	 0
  00057	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T171391[ebp]
  0005d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@PBD@Z ; std::bad_alloc::bad_alloc
  00062	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00067	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T171391[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Allocate@2:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00073	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@2:

; 40   : 	}

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b f4		 mov	 esi, esp
  00025	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0
__ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T171397 = -236						; size = 4
$T171398 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z PROC ; std::allocator<std::_Container_proxy>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00045	50		 push	 eax
  00046	6a 08		 push	 8
  00048	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0004d	83 c4 08	 add	 esp, 8
  00050	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T171398[ebp], eax
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR $T171398[ebp], 0
  00064	74 2a		 je	 SHORT $LN3@construct
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0006f	83 c4 04	 add	 esp, 4
  00072	8b 10		 mov	 edx, DWORD PTR [eax]
  00074	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00077	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T171398[ebp]
  0007d	89 11		 mov	 DWORD PTR [ecx], edx
  0007f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00082	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR $T171398[ebp]
  00088	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv74[ebp], edx
  0008e	eb 0a		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00090	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  0009a	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  000a0	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T171397[ebp], eax
  000a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T171398[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00010	83 c4 08	 add	 esp, 8
  00013	c3		 ret	 0
__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ENDP ; std::allocator<std::_Container_proxy>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 57   : 	return (_Where);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 61   : 	{	// delete if placement new fails

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 62   : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z PROC ; std::allocator<std::_Container_proxy>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
  0002c	83 c4 04	 add	 esp, 4

; 214  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 262  : 	{	// test for allocator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 263  : 	return (true);

  0001e	b0 01		 mov	 al, 1

; 264  : 	}

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 79   : 	return ((_Ty&&)_Arg);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z PROC ; std::_Destroy<std::_Container_proxy>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ENDP ; std::_Destroy<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??0_Ignore@tr1@std@@QAE@XZ			; std::tr1::_Ignore::_Ignore
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\tuple
;	COMDAT ??__Eignore@tr1@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@tr1@std@@YAXXZ PROC				; std::tr1::`dynamic initializer for 'ignore'', COMDAT

; 641  : const _Ignore ignore;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET _ignore
  00023	e8 00 00 00 00	 call	 ??0_Ignore@tr1@std@@QAE@XZ ; std::tr1::_Ignore::_Ignore
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Eignore@tr1@std@@YAXXZ ENDP				; std::tr1::`dynamic initializer for 'ignore''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0_Ignore@tr1@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Ignore@tr1@std@@QAE@XZ PROC				; std::tr1::_Ignore::_Ignore, COMDAT
; _this$ = ecx

; 631  : 	_Ignore()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 632  : 		{	// construct
; 633  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0_Ignore@tr1@std@@QAE@XZ ENDP				; std::tr1::_Ignore::_Ignore
_TEXT	ENDS
PUBLIC	??0?$Point@H$07@BWAPI@@QAE@HH@Z			; BWAPI::Point<int,8>::Point<int,8>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\include\bwapi\position.h
;	COMDAT ??__EInvalid@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EInvalid@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'Invalid'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00023	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Invalid
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EInvalid@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'Invalid''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0?$Point@H$07@BWAPI@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point@H$07@BWAPI@@QAE@HH@Z PROC			; BWAPI::Point<int,8>::Point<int,8>, COMDAT
; _this$ = ecx

; 65   :     Point(_T _x = 0, _T _y = 0) : x(_x), y(_y) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __y$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$Point@H$07@BWAPI@@QAE@HH@Z ENDP			; BWAPI::Point<int,8>::Point<int,8>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__ENone@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__ENone@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'None'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 a4 0f 00 00	 push	 4004			; 00000fa4H
  00023	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _None
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__ENone@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'None''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EUnknown@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EUnknown@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'Unknown'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 a8 0f 00 00	 push	 4008			; 00000fa8H
  00023	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Unknown
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EUnknown@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'Unknown''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EOrigin@WalkPositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EOrigin@WalkPositions@BWAPI@@YAXXZ PROC		; BWAPI::WalkPositions::`dynamic initializer for 'Origin'', COMDAT

; 247  :   _MAKE_POSITION_TEMPLATE(WalkPosition,int,8)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET _Origin
  00027	e8 00 00 00 00	 call	 ??0?$Point@H$07@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,8>::Point<int,8>
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??__EOrigin@WalkPositions@BWAPI@@YAXXZ ENDP		; BWAPI::WalkPositions::`dynamic initializer for 'Origin''
text$yc	ENDS
PUBLIC	??0?$Point@H$00@BWAPI@@QAE@HH@Z			; BWAPI::Point<int,1>::Point<int,1>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EInvalid@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EInvalid@Positions@BWAPI@@YAXXZ PROC		; BWAPI::Positions::`dynamic initializer for 'Invalid'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 00 7d 00 00	 push	 32000			; 00007d00H
  00023	68 00 7d 00 00	 push	 32000			; 00007d00H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Invalid
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EInvalid@Positions@BWAPI@@YAXXZ ENDP		; BWAPI::Positions::`dynamic initializer for 'Invalid''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0?$Point@H$00@BWAPI@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point@H$00@BWAPI@@QAE@HH@Z PROC			; BWAPI::Point<int,1>::Point<int,1>, COMDAT
; _this$ = ecx

; 65   :     Point(_T _x = 0, _T _y = 0) : x(_x), y(_y) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __y$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$Point@H$00@BWAPI@@QAE@HH@Z ENDP			; BWAPI::Point<int,1>::Point<int,1>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__ENone@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__ENone@Positions@BWAPI@@YAXXZ PROC			; BWAPI::Positions::`dynamic initializer for 'None'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 20 7d 00 00	 push	 32032			; 00007d20H
  00023	68 00 7d 00 00	 push	 32000			; 00007d00H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _None
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__ENone@Positions@BWAPI@@YAXXZ ENDP			; BWAPI::Positions::`dynamic initializer for 'None''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EUnknown@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EUnknown@Positions@BWAPI@@YAXXZ PROC		; BWAPI::Positions::`dynamic initializer for 'Unknown'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 40 7d 00 00	 push	 32064			; 00007d40H
  00023	68 00 7d 00 00	 push	 32000			; 00007d00H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Unknown
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EUnknown@Positions@BWAPI@@YAXXZ ENDP		; BWAPI::Positions::`dynamic initializer for 'Unknown''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EOrigin@Positions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EOrigin@Positions@BWAPI@@YAXXZ PROC			; BWAPI::Positions::`dynamic initializer for 'Origin'', COMDAT

; 248  :   _MAKE_POSITION_TEMPLATE(Position,int,1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET _Origin
  00027	e8 00 00 00 00	 call	 ??0?$Point@H$00@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,1>::Point<int,1>
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??__EOrigin@Positions@BWAPI@@YAXXZ ENDP			; BWAPI::Positions::`dynamic initializer for 'Origin''
text$yc	ENDS
PUBLIC	??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z		; BWAPI::Point<int,32>::Point<int,32>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EInvalid@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EInvalid@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'Invalid'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00023	68 e8 03 00 00	 push	 1000			; 000003e8H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Invalid
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EInvalid@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'Invalid''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z PROC			; BWAPI::Point<int,32>::Point<int,32>, COMDAT
; _this$ = ecx

; 65   :     Point(_T _x = 0, _T _y = 0) : x(_x), y(_y) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __y$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ENDP			; BWAPI::Point<int,32>::Point<int,32>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??__ENone@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__ENone@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'None'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 e9 03 00 00	 push	 1001			; 000003e9H
  00023	68 e8 03 00 00	 push	 1000			; 000003e8H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _None
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__ENone@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'None''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EUnknown@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EUnknown@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'Unknown'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	68 ea 03 00 00	 push	 1002			; 000003eaH
  00023	68 e8 03 00 00	 push	 1000			; 000003e8H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET _Unknown
  0002d	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??__EUnknown@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'Unknown''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__EOrigin@TilePositions@BWAPI@@YAXXZ
text$yc	SEGMENT
??__EOrigin@TilePositions@BWAPI@@YAXXZ PROC		; BWAPI::TilePositions::`dynamic initializer for 'Origin'', COMDAT

; 249  :   _MAKE_POSITION_TEMPLATE(TilePosition,int,32)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET _Origin
  00027	e8 00 00 00 00	 call	 ??0?$Point@H$0CA@@BWAPI@@QAE@HH@Z ; BWAPI::Point<int,32>::Point<int,32>
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??__EOrigin@TilePositions@BWAPI@@YAXXZ ENDP		; BWAPI::TilePositions::`dynamic initializer for 'Origin''
text$yc	ENDS
_BSS	SEGMENT
_Origin	DQ	01H DUP (?)
_None	DQ	01H DUP (?)
_Invalid DQ	01H DUP (?)
_Unknown DQ	01H DUP (?)
_Origin	DQ	01H DUP (?)
_None	DQ	01H DUP (?)
_Invalid DQ	01H DUP (?)
_Unknown DQ	01H DUP (?)
_Origin	DQ	01H DUP (?)
_None	DQ	01H DUP (?)
_Invalid DQ	01H DUP (?)
_Unknown DQ	01H DUP (?)
_ignore	DB	01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@tr1@std@@YAXXZ
_Invalid$initializer$ DD FLAT:??__EInvalid@WalkPositions@BWAPI@@YAXXZ
_None$initializer$ DD FLAT:??__ENone@WalkPositions@BWAPI@@YAXXZ
_Unknown$initializer$ DD FLAT:??__EUnknown@WalkPositions@BWAPI@@YAXXZ
_Origin$initializer$ DD FLAT:??__EOrigin@WalkPositions@BWAPI@@YAXXZ
_Invalid$initializer$ DD FLAT:??__EInvalid@Positions@BWAPI@@YAXXZ
_None$initializer$ DD FLAT:??__ENone@Positions@BWAPI@@YAXXZ
_Unknown$initializer$ DD FLAT:??__EUnknown@Positions@BWAPI@@YAXXZ
_Origin$initializer$ DD FLAT:??__EOrigin@Positions@BWAPI@@YAXXZ
_Invalid$initializer$ DD FLAT:??__EInvalid@TilePositions@BWAPI@@YAXXZ
_None$initializer$ DD FLAT:??__ENone@TilePositions@BWAPI@@YAXXZ
_Unknown$initializer$ DD FLAT:??__EUnknown@TilePositions@BWAPI@@YAXXZ
_Origin$initializer$ DD FLAT:??__EOrigin@TilePositions@BWAPI@@YAXXZ
CRT$XCU	ENDS
END
