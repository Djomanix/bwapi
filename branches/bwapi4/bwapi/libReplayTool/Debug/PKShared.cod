; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Fili\Development\GP\RtsAiResearch\bwapi\bwapi\libReplayTool\PKShared.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?params@@3U__Param@@A				; params
PUBLIC	?bWorkBuff@@3PADA				; bWorkBuff
PUBLIC	?bSegment@@3PADA				; bSegment
PUBLIC	?bWorkBuff2@@3PADA				; bWorkBuff2
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
_BSS	SEGMENT
?params@@3U__Param@@A DB 018H DUP (?)			; params
?bWorkBuff@@3PADA DB 03134H DUP (?)			; bWorkBuff
?bSegment@@3PADA DB 02000H DUP (?)			; bSegment
?bWorkBuff2@@3PADA DB 08dd8H DUP (?)			; bWorkBuff2
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	?read_buf@@YAIPADPAIPAX@Z			; read_buf
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\pkshared.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?read_buf@@YAIPADPAIPAX@Z
_TEXT	SEGMENT
_dwSize$ = -20						; size = 4
_param$ = -8						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
__param$ = 16						; size = 4
?read_buf@@YAIPADPAIPAX@Z PROC				; read_buf, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 16   :   _Param *param = (_Param*)_param;

  0001e	8b 45 10	 mov	 eax, DWORD PTR __param$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 17   : 
; 18   :   DWORD dwSize = param->dwMaxRead - param->dwReadPos;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _param$[ebp]
  0002a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0002d	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00030	89 55 ec	 mov	 DWORD PTR _dwSize$[ebp], edx

; 19   :   if ( dwSize > *size )

  00033	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  00036	8b 4d ec	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00039	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003b	76 08		 jbe	 SHORT $LN1@read_buf

; 20   :     dwSize = *size;

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	89 4d ec	 mov	 DWORD PTR _dwSize$[ebp], ecx
$LN1@read_buf:

; 21   :   memcpy(buf, &param->pCompressedData[param->dwReadPos], dwSize);

  00045	8b 45 ec	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00048	50		 push	 eax
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _param$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00051	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00054	52		 push	 edx
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _memcpy
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 22   :   param->dwReadPos += dwSize;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00064	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00067	03 4d ec	 add	 ecx, DWORD PTR _dwSize$[ebp]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  0006d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 23   :   return dwSize;

  00070	8b 45 ec	 mov	 eax, DWORD PTR _dwSize$[ebp]

; 24   : }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?read_buf@@YAIPADPAIPAX@Z ENDP				; read_buf
_TEXT	ENDS
PUBLIC	?write_buf@@YAXPADPAIPAX@Z			; write_buf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?write_buf@@YAXPADPAIPAX@Z
_TEXT	SEGMENT
_param$ = -8						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
__param$ = 16						; size = 4
?write_buf@@YAXPADPAIPAX@Z PROC				; write_buf, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 27   :   _Param *param = (_Param*)_param;

  0001e	8b 45 10	 mov	 eax, DWORD PTR __param$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR _param$[ebp], eax

; 28   :   if ( param->dwWritePos + *size <= param->dwMaxWrite )

  00024	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00027	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002a	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  0002d	03 0a		 add	 ecx, DWORD PTR [edx]
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00032	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00035	77 1f		 ja	 SHORT $LN1@write_buf

; 29   :     memcpy(&param->pDecompressedData[param->dwWritePos], buf, *size);

  00037	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	51		 push	 ecx
  0003d	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00040	52		 push	 edx
  00041	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00044	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00047	8b 55 f8	 mov	 edx, DWORD PTR _param$[ebp]
  0004a	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memcpy
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@write_buf:

; 30   :   param->dwWritePos += *size;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00059	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  0005f	03 0a		 add	 ecx, DWORD PTR [edx]
  00061	8b 45 f8	 mov	 eax, DWORD PTR _param$[ebp]
  00064	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 31   : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?write_buf@@YAXPADPAIPAX@Z ENDP				; write_buf
_TEXT	ENDS
PUBLIC	??_C@_0BD@BLBPMHPO@ChunkSize?5?$DO?5output?$AA@	; `string'
PUBLIC	??$Read@I@FileReader@ReplayTool@@QAEIXZ		; ReplayTool::FileReader::Read<unsigned int>
PUBLIC	??$Read@U__Part@@@FileReader@ReplayTool@@QAE?AU__Part@@XZ ; ReplayTool::FileReader::Read<__Part>
PUBLIC	?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ; DecompressRead
EXTRN	_crc32pk:PROC
EXTRN	__imp__free:PROC
EXTRN	_explode:PROC
EXTRN	?Read@FileReader@ReplayTool@@QAEXPAXK@Z:PROC	; ReplayTool::FileReader::Read
EXTRN	__imp__malloc:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_memset:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0BD@BLBPMHPO@ChunkSize?5?$DO?5output?$AA@
CONST	SEGMENT
??_C@_0BD@BLBPMHPO@ChunkSize?5?$DO?5output?$AA@ DB 'ChunkSize > output', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z
_TEXT	SEGMENT
_dwOld$ = -96						; size = 4
_dwSize$ = -84						; size = 4
_pTmp$85319 = -72					; size = 4
_chunkSize$85313 = -60					; size = 4
_s$85309 = -48						; size = 4
_dwPos$ = -36						; size = 4
_hdr$ = -24						; size = 8
__pOutput$ = -8						; size = 4
_pOutput$ = 8						; size = 4
_outputSize$ = 12					; size = 4
_fr$ = 16						; size = 4
?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z PROC ; DecompressRead, COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00012	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 35   :   if ( !outputSize )

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _outputSize$[ebp], 0
  00022	75 07		 jne	 SHORT $LN10@Decompress

; 36   :     return false;

  00024	32 c0		 xor	 al, al
  00026	e9 d9 01 00 00	 jmp	 $LN11@Decompress
$LN10@Decompress:

; 37   : 
; 38   :   char *_pOutput = (char*)pOutput;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _pOutput$[ebp]
  0002e	89 45 f8	 mov	 DWORD PTR __pOutput$[ebp], eax

; 39   :   memset(bWorkBuff, 0, sizeof(bWorkBuff));

  00031	68 34 31 00 00	 push	 12596			; 00003134H
  00036	6a 00		 push	 0
  00038	68 00 00 00 00	 push	 OFFSET ?bWorkBuff@@3PADA ; bWorkBuff
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 40   :   memset(bSegment, 0, sizeof(bSegment));

  00045	68 00 20 00 00	 push	 8192			; 00002000H
  0004a	6a 00		 push	 0
  0004c	68 00 00 00 00	 push	 OFFSET ?bSegment@@3PADA	; bSegment
  00051	e8 00 00 00 00	 call	 _memset
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   :   memset(&params, 0, sizeof(params));

  00059	6a 18		 push	 24			; 00000018H
  0005b	6a 00		 push	 0
  0005d	68 00 00 00 00	 push	 OFFSET ?params@@3U__Param@@A ; params
  00062	e8 00 00 00 00	 call	 _memset
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 
; 43   :   _Part hdr = fr.Read<_Part>();

  0006a	8d 45 e8	 lea	 eax, DWORD PTR _hdr$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d 10	 mov	 ecx, DWORD PTR _fr$[ebp]
  00071	e8 00 00 00 00	 call	 ??$Read@U__Part@@@FileReader@ReplayTool@@QAE?AU__Part@@XZ ; ReplayTool::FileReader::Read<__Part>

; 44   :   DWORD dwPos = 0;

  00076	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwPos$[ebp], 0

; 45   :   for ( DWORD s = 0; s < hdr.dwSectionCount; ++s )

  0007d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _s$85309[ebp], 0
  00084	eb 09		 jmp	 SHORT $LN9@Decompress
$LN8@Decompress:
  00086	8b 45 d0	 mov	 eax, DWORD PTR _s$85309[ebp]
  00089	83 c0 01	 add	 eax, 1
  0008c	89 45 d0	 mov	 DWORD PTR _s$85309[ebp], eax
$LN9@Decompress:
  0008f	8b 45 d0	 mov	 eax, DWORD PTR _s$85309[ebp]
  00092	3b 45 ec	 cmp	 eax, DWORD PTR _hdr$[ebp+4]
  00095	0f 83 3e 01 00
	00		 jae	 $LN7@Decompress

; 46   :   {
; 47   :     size_t chunkSize = fr.Read<size_t>();

  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _fr$[ebp]
  0009e	e8 00 00 00 00	 call	 ??$Read@I@FileReader@ReplayTool@@QAEIXZ ; ReplayTool::FileReader::Read<unsigned int>
  000a3	89 45 c4	 mov	 DWORD PTR _chunkSize$85313[ebp], eax

; 48   :     if ( chunkSize > outputSize )

  000a6	8b 45 c4	 mov	 eax, DWORD PTR _chunkSize$85313[ebp]
  000a9	3b 45 0c	 cmp	 eax, DWORD PTR _outputSize$[ebp]
  000ac	76 21		 jbe	 SHORT $LN6@Decompress

; 49   :     {
; 50   :       MessageBox(NULL, "ChunkSize > output", 0, 0);

  000ae	8b f4		 mov	 esi, esp
  000b0	6a 00		 push	 0
  000b2	6a 00		 push	 0
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BLBPMHPO@ChunkSize?5?$DO?5output?$AA@
  000b9	6a 00		 push	 0
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  000c1	3b f4		 cmp	 esi, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 51   :       return false;

  000c8	32 c0		 xor	 al, al
  000ca	e9 35 01 00 00	 jmp	 $LN11@Decompress
$LN6@Decompress:

; 52   :     }
; 53   : 
; 54   :     char *pTmp = (char*)malloc(chunkSize);

  000cf	8b f4		 mov	 esi, esp
  000d1	8b 45 c4	 mov	 eax, DWORD PTR _chunkSize$85313[ebp]
  000d4	50		 push	 eax
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000db	83 c4 04	 add	 esp, 4
  000de	3b f4		 cmp	 esi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	89 45 b8	 mov	 DWORD PTR _pTmp$85319[ebp], eax

; 55   :     if ( pTmp != nullptr )

  000e8	83 7d b8 00	 cmp	 DWORD PTR _pTmp$85319[ebp], 0
  000ec	0f 84 e2 00 00
	00		 je	 $LN5@Decompress

; 56   :     {
; 57   :       fr.Read(pTmp, chunkSize);

  000f2	8b 45 c4	 mov	 eax, DWORD PTR _chunkSize$85313[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d b8	 mov	 ecx, DWORD PTR _pTmp$85319[ebp]
  000f9	51		 push	 ecx
  000fa	8b 4d 10	 mov	 ecx, DWORD PTR _fr$[ebp]
  000fd	e8 00 00 00 00	 call	 ?Read@FileReader@ReplayTool@@QAEXPAXK@Z ; ReplayTool::FileReader::Read

; 58   :       if ( chunkSize != outputSize )

  00102	8b 45 c4	 mov	 eax, DWORD PTR _chunkSize$85313[ebp]
  00105	3b 45 0c	 cmp	 eax, DWORD PTR _outputSize$[ebp]
  00108	0f 84 90 00 00
	00		 je	 $LN4@Decompress

; 59   :       {
; 60   :         memset(&params, 0, sizeof(params));

  0010e	6a 18		 push	 24			; 00000018H
  00110	6a 00		 push	 0
  00112	68 00 00 00 00	 push	 OFFSET ?params@@3U__Param@@A ; params
  00117	e8 00 00 00 00	 call	 _memset
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 61   :         params.pCompressedData    = pTmp;

  0011f	8b 45 b8	 mov	 eax, DWORD PTR _pTmp$85319[ebp]
  00122	a3 00 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A, eax

; 62   :         params.dwMaxRead          = chunkSize;

  00127	8b 45 c4	 mov	 eax, DWORD PTR _chunkSize$85313[ebp]
  0012a	a3 10 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A+16, eax

; 63   :         params.pDecompressedData  = bSegment;

  0012f	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A+8, OFFSET ?bSegment@@3PADA ; bSegment

; 64   :         params.dwMaxWrite         = sizeof(bSegment);

  00139	c7 05 14 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A+20, 8192 ; 00002000H

; 65   : 
; 66   :         if ( explode(&read_buf, &write_buf, bWorkBuff, &params) )

  00143	68 00 00 00 00	 push	 OFFSET ?params@@3U__Param@@A ; params
  00148	68 00 00 00 00	 push	 OFFSET ?bWorkBuff@@3PADA ; bWorkBuff
  0014d	68 00 00 00 00	 push	 OFFSET ?write_buf@@YAXPADPAIPAX@Z ; write_buf
  00152	68 00 00 00 00	 push	 OFFSET ?read_buf@@YAIPADPAIPAX@Z ; read_buf
  00157	e8 00 00 00 00	 call	 _explode
  0015c	83 c4 10	 add	 esp, 16			; 00000010H
  0015f	85 c0		 test	 eax, eax
  00161	74 07		 je	 SHORT $LN3@Decompress

; 67   :           return false;

  00163	32 c0		 xor	 al, al
  00165	e9 9a 00 00 00	 jmp	 $LN11@Decompress
$LN3@Decompress:

; 68   : 
; 69   :         if ( params.dwWritePos <= sizeof(bSegment) )

  0016a	81 3d 0c 00 00
	00 00 20 00 00	 cmp	 DWORD PTR ?params@@3U__Param@@A+12, 8192 ; 00002000H
  00174	77 26		 ja	 SHORT $LN2@Decompress

; 70   :         {
; 71   :           memcpy(&_pOutput[dwPos], bSegment, params.dwWritePos);

  00176	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?params@@3U__Param@@A+12
  0017b	50		 push	 eax
  0017c	68 00 00 00 00	 push	 OFFSET ?bSegment@@3PADA	; bSegment
  00181	8b 4d f8	 mov	 ecx, DWORD PTR __pOutput$[ebp]
  00184	03 4d dc	 add	 ecx, DWORD PTR _dwPos$[ebp]
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 _memcpy
  0018d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   :           dwPos     += params.dwWritePos;

  00190	8b 45 dc	 mov	 eax, DWORD PTR _dwPos$[ebp]
  00193	03 05 0c 00 00
	00		 add	 eax, DWORD PTR ?params@@3U__Param@@A+12
  00199	89 45 dc	 mov	 DWORD PTR _dwPos$[ebp], eax
$LN2@Decompress:

; 73   :         }
; 74   :       }
; 75   :       else

  0019c	eb 20		 jmp	 SHORT $LN1@Decompress
$LN4@Decompress:

; 76   :       {
; 77   :         memcpy(&_pOutput[dwPos], pTmp, chunkSize);

  0019e	8b 45 c4	 mov	 eax, DWORD PTR _chunkSize$85313[ebp]
  001a1	50		 push	 eax
  001a2	8b 4d b8	 mov	 ecx, DWORD PTR _pTmp$85319[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 f8	 mov	 edx, DWORD PTR __pOutput$[ebp]
  001a9	03 55 dc	 add	 edx, DWORD PTR _dwPos$[ebp]
  001ac	52		 push	 edx
  001ad	e8 00 00 00 00	 call	 _memcpy
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 78   :         dwPos += chunkSize;

  001b5	8b 45 dc	 mov	 eax, DWORD PTR _dwPos$[ebp]
  001b8	03 45 c4	 add	 eax, DWORD PTR _chunkSize$85313[ebp]
  001bb	89 45 dc	 mov	 DWORD PTR _dwPos$[ebp], eax
$LN1@Decompress:

; 79   :       }
; 80   :       free(pTmp);

  001be	8b f4		 mov	 esi, esp
  001c0	8b 45 b8	 mov	 eax, DWORD PTR _pTmp$85319[ebp]
  001c3	50		 push	 eax
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001ca	83 c4 04	 add	 esp, 4
  001cd	3b f4		 cmp	 esi, esp
  001cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Decompress:

; 81   :     }
; 82   :   }

  001d4	e9 ad fe ff ff	 jmp	 $LN8@Decompress
$LN7@Decompress:

; 83   : 
; 84   :   unsigned int  dwSize = outputSize;

  001d9	8b 45 0c	 mov	 eax, DWORD PTR _outputSize$[ebp]
  001dc	89 45 ac	 mov	 DWORD PTR _dwSize$[ebp], eax

; 85   :   unsigned long dwOld  = ~0;

  001df	c7 45 a0 ff ff
	ff ff		 mov	 DWORD PTR _dwOld$[ebp], -1

; 86   :   return crc32pk((char*)pOutput, &dwSize, &dwOld) == hdr.dwCrc32Sum;

  001e6	8d 45 a0	 lea	 eax, DWORD PTR _dwOld$[ebp]
  001e9	50		 push	 eax
  001ea	8d 4d ac	 lea	 ecx, DWORD PTR _dwSize$[ebp]
  001ed	51		 push	 ecx
  001ee	8b 55 08	 mov	 edx, DWORD PTR _pOutput$[ebp]
  001f1	52		 push	 edx
  001f2	e8 00 00 00 00	 call	 _crc32pk
  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fa	33 c9		 xor	 ecx, ecx
  001fc	3b 45 e8	 cmp	 eax, DWORD PTR _hdr$[ebp]
  001ff	0f 94 c1	 sete	 cl
  00202	8a c1		 mov	 al, cl
$LN11@Decompress:

; 87   : }

  00204	52		 push	 edx
  00205	8b cd		 mov	 ecx, ebp
  00207	50		 push	 eax
  00208	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@Decompress
  0020e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00213	58		 pop	 eax
  00214	5a		 pop	 edx
  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	5b		 pop	 ebx
  00218	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0021e	3b ec		 cmp	 ebp, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
  00229	8d 49 00	 npad	 3
$LN17@Decompress:
  0022c	03 00 00 00	 DD	 3
  00230	00 00 00 00	 DD	 $LN16@Decompress
$LN16@Decompress:
  00234	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00238	08 00 00 00	 DD	 8
  0023c	00 00 00 00	 DD	 $LN13@Decompress
  00240	ac ff ff ff	 DD	 -84			; ffffffacH
  00244	04 00 00 00	 DD	 4
  00248	00 00 00 00	 DD	 $LN14@Decompress
  0024c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00250	04 00 00 00	 DD	 4
  00254	00 00 00 00	 DD	 $LN15@Decompress
$LN15@Decompress:
  00258	64		 DB	 100			; 00000064H
  00259	77		 DB	 119			; 00000077H
  0025a	4f		 DB	 79			; 0000004fH
  0025b	6c		 DB	 108			; 0000006cH
  0025c	64		 DB	 100			; 00000064H
  0025d	00		 DB	 0
$LN14@Decompress:
  0025e	64		 DB	 100			; 00000064H
  0025f	77		 DB	 119			; 00000077H
  00260	53		 DB	 83			; 00000053H
  00261	69		 DB	 105			; 00000069H
  00262	7a		 DB	 122			; 0000007aH
  00263	65		 DB	 101			; 00000065H
  00264	00		 DB	 0
$LN13@Decompress:
  00265	68		 DB	 104			; 00000068H
  00266	64		 DB	 100			; 00000064H
  00267	72		 DB	 114			; 00000072H
  00268	00		 DB	 0
?DecompressRead@@YA_NPAXIAAVFileReader@ReplayTool@@@Z ENDP ; DecompressRead
_TEXT	ENDS
PUBLIC	??$Write@K@FileWriter@ReplayTool@@QAEXK@Z	; ReplayTool::FileWriter::Write<unsigned long>
PUBLIC	??$Write@U__Part@@@FileWriter@ReplayTool@@QAEXU__Part@@@Z ; ReplayTool::FileWriter::Write<__Part>
PUBLIC	?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ; CompressWrite
EXTRN	?WriteRaw@FileWriter@ReplayTool@@QAEXPAXI@Z:PROC ; ReplayTool::FileWriter::WriteRaw
EXTRN	_implode:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z
_TEXT	SEGMENT
_dwImplSize$85354 = -108				; size = 4
_dwType$85353 = -96					; size = 4
_dwWriteSize$85351 = -84				; size = 4
_s$85347 = -72						; size = 4
_dwPos$ = -60						; size = 4
_dwOld$ = -48						; size = 4
_dwSize$ = -36						; size = 4
_hdr$ = -24						; size = 8
__pInput$ = -8						; size = 4
_pInput$ = 8						; size = 4
_inputSize$ = 12					; size = 4
_fw$ = 16						; size = 4
?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z PROC ; CompressWrite, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 91   :   if ( !pInput )

  0001e	83 7d 08 00	 cmp	 DWORD PTR _pInput$[ebp], 0
  00022	75 05		 jne	 SHORT $LN11@CompressWr

; 92   :     return;

  00024	e9 c1 01 00 00	 jmp	 $LN12@CompressWr
$LN11@CompressWr:

; 93   : 
; 94   :   char *_pInput = (char*)pInput;

  00029	8b 45 08	 mov	 eax, DWORD PTR _pInput$[ebp]
  0002c	89 45 f8	 mov	 DWORD PTR __pInput$[ebp], eax

; 95   :   memset(bWorkBuff2, 0, sizeof(bWorkBuff2));

  0002f	68 d8 8d 00 00	 push	 36312			; 00008dd8H
  00034	6a 00		 push	 0
  00036	68 00 00 00 00	 push	 OFFSET ?bWorkBuff2@@3PADA ; bWorkBuff2
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 96   :   memset(bSegment, 0, sizeof(bSegment));

  00043	68 00 20 00 00	 push	 8192			; 00002000H
  00048	6a 00		 push	 0
  0004a	68 00 00 00 00	 push	 OFFSET ?bSegment@@3PADA	; bSegment
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 97   :   memset(&params, 0, sizeof(params));

  00057	6a 18		 push	 24			; 00000018H
  00059	6a 00		 push	 0
  0005b	68 00 00 00 00	 push	 OFFSET ?params@@3U__Param@@A ; params
  00060	e8 00 00 00 00	 call	 _memset
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 98   : 
; 99   :   // Write Header
; 100  :   _Part hdr = { 0 };

  00068	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hdr$[ebp], 0
  0006f	33 c0		 xor	 eax, eax
  00071	89 45 ec	 mov	 DWORD PTR _hdr$[ebp+4], eax

; 101  : 
; 102  :   // checksum
; 103  :   unsigned int  dwSize = inputSize;

  00074	8b 45 0c	 mov	 eax, DWORD PTR _inputSize$[ebp]
  00077	89 45 dc	 mov	 DWORD PTR _dwSize$[ebp], eax

; 104  :   unsigned long dwOld  = ~0;

  0007a	c7 45 d0 ff ff
	ff ff		 mov	 DWORD PTR _dwOld$[ebp], -1

; 105  :   hdr.dwCrc32Sum = crc32pk((char*)pInput, &dwSize, &dwOld);

  00081	8d 45 d0	 lea	 eax, DWORD PTR _dwOld$[ebp]
  00084	50		 push	 eax
  00085	8d 4d dc	 lea	 ecx, DWORD PTR _dwSize$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 08	 mov	 edx, DWORD PTR _pInput$[ebp]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 _crc32pk
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	89 45 e8	 mov	 DWORD PTR _hdr$[ebp], eax

; 106  : 
; 107  :   // sections
; 108  :   hdr.dwSectionCount = dwSize / 0x2000;

  00098	8b 45 dc	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0009b	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0009e	89 45 ec	 mov	 DWORD PTR _hdr$[ebp+4], eax

; 109  :   if ( dwSize % 0x2000 )

  000a1	8b 45 dc	 mov	 eax, DWORD PTR _dwSize$[ebp]
  000a4	33 d2		 xor	 edx, edx
  000a6	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  000ab	f7 f1		 div	 ecx
  000ad	85 d2		 test	 edx, edx
  000af	74 09		 je	 SHORT $LN10@CompressWr

; 110  :     hdr.dwSectionCount++;

  000b1	8b 45 ec	 mov	 eax, DWORD PTR _hdr$[ebp+4]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 ec	 mov	 DWORD PTR _hdr$[ebp+4], eax
$LN10@CompressWr:

; 111  :   
; 112  :   // write
; 113  :   fw.Write<_Part>(hdr);

  000ba	8b 45 ec	 mov	 eax, DWORD PTR _hdr$[ebp+4]
  000bd	50		 push	 eax
  000be	8b 4d e8	 mov	 ecx, DWORD PTR _hdr$[ebp]
  000c1	51		 push	 ecx
  000c2	8b 4d 10	 mov	 ecx, DWORD PTR _fw$[ebp]
  000c5	e8 00 00 00 00	 call	 ??$Write@U__Part@@@FileWriter@ReplayTool@@QAEXU__Part@@@Z ; ReplayTool::FileWriter::Write<__Part>

; 114  : 
; 115  :   // Iterate sections
; 116  :   DWORD dwPos = 0;

  000ca	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _dwPos$[ebp], 0

; 117  :   for ( DWORD s = 0; s < hdr.dwSectionCount; ++s )

  000d1	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _s$85347[ebp], 0
  000d8	eb 09		 jmp	 SHORT $LN9@CompressWr
$LN8@CompressWr:
  000da	8b 45 b8	 mov	 eax, DWORD PTR _s$85347[ebp]
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 b8	 mov	 DWORD PTR _s$85347[ebp], eax
$LN9@CompressWr:
  000e3	8b 45 b8	 mov	 eax, DWORD PTR _s$85347[ebp]
  000e6	3b 45 ec	 cmp	 eax, DWORD PTR _hdr$[ebp+4]
  000e9	0f 83 fb 00 00
	00		 jae	 $LN12@CompressWr

; 118  :   {
; 119  :     DWORD dwWriteSize = inputSize - dwPos;

  000ef	8b 45 0c	 mov	 eax, DWORD PTR _inputSize$[ebp]
  000f2	2b 45 c4	 sub	 eax, DWORD PTR _dwPos$[ebp]
  000f5	89 45 ac	 mov	 DWORD PTR _dwWriteSize$85351[ebp], eax

; 120  :     if ( dwWriteSize > 0x2000 )

  000f8	81 7d ac 00 20
	00 00		 cmp	 DWORD PTR _dwWriteSize$85351[ebp], 8192 ; 00002000H
  000ff	76 07		 jbe	 SHORT $LN6@CompressWr

; 121  :       dwWriteSize = 0x2000;

  00101	c7 45 ac 00 20
	00 00		 mov	 DWORD PTR _dwWriteSize$85351[ebp], 8192 ; 00002000H
$LN6@CompressWr:

; 122  : 
; 123  :     memset(&params, 0, sizeof(params));

  00108	6a 18		 push	 24			; 00000018H
  0010a	6a 00		 push	 0
  0010c	68 00 00 00 00	 push	 OFFSET ?params@@3U__Param@@A ; params
  00111	e8 00 00 00 00	 call	 _memset
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH

; 124  :     params.pCompressedData    = &_pInput[dwPos];

  00119	8b 45 f8	 mov	 eax, DWORD PTR __pInput$[ebp]
  0011c	03 45 c4	 add	 eax, DWORD PTR _dwPos$[ebp]
  0011f	a3 00 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A, eax

; 125  :     params.dwMaxRead          = dwWriteSize;

  00124	8b 45 ac	 mov	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  00127	a3 10 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A+16, eax

; 126  :     params.pDecompressedData  = bSegment;

  0012c	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A+8, OFFSET ?bSegment@@3PADA ; bSegment

; 127  :     params.dwMaxWrite         = dwWriteSize;

  00136	8b 45 ac	 mov	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  00139	a3 14 00 00 00	 mov	 DWORD PTR ?params@@3U__Param@@A+20, eax

; 128  : 
; 129  :     unsigned int dwType = 0;

  0013e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _dwType$85353[ebp], 0

; 130  :     unsigned int dwImplSize = 0x400;

  00145	c7 45 94 00 04
	00 00		 mov	 DWORD PTR _dwImplSize$85354[ebp], 1024 ; 00000400H

; 131  :     if ( implode(&read_buf, &write_buf, bWorkBuff2, &params, &dwType, &dwImplSize) || params.dwWritePos >= dwWriteSize )

  0014c	8d 45 94	 lea	 eax, DWORD PTR _dwImplSize$85354[ebp]
  0014f	50		 push	 eax
  00150	8d 4d a0	 lea	 ecx, DWORD PTR _dwType$85353[ebp]
  00153	51		 push	 ecx
  00154	68 00 00 00 00	 push	 OFFSET ?params@@3U__Param@@A ; params
  00159	68 00 00 00 00	 push	 OFFSET ?bWorkBuff2@@3PADA ; bWorkBuff2
  0015e	68 00 00 00 00	 push	 OFFSET ?write_buf@@YAXPADPAIPAX@Z ; write_buf
  00163	68 00 00 00 00	 push	 OFFSET ?read_buf@@YAIPADPAIPAX@Z ; read_buf
  00168	e8 00 00 00 00	 call	 _implode
  0016d	83 c4 18	 add	 esp, 24			; 00000018H
  00170	85 c0		 test	 eax, eax
  00172	75 0a		 jne	 SHORT $LN4@CompressWr
  00174	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?params@@3U__Param@@A+12
  00179	3b 45 ac	 cmp	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  0017c	72 32		 jb	 SHORT $LN5@CompressWr
$LN4@CompressWr:

; 132  :     {
; 133  :       if ( !dwWriteSize )

  0017e	83 7d ac 00	 cmp	 DWORD PTR _dwWriteSize$85351[ebp], 0
  00182	75 02		 jne	 SHORT $LN3@CompressWr

; 134  :         return;

  00184	eb 64		 jmp	 SHORT $LN12@CompressWr
$LN3@CompressWr:

; 135  :       fw.Write<DWORD>(dwWriteSize);

  00186	8b 45 ac	 mov	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  00189	50		 push	 eax
  0018a	8b 4d 10	 mov	 ecx, DWORD PTR _fw$[ebp]
  0018d	e8 00 00 00 00	 call	 ??$Write@K@FileWriter@ReplayTool@@QAEXK@Z ; ReplayTool::FileWriter::Write<unsigned long>

; 136  :       fw.WriteRaw(&_pInput[dwPos], dwWriteSize);

  00192	8b 45 ac	 mov	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  00195	50		 push	 eax
  00196	8b 4d f8	 mov	 ecx, DWORD PTR __pInput$[ebp]
  00199	03 4d c4	 add	 ecx, DWORD PTR _dwPos$[ebp]
  0019c	51		 push	 ecx
  0019d	8b 4d 10	 mov	 ecx, DWORD PTR _fw$[ebp]
  001a0	e8 00 00 00 00	 call	 ?WriteRaw@FileWriter@ReplayTool@@QAEXPAXI@Z ; ReplayTool::FileWriter::WriteRaw

; 137  :       dwPos += dwWriteSize;

  001a5	8b 45 c4	 mov	 eax, DWORD PTR _dwPos$[ebp]
  001a8	03 45 ac	 add	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  001ab	89 45 c4	 mov	 DWORD PTR _dwPos$[ebp], eax

; 138  :     }
; 139  :     else

  001ae	eb 35		 jmp	 SHORT $LN2@CompressWr
$LN5@CompressWr:

; 140  :     {
; 141  :       if ( !params.dwWritePos )

  001b0	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?params@@3U__Param@@A+12, 0
  001b7	75 02		 jne	 SHORT $LN1@CompressWr

; 142  :         return;

  001b9	eb 2f		 jmp	 SHORT $LN12@CompressWr
$LN1@CompressWr:

; 143  :       fw.Write<DWORD>(params.dwWritePos);

  001bb	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?params@@3U__Param@@A+12
  001c0	50		 push	 eax
  001c1	8b 4d 10	 mov	 ecx, DWORD PTR _fw$[ebp]
  001c4	e8 00 00 00 00	 call	 ??$Write@K@FileWriter@ReplayTool@@QAEXK@Z ; ReplayTool::FileWriter::Write<unsigned long>

; 144  :       fw.WriteRaw(bSegment, params.dwWritePos);

  001c9	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?params@@3U__Param@@A+12
  001ce	50		 push	 eax
  001cf	68 00 00 00 00	 push	 OFFSET ?bSegment@@3PADA	; bSegment
  001d4	8b 4d 10	 mov	 ecx, DWORD PTR _fw$[ebp]
  001d7	e8 00 00 00 00	 call	 ?WriteRaw@FileWriter@ReplayTool@@QAEXPAXI@Z ; ReplayTool::FileWriter::WriteRaw

; 145  :       dwPos += dwWriteSize;

  001dc	8b 45 c4	 mov	 eax, DWORD PTR _dwPos$[ebp]
  001df	03 45 ac	 add	 eax, DWORD PTR _dwWriteSize$85351[ebp]
  001e2	89 45 c4	 mov	 DWORD PTR _dwPos$[ebp], eax
$LN2@CompressWr:

; 146  :     }
; 147  : 
; 148  :     
; 149  :   } // for

  001e5	e9 f0 fe ff ff	 jmp	 $LN8@CompressWr
$LN12@CompressWr:

; 150  : }

  001ea	52		 push	 edx
  001eb	8b cd		 mov	 ecx, ebp
  001ed	50		 push	 eax
  001ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@CompressWr
  001f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f9	58		 pop	 eax
  001fa	5a		 pop	 edx
  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx
  001fe	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  00204	3b ec		 cmp	 ebp, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c3		 ret	 0
  0020f	90		 npad	 1
$LN20@CompressWr:
  00210	05 00 00 00	 DD	 5
  00214	00 00 00 00	 DD	 $LN19@CompressWr
$LN19@CompressWr:
  00218	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0021c	08 00 00 00	 DD	 8
  00220	00 00 00 00	 DD	 $LN14@CompressWr
  00224	dc ff ff ff	 DD	 -36			; ffffffdcH
  00228	04 00 00 00	 DD	 4
  0022c	00 00 00 00	 DD	 $LN15@CompressWr
  00230	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00234	04 00 00 00	 DD	 4
  00238	00 00 00 00	 DD	 $LN16@CompressWr
  0023c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00240	04 00 00 00	 DD	 4
  00244	00 00 00 00	 DD	 $LN17@CompressWr
  00248	94 ff ff ff	 DD	 -108			; ffffff94H
  0024c	04 00 00 00	 DD	 4
  00250	00 00 00 00	 DD	 $LN18@CompressWr
$LN18@CompressWr:
  00254	64		 DB	 100			; 00000064H
  00255	77		 DB	 119			; 00000077H
  00256	49		 DB	 73			; 00000049H
  00257	6d		 DB	 109			; 0000006dH
  00258	70		 DB	 112			; 00000070H
  00259	6c		 DB	 108			; 0000006cH
  0025a	53		 DB	 83			; 00000053H
  0025b	69		 DB	 105			; 00000069H
  0025c	7a		 DB	 122			; 0000007aH
  0025d	65		 DB	 101			; 00000065H
  0025e	00		 DB	 0
$LN17@CompressWr:
  0025f	64		 DB	 100			; 00000064H
  00260	77		 DB	 119			; 00000077H
  00261	54		 DB	 84			; 00000054H
  00262	79		 DB	 121			; 00000079H
  00263	70		 DB	 112			; 00000070H
  00264	65		 DB	 101			; 00000065H
  00265	00		 DB	 0
$LN16@CompressWr:
  00266	64		 DB	 100			; 00000064H
  00267	77		 DB	 119			; 00000077H
  00268	4f		 DB	 79			; 0000004fH
  00269	6c		 DB	 108			; 0000006cH
  0026a	64		 DB	 100			; 00000064H
  0026b	00		 DB	 0
$LN15@CompressWr:
  0026c	64		 DB	 100			; 00000064H
  0026d	77		 DB	 119			; 00000077H
  0026e	53		 DB	 83			; 00000053H
  0026f	69		 DB	 105			; 00000069H
  00270	7a		 DB	 122			; 0000007aH
  00271	65		 DB	 101			; 00000065H
  00272	00		 DB	 0
$LN14@CompressWr:
  00273	68		 DB	 104			; 00000068H
  00274	64		 DB	 100			; 00000064H
  00275	72		 DB	 114			; 00000072H
  00276	00		 DB	 0
?CompressWrite@@YAXPAXIAAVFileWriter@ReplayTool@@@Z ENDP ; CompressWrite
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\filereader.h
_TEXT	ENDS
;	COMDAT ??$Read@U__Part@@@FileReader@ReplayTool@@QAE?AU__Part@@XZ
_TEXT	SEGMENT
_rval$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
??$Read@U__Part@@@FileReader@ReplayTool@@QAE?AU__Part@@XZ PROC ; ReplayTool::FileReader::Read<__Part>, COMDAT
; _this$ = ecx

; 19   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 20   :       _T rval;
; 21   :       if ( dwOffset + sizeof(_T) <= dwFileSize )

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00029	83 c1 08	 add	 ecx, 8
  0002c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  00032	77 2a		 ja	 SHORT $LN2@Read

; 22   :       {
; 23   :         rval = *(_T*)&this->pMem[dwOffset];

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00040	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00043	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  00047	89 55 e8	 mov	 DWORD PTR _rval$[ebp], edx
  0004a	89 45 ec	 mov	 DWORD PTR _rval$[ebp+4], eax

; 24   :         dwOffset += sizeof(_T);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00053	83 c1 08	 add	 ecx, 8
  00056	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00059	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 25   :       }
; 26   :       else

  0005c	eb 17		 jmp	 SHORT $LN1@Read
$LN2@Read:

; 27   :       {
; 28   :         memset(&rval, 0, sizeof(_T));

  0005e	6a 08		 push	 8
  00060	6a 00		 push	 0
  00062	8d 45 e8	 lea	 eax, DWORD PTR _rval$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   :         this->eof = true;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	c6 40 10 01	 mov	 BYTE PTR [eax+16], 1
$LN1@Read:

; 30   :       }
; 31   :       return rval;

  00075	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00078	8b 4d e8	 mov	 ecx, DWORD PTR _rval$[ebp]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
  0007d	8b 55 ec	 mov	 edx, DWORD PTR _rval$[ebp+4]
  00080	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00083	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 32   :     }

  00086	52		 push	 edx
  00087	8b cd		 mov	 ecx, ebp
  00089	50		 push	 eax
  0008a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Read
  00090	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00095	58		 pop	 eax
  00096	5a		 pop	 edx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
  000ad	8d 49 00	 npad	 3
$LN7@Read:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN6@Read
$LN6@Read:
  000b8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000bc	08 00 00 00	 DD	 8
  000c0	00 00 00 00	 DD	 $LN5@Read
$LN5@Read:
  000c4	72		 DB	 114			; 00000072H
  000c5	76		 DB	 118			; 00000076H
  000c6	61		 DB	 97			; 00000061H
  000c7	6c		 DB	 108			; 0000006cH
  000c8	00		 DB	 0
??$Read@U__Part@@@FileReader@ReplayTool@@QAE?AU__Part@@XZ ENDP ; ReplayTool::FileReader::Read<__Part>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$Read@I@FileReader@ReplayTool@@QAEIXZ
_TEXT	SEGMENT
_rval$ = -20						; size = 4
_this$ = -8						; size = 4
??$Read@I@FileReader@ReplayTool@@QAEIXZ PROC		; ReplayTool::FileReader::Read<unsigned int>, COMDAT
; _this$ = ecx

; 19   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 20   :       _T rval;
; 21   :       if ( dwOffset + sizeof(_T) <= dwFileSize )

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00029	83 c1 04	 add	 ecx, 4
  0002c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  00032	77 23		 ja	 SHORT $LN2@Read@2

; 22   :       {
; 23   :         rval = *(_T*)&this->pMem[dwOffset];

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00040	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00043	89 4d ec	 mov	 DWORD PTR _rval$[ebp], ecx

; 24   :         dwOffset += sizeof(_T);

  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00052	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 25   :       }
; 26   :       else

  00055	eb 17		 jmp	 SHORT $LN1@Read@2
$LN2@Read@2:

; 27   :       {
; 28   :         memset(&rval, 0, sizeof(_T));

  00057	6a 04		 push	 4
  00059	6a 00		 push	 0
  0005b	8d 45 ec	 lea	 eax, DWORD PTR _rval$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _memset
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   :         this->eof = true;

  00067	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c6 40 10 01	 mov	 BYTE PTR [eax+16], 1
$LN1@Read@2:

; 30   :       }
; 31   :       return rval;

  0006e	8b 45 ec	 mov	 eax, DWORD PTR _rval$[ebp]

; 32   :     }

  00071	52		 push	 edx
  00072	8b cd		 mov	 ecx, ebp
  00074	50		 push	 eax
  00075	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Read@2
  0007b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00080	58		 pop	 eax
  00081	5a		 pop	 edx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
  00096	8b ff		 npad	 2
$LN7@Read@2:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN6@Read@2
$LN6@Read@2:
  000a0	ec ff ff ff	 DD	 -20			; ffffffecH
  000a4	04 00 00 00	 DD	 4
  000a8	00 00 00 00	 DD	 $LN5@Read@2
$LN5@Read@2:
  000ac	72		 DB	 114			; 00000072H
  000ad	76		 DB	 118			; 00000076H
  000ae	61		 DB	 97			; 00000061H
  000af	6c		 DB	 108			; 0000006cH
  000b0	00		 DB	 0
??$Read@I@FileReader@ReplayTool@@QAEIXZ ENDP		; ReplayTool::FileReader::Read<unsigned int>
_TEXT	ENDS
EXTRN	__imp__WriteFile@20:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\fili\development\gp\rtsairesearch\bwapi\bwapi\libreplaytool\filewriter.h
;	COMDAT ??$Write@U__Part@@@FileWriter@ReplayTool@@QAEXU__Part@@@Z
_TEXT	SEGMENT
_written$ = -20						; size = 4
_this$ = -8						; size = 4
_val$ = 8						; size = 8
??$Write@U__Part@@@FileWriter@ReplayTool@@QAEXU__Part@@@Z PROC ; ReplayTool::FileWriter::Write<__Part>, COMDAT
; _this$ = ecx

; 17   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 18   :       DWORD written;
; 19   :       WriteFile(this->hFile, &val, sizeof(_T), &written, NULL);

  00023	8b f4		 mov	 esi, esp
  00025	6a 00		 push	 0
  00027	8d 45 ec	 lea	 eax, DWORD PTR _written$[ebp]
  0002a	50		 push	 eax
  0002b	6a 08		 push	 8
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR _val$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 20   :     }

  00044	52		 push	 edx
  00045	8b cd		 mov	 ecx, ebp
  00047	50		 push	 eax
  00048	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Write
  0004e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00053	58		 pop	 eax
  00054	5a		 pop	 edx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
  0006b	90		 npad	 1
$LN5@Write:
  0006c	01 00 00 00	 DD	 1
  00070	00 00 00 00	 DD	 $LN4@Write
$LN4@Write:
  00074	ec ff ff ff	 DD	 -20			; ffffffecH
  00078	04 00 00 00	 DD	 4
  0007c	00 00 00 00	 DD	 $LN3@Write
$LN3@Write:
  00080	77		 DB	 119			; 00000077H
  00081	72		 DB	 114			; 00000072H
  00082	69		 DB	 105			; 00000069H
  00083	74		 DB	 116			; 00000074H
  00084	74		 DB	 116			; 00000074H
  00085	65		 DB	 101			; 00000065H
  00086	6e		 DB	 110			; 0000006eH
  00087	00		 DB	 0
??$Write@U__Part@@@FileWriter@ReplayTool@@QAEXU__Part@@@Z ENDP ; ReplayTool::FileWriter::Write<__Part>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$Write@K@FileWriter@ReplayTool@@QAEXK@Z
_TEXT	SEGMENT
_written$ = -20						; size = 4
_this$ = -8						; size = 4
_val$ = 8						; size = 4
??$Write@K@FileWriter@ReplayTool@@QAEXK@Z PROC		; ReplayTool::FileWriter::Write<unsigned long>, COMDAT
; _this$ = ecx

; 17   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 18   :       DWORD written;
; 19   :       WriteFile(this->hFile, &val, sizeof(_T), &written, NULL);

  00023	8b f4		 mov	 esi, esp
  00025	6a 00		 push	 0
  00027	8d 45 ec	 lea	 eax, DWORD PTR _written$[ebp]
  0002a	50		 push	 eax
  0002b	6a 04		 push	 4
  0002d	8d 4d 08	 lea	 ecx, DWORD PTR _val$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 20   :     }

  00044	52		 push	 edx
  00045	8b cd		 mov	 ecx, ebp
  00047	50		 push	 eax
  00048	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Write@2
  0004e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00053	58		 pop	 eax
  00054	5a		 pop	 edx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
  0006b	90		 npad	 1
$LN5@Write@2:
  0006c	01 00 00 00	 DD	 1
  00070	00 00 00 00	 DD	 $LN4@Write@2
$LN4@Write@2:
  00074	ec ff ff ff	 DD	 -20			; ffffffecH
  00078	04 00 00 00	 DD	 4
  0007c	00 00 00 00	 DD	 $LN3@Write@2
$LN3@Write@2:
  00080	77		 DB	 119			; 00000077H
  00081	72		 DB	 114			; 00000072H
  00082	69		 DB	 105			; 00000069H
  00083	74		 DB	 116			; 00000074H
  00084	74		 DB	 116			; 00000074H
  00085	65		 DB	 101			; 00000065H
  00086	6e		 DB	 110			; 0000006eH
  00087	00		 DB	 0
??$Write@K@FileWriter@ReplayTool@@QAEXK@Z ENDP		; ReplayTool::FileWriter::Write<unsigned long>
_TEXT	ENDS
END
